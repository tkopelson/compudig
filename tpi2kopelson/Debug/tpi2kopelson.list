
tpi2kopelson.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  08005b54  08005b54  00006b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de8  08005de8  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005de8  08005de8  00006de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005df0  08005df0  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005df0  08005df0  00006df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005df4  08005df4  00006df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005df8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20000060  08005e58  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08005e58  0000734c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113b7  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f1  00000000  00000000  00018447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  0001a538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf0  00000000  00000000  0001b5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226df  00000000  00000000  0001c2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123ad  00000000  00000000  0003e98f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da7dc  00000000  00000000  00050d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b518  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cb4  00000000  00000000  0012b55c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00130210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b3c 	.word	0x08005b3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005b3c 	.word	0x08005b3c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 ff0b 	bl	80013ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f848 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f000 f9bc 	bl	8000954 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005dc:	f000 f88a 	bl	80006f4 <MX_ADC1_Init>
  MX_TIM1_Init();
 80005e0:	f000 f8ec 	bl	80007bc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80005e4:	f000 f986 	bl	80008f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

//para modularizar el codigo mejor, hice funciones de config inicial de pines y timer asi no queda tanto quilombo
  configuracionPines();
 80005e8:	f000 fa0a 	bl	8000a00 <configuracionPines>
  configuracionTIM1();
 80005ec:	f000 fae2 	bl	8000bb4 <configuracionTIM1>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  esperarRecepcion();
 80005f0:	f000 fb28 	bl	8000c44 <esperarRecepcion>
	  selectorDesicion();
 80005f4:	f000 fb4e 	bl	8000c94 <selectorDesicion>

	  switch (etapa_actual)
 80005f8:	4b18      	ldr	r3, [pc, #96]	@ (800065c <main+0x90>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b04      	cmp	r3, #4
 80005fe:	d8f7      	bhi.n	80005f0 <main+0x24>
 8000600:	a201      	add	r2, pc, #4	@ (adr r2, 8000608 <main+0x3c>)
 8000602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000606:	bf00      	nop
 8000608:	0800061d 	.word	0x0800061d
 800060c:	0800063f 	.word	0x0800063f
 8000610:	08000649 	.word	0x08000649
 8000614:	08000653 	.word	0x08000653
 8000618:	08000629 	.word	0x08000629
	      {
	          case VALIDACION:
	              enviarStringPorUART("OK_DEV01_2025_v1.0\n");
 800061c:	4810      	ldr	r0, [pc, #64]	@ (8000660 <main+0x94>)
 800061e:	f000 fbef 	bl	8000e00 <enviarStringPorUART>
	              limpiar();
 8000622:	f000 fbdd 	bl	8000de0 <limpiar>
	              break;
 8000626:	e018      	b.n	800065a <main+0x8e>

	          case VALIDACION2:
	              enviarStringPorUART("OK\n");
 8000628:	480e      	ldr	r0, [pc, #56]	@ (8000664 <main+0x98>)
 800062a:	f000 fbe9 	bl	8000e00 <enviarStringPorUART>
	              prenderLedComunicacion();
 800062e:	f000 fbcb 	bl	8000dc8 <prenderLedComunicacion>
	              etapa_actual = COMUNICACION;
 8000632:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <main+0x90>)
 8000634:	2201      	movs	r2, #1
 8000636:	601a      	str	r2, [r3, #0]
	              limpiar();
 8000638:	f000 fbd2 	bl	8000de0 <limpiar>
	              break;
 800063c:	e00d      	b.n	800065a <main+0x8e>

	          case COMUNICACION:
	              actualizar();
 800063e:	f000 fc23 	bl	8000e88 <actualizar>
	              limpiar();
 8000642:	f000 fbcd 	bl	8000de0 <limpiar>
	              break;
 8000646:	e008      	b.n	800065a <main+0x8e>

	          case FIN:
	              finalComunicacion();
 8000648:	f000 fbf0 	bl	8000e2c <finalComunicacion>
	              limpiar();
 800064c:	f000 fbc8 	bl	8000de0 <limpiar>
	              break;
 8000650:	e003      	b.n	800065a <main+0x8e>

	          case NADA:
	              limpiar();
 8000652:	f000 fbc5 	bl	8000de0 <limpiar>
	              break;
 8000656:	bf00      	nop
 8000658:	e7ca      	b.n	80005f0 <main+0x24>
	  esperarRecepcion();
 800065a:	e7c9      	b.n	80005f0 <main+0x24>
 800065c:	20000000 	.word	0x20000000
 8000660:	08005b7c 	.word	0x08005b7c
 8000664:	08005b90 	.word	0x08005b90

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b096      	sub	sp, #88	@ 0x58
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	2244      	movs	r2, #68	@ 0x44
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f004 fdd0 	bl	800521c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	463b      	mov	r3, r7
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800068a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800068e:	f002 f885 	bl	800279c <HAL_PWREx_ControlVoltageScaling>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000698:	f000 fcb6 	bl	8001008 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800069c:	2310      	movs	r3, #16
 800069e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006a8:	2360      	movs	r3, #96	@ 0x60
 80006aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 f8c7 	bl	8002848 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80006c0:	f000 fca2 	bl	8001008 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d8:	463b      	mov	r3, r7
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 fcc7 	bl	8003070 <HAL_RCC_ClockConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006e8:	f000 fc8e 	bl	8001008 <Error_Handler>
  }
}
 80006ec:	bf00      	nop
 80006ee:	3758      	adds	r7, #88	@ 0x58
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
 8000708:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800070a:	4b29      	ldr	r3, [pc, #164]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 800070c:	4a29      	ldr	r2, [pc, #164]	@ (80007b4 <MX_ADC1_Init+0xc0>)
 800070e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000710:	4b27      	ldr	r3, [pc, #156]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 8000712:	2200      	movs	r2, #0
 8000714:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000716:	4b26      	ldr	r3, [pc, #152]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800071c:	4b24      	ldr	r3, [pc, #144]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000722:	4b23      	ldr	r3, [pc, #140]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000728:	4b21      	ldr	r3, [pc, #132]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 800072a:	2204      	movs	r2, #4
 800072c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800072e:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 8000730:	2200      	movs	r2, #0
 8000732:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000734:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 8000736:	2200      	movs	r2, #0
 8000738:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800073a:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 800073c:	2201      	movs	r2, #1
 800073e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000740:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000748:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 800074a:	2200      	movs	r2, #0
 800074c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800074e:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 8000750:	2200      	movs	r2, #0
 8000752:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000754:	4b16      	ldr	r3, [pc, #88]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 8000756:	2200      	movs	r2, #0
 8000758:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800075c:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 800075e:	2200      	movs	r2, #0
 8000760:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000762:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800076a:	4811      	ldr	r0, [pc, #68]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 800076c:	f001 f862 	bl	8001834 <HAL_ADC_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000776:	f000 fc47 	bl	8001008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800077a:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <MX_ADC1_Init+0xc4>)
 800077c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800077e:	2306      	movs	r3, #6
 8000780:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000786:	237f      	movs	r3, #127	@ 0x7f
 8000788:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800078a:	2304      	movs	r3, #4
 800078c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000792:	463b      	mov	r3, r7
 8000794:	4619      	mov	r1, r3
 8000796:	4806      	ldr	r0, [pc, #24]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 8000798:	f001 f98e 	bl	8001ab8 <HAL_ADC_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80007a2:	f000 fc31 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	2000007c 	.word	0x2000007c
 80007b4:	50040000 	.word	0x50040000
 80007b8:	14f00020 	.word	0x14f00020

080007bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b096      	sub	sp, #88	@ 0x58
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
 80007de:	615a      	str	r2, [r3, #20]
 80007e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	222c      	movs	r2, #44	@ 0x2c
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f004 fd17 	bl	800521c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007ee:	4b3f      	ldr	r3, [pc, #252]	@ (80008ec <MX_TIM1_Init+0x130>)
 80007f0:	4a3f      	ldr	r2, [pc, #252]	@ (80008f0 <MX_TIM1_Init+0x134>)
 80007f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007f4:	4b3d      	ldr	r3, [pc, #244]	@ (80008ec <MX_TIM1_Init+0x130>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fa:	4b3c      	ldr	r3, [pc, #240]	@ (80008ec <MX_TIM1_Init+0x130>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000800:	4b3a      	ldr	r3, [pc, #232]	@ (80008ec <MX_TIM1_Init+0x130>)
 8000802:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000806:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000808:	4b38      	ldr	r3, [pc, #224]	@ (80008ec <MX_TIM1_Init+0x130>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800080e:	4b37      	ldr	r3, [pc, #220]	@ (80008ec <MX_TIM1_Init+0x130>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000814:	4b35      	ldr	r3, [pc, #212]	@ (80008ec <MX_TIM1_Init+0x130>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800081a:	4834      	ldr	r0, [pc, #208]	@ (80008ec <MX_TIM1_Init+0x130>)
 800081c:	f003 f934 	bl	8003a88 <HAL_TIM_PWM_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000826:	f000 fbef 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082a:	2300      	movs	r3, #0
 800082c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800082e:	2300      	movs	r3, #0
 8000830:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000836:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800083a:	4619      	mov	r1, r3
 800083c:	482b      	ldr	r0, [pc, #172]	@ (80008ec <MX_TIM1_Init+0x130>)
 800083e:	f003 fd7d 	bl	800433c <HAL_TIMEx_MasterConfigSynchronization>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000848:	f000 fbde 	bl	8001008 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800084c:	2360      	movs	r3, #96	@ 0x60
 800084e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000854:	2300      	movs	r3, #0
 8000856:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000858:	2300      	movs	r3, #0
 800085a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000860:	2300      	movs	r3, #0
 8000862:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000864:	2300      	movs	r3, #0
 8000866:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000868:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800086c:	2200      	movs	r2, #0
 800086e:	4619      	mov	r1, r3
 8000870:	481e      	ldr	r0, [pc, #120]	@ (80008ec <MX_TIM1_Init+0x130>)
 8000872:	f003 f961 	bl	8003b38 <HAL_TIM_PWM_ConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800087c:	f000 fbc4 	bl	8001008 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000880:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000884:	2204      	movs	r2, #4
 8000886:	4619      	mov	r1, r3
 8000888:	4818      	ldr	r0, [pc, #96]	@ (80008ec <MX_TIM1_Init+0x130>)
 800088a:	f003 f955 	bl	8003b38 <HAL_TIM_PWM_ConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000894:	f000 fbb8 	bl	8001008 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	4619      	mov	r1, r3
 80008cc:	4807      	ldr	r0, [pc, #28]	@ (80008ec <MX_TIM1_Init+0x130>)
 80008ce:	f003 fd9b 	bl	8004408 <HAL_TIMEx_ConfigBreakDeadTime>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80008d8:	f000 fb96 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008dc:	4803      	ldr	r0, [pc, #12]	@ (80008ec <MX_TIM1_Init+0x130>)
 80008de:	f000 fc41 	bl	8001164 <HAL_TIM_MspPostInit>

}
 80008e2:	bf00      	nop
 80008e4:	3758      	adds	r7, #88	@ 0x58
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200000e0 	.word	0x200000e0
 80008f0:	40012c00 	.word	0x40012c00

080008f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f8:	4b14      	ldr	r3, [pc, #80]	@ (800094c <MX_USART2_UART_Init+0x58>)
 80008fa:	4a15      	ldr	r2, [pc, #84]	@ (8000950 <MX_USART2_UART_Init+0x5c>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008fe:	4b13      	ldr	r3, [pc, #76]	@ (800094c <MX_USART2_UART_Init+0x58>)
 8000900:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000904:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MX_USART2_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <MX_USART2_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <MX_USART2_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <MX_USART2_UART_Init+0x58>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <MX_USART2_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_USART2_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <MX_USART2_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_USART2_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_USART2_UART_Init+0x58>)
 8000938:	f003 fdde 	bl	80044f8 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000942:	f000 fb61 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000012c 	.word	0x2000012c
 8000950:	40004400 	.word	0x40004400

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b23      	ldr	r3, [pc, #140]	@ (80009f8 <MX_GPIO_Init+0xa4>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096e:	4a22      	ldr	r2, [pc, #136]	@ (80009f8 <MX_GPIO_Init+0xa4>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000976:	4b20      	ldr	r3, [pc, #128]	@ (80009f8 <MX_GPIO_Init+0xa4>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	4b1d      	ldr	r3, [pc, #116]	@ (80009f8 <MX_GPIO_Init+0xa4>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000986:	4a1c      	ldr	r2, [pc, #112]	@ (80009f8 <MX_GPIO_Init+0xa4>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800098e:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <MX_GPIO_Init+0xa4>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(actuador1_GPIO_Port, actuador1_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a4:	f001 feba 	bl	800271c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, actuador2_Pin|led_estado_Pin|actuador4_Pin|actuador3_Pin, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	21f0      	movs	r1, #240	@ 0xf0
 80009ac:	4813      	ldr	r0, [pc, #76]	@ (80009fc <MX_GPIO_Init+0xa8>)
 80009ae:	f001 feb5 	bl	800271c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : actuador1_Pin */
  GPIO_InitStruct.Pin = actuador1_Pin;
 80009b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(actuador1_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	4619      	mov	r1, r3
 80009ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ce:	f001 fd3b 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : actuador2_Pin led_estado_Pin actuador4_Pin actuador3_Pin */
  GPIO_InitStruct.Pin = actuador2_Pin|led_estado_Pin|actuador4_Pin|actuador3_Pin;
 80009d2:	23f0      	movs	r3, #240	@ 0xf0
 80009d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	4619      	mov	r1, r3
 80009e8:	4804      	ldr	r0, [pc, #16]	@ (80009fc <MX_GPIO_Init+0xa8>)
 80009ea:	f001 fd2d 	bl	8002448 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009ee:	bf00      	nop
 80009f0:	3720      	adds	r7, #32
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40021000 	.word	0x40021000
 80009fc:	48000400 	.word	0x48000400

08000a00 <configuracionPines>:

/* USER CODE BEGIN 4 */
void configuracionPines(void) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0

    // 1. Habilitar relojes para GPIOA y GPIOB
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOBEN;
 8000a04:	4b68      	ldr	r3, [pc, #416]	@ (8000ba8 <configuracionPines+0x1a8>)
 8000a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a08:	4a67      	ldr	r2, [pc, #412]	@ (8000ba8 <configuracionPines+0x1a8>)
 8000a0a:	f043 0303 	orr.w	r3, r3, #3
 8000a0e:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // --- Salidas digitales con pull-up ---
    // PA12 (Actuador1) -> output, pull-up
    GPIOA->MODER &= ~(3 << (12 * 2));
 8000a10:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000a1a:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8000a1e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (1 << (12 * 2));    // Output
 8000a20:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000a2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a2e:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~(1 << 12);         // Push-pull
 8000a30:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000a3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a3e:	6053      	str	r3, [r2, #4]
    GPIOA->PUPDR &= ~(3 << (12 * 2));
 8000a40:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000a4a:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8000a4e:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  (1 << (12 * 2));    // Pull-up
 8000a50:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000a5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a5e:	60d3      	str	r3, [r2, #12]

    // PB4, PB6, PB7 (Actuadores) + PB5 (LED Estado) -> output, pull-up
    GPIOB->MODER &= ~((3 << (4 * 2)) | (3 << (5 * 2)) | (3 << (6 * 2)) | (3 << (7 * 2)));
 8000a60:	4b52      	ldr	r3, [pc, #328]	@ (8000bac <configuracionPines+0x1ac>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a51      	ldr	r2, [pc, #324]	@ (8000bac <configuracionPines+0x1ac>)
 8000a66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000a6a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  ((1 << (4 * 2)) | (1 << (5 * 2)) | (1 << (6 * 2)) | (1 << (7 * 2))); // Output
 8000a6c:	4b4f      	ldr	r3, [pc, #316]	@ (8000bac <configuracionPines+0x1ac>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a4e      	ldr	r2, [pc, #312]	@ (8000bac <configuracionPines+0x1ac>)
 8000a72:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 8000a76:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~((1 << 4) | (1 << 5) | (1 << 6) | (1 << 7)); // Push-pull
 8000a78:	4b4c      	ldr	r3, [pc, #304]	@ (8000bac <configuracionPines+0x1ac>)
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	4a4b      	ldr	r2, [pc, #300]	@ (8000bac <configuracionPines+0x1ac>)
 8000a7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000a82:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~((3 << (4 * 2)) | (3 << (5 * 2)) | (3 << (6 * 2)) | (3 << (7 * 2)));
 8000a84:	4b49      	ldr	r3, [pc, #292]	@ (8000bac <configuracionPines+0x1ac>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	4a48      	ldr	r2, [pc, #288]	@ (8000bac <configuracionPines+0x1ac>)
 8000a8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000a8e:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |=  ((1 << (4 * 2)) | (1 << (5 * 2)) | (1 << (6 * 2)) | (1 << (7 * 2))); // Pull-up
 8000a90:	4b46      	ldr	r3, [pc, #280]	@ (8000bac <configuracionPines+0x1ac>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	4a45      	ldr	r2, [pc, #276]	@ (8000bac <configuracionPines+0x1ac>)
 8000a96:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 8000a9a:	60d3      	str	r3, [r2, #12]

    // --- PWM: PA8 (TIM1_CH1), PA9 (TIM1_CH2) ---
    GPIOA->MODER &= ~((3 << (8 * 2)) | (3 << (9 * 2)));
 8000a9c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000aa6:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000aaa:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  ((2 << (8 * 2)) | (2 << (9 * 2))); // Alternate Function
 8000aac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ab6:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000aba:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] &= ~((0xF << ((8 - 8) * 4)) | (0xF << ((9 - 8) * 4)));
 8000abc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ac2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ac6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000aca:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1] |=  ((1 << ((8 - 8) * 4)) | (1 << ((9 - 8) * 4))); // AF1 = TIM1
 8000acc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ad2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ad6:	f043 0311 	orr.w	r3, r3, #17
 8000ada:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->OTYPER &= ~((1 << 8) | (1 << 9)); // Push-pull
 8000adc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ae6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000aea:	6053      	str	r3, [r2, #4]
    GPIOA->PUPDR &= ~((3 << (8 * 2)) | (3 << (9 * 2)));
 8000aec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000af6:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000afa:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  ((1 << (8 * 2)) | (1 << (9 * 2))); // Pull-up
 8000afc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b06:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000b0a:	60d3      	str	r3, [r2, #12]

    // --- Entrada ADC: PA0 ---
    GPIOA->MODER |= (3 << (0 * 2));  // Analog mode
 8000b0c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b16:	f043 0303 	orr.w	r3, r3, #3
 8000b1a:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3 << (0 * 2)); // Sin pull-up ni pull-down
 8000b1c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b20:	68db      	ldr	r3, [r3, #12]
 8000b22:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b26:	f023 0303 	bic.w	r3, r3, #3
 8000b2a:	60d3      	str	r3, [r2, #12]

    // Salir del modo deep-power-down y habilitar el regulador
    ADC1->CR &= ~ADC_CR_DEEPPWD;
 8000b2c:	4b20      	ldr	r3, [pc, #128]	@ (8000bb0 <configuracionPines+0x1b0>)
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	4a1f      	ldr	r2, [pc, #124]	@ (8000bb0 <configuracionPines+0x1b0>)
 8000b32:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000b36:	6093      	str	r3, [r2, #8]
    ADC1->CR |=  ADC_CR_ADVREGEN;
 8000b38:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb0 <configuracionPines+0x1b0>)
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	4a1c      	ldr	r2, [pc, #112]	@ (8000bb0 <configuracionPines+0x1b0>)
 8000b3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b42:	6093      	str	r3, [r2, #8]
    HAL_Delay(50); // Esperar a que se estabilice el regulador
 8000b44:	2032      	movs	r0, #50	@ 0x32
 8000b46:	f000 fcc5 	bl	80014d4 <HAL_Delay>

    // Configurar resolución a 12 bits, alineación a derecha, modo single-shot
    ADC1->CFGR &= ~(ADC_CFGR_EXTEN | ADC_CFGR_RES | ADC_CFGR_ALIGN | ADC_CFGR_CONT);
 8000b4a:	4b19      	ldr	r3, [pc, #100]	@ (8000bb0 <configuracionPines+0x1b0>)
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	4a18      	ldr	r2, [pc, #96]	@ (8000bb0 <configuracionPines+0x1b0>)
 8000b50:	f423 5330 	bic.w	r3, r3, #11264	@ 0x2c00
 8000b54:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000b58:	60d3      	str	r3, [r2, #12]

    // Configurar tiempo de muestreo para canal 5 (PA0) — cuanto mayor, más preciso
    ADC1->SMPR1 &= ~(7 << ADC_SMPR1_SMP5_Pos);
 8000b5a:	4b15      	ldr	r3, [pc, #84]	@ (8000bb0 <configuracionPines+0x1b0>)
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	4a14      	ldr	r2, [pc, #80]	@ (8000bb0 <configuracionPines+0x1b0>)
 8000b60:	f423 3360 	bic.w	r3, r3, #229376	@ 0x38000
 8000b64:	6153      	str	r3, [r2, #20]
    ADC1->SMPR1 |=  (3 << ADC_SMPR1_SMP5_Pos); // Por ej: 24.5 ciclos
 8000b66:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <configuracionPines+0x1b0>)
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	4a11      	ldr	r2, [pc, #68]	@ (8000bb0 <configuracionPines+0x1b0>)
 8000b6c:	f443 33c0 	orr.w	r3, r3, #98304	@ 0x18000
 8000b70:	6153      	str	r3, [r2, #20]

    // Configurar secuencia de conversión: solo canal 5
    ADC1->SQR1 &= ~ADC_SQR1_L;
 8000b72:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb0 <configuracionPines+0x1b0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb0 <configuracionPines+0x1b0>)
 8000b78:	f023 030f 	bic.w	r3, r3, #15
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC1->SQR1 &= ~ADC_SQR1_SQ1;
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <configuracionPines+0x1b0>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb0 <configuracionPines+0x1b0>)
 8000b84:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC1->SQR1 |=  (5 << ADC_SQR1_SQ1_Pos);
 8000b8a:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <configuracionPines+0x1b0>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a08      	ldr	r2, [pc, #32]	@ (8000bb0 <configuracionPines+0x1b0>)
 8000b90:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30

    // Habilitar el ADC
    ADC1->CR |= ADC_CR_ADEN;
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <configuracionPines+0x1b0>)
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	4a05      	ldr	r2, [pc, #20]	@ (8000bb0 <configuracionPines+0x1b0>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6093      	str	r3, [r2, #8]



}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	48000400 	.word	0x48000400
 8000bb0:	50040000 	.word	0x50040000

08000bb4 <configuracionTIM1>:

void configuracionTIM1(void) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000bb8:	4b20      	ldr	r3, [pc, #128]	@ (8000c3c <configuracionTIM1+0x88>)
 8000bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bbc:	4a1f      	ldr	r2, [pc, #124]	@ (8000c3c <configuracionTIM1+0x88>)
 8000bbe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000bc2:	6613      	str	r3, [r2, #96]	@ 0x60

    //elegi 1khz en el tpi2 con estos valores. f_pwm = 4Mhz / 40*100 da 1khz

    TIM1->PSC = 39;
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c40 <configuracionTIM1+0x8c>)
 8000bc6:	2227      	movs	r2, #39	@ 0x27
 8000bc8:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM1->ARR = 99;
 8000bca:	4b1d      	ldr	r3, [pc, #116]	@ (8000c40 <configuracionTIM1+0x8c>)
 8000bcc:	2263      	movs	r2, #99	@ 0x63
 8000bce:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM1->CCR1 = 0;      // duty canal1
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c40 <configuracionTIM1+0x8c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2 =  0;      // duty canal2
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c40 <configuracionTIM1+0x8c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	639a      	str	r2, [r3, #56]	@ 0x38

    TIM1->CCMR1 &= ~((7 << 4) | (7 << 12));
 8000bdc:	4b18      	ldr	r3, [pc, #96]	@ (8000c40 <configuracionTIM1+0x8c>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a17      	ldr	r2, [pc, #92]	@ (8000c40 <configuracionTIM1+0x8c>)
 8000be2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000bea:	6193      	str	r3, [r2, #24]
    TIM1->CCMR1 |= ((6 << 4) | (6 << 12)); // PWM mode 1 para CH1 y CH2
 8000bec:	4b14      	ldr	r3, [pc, #80]	@ (8000c40 <configuracionTIM1+0x8c>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a13      	ldr	r2, [pc, #76]	@ (8000c40 <configuracionTIM1+0x8c>)
 8000bf2:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000bf6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000bfa:	6193      	str	r3, [r2, #24]
    TIM1->CCMR1 |= (1 << 3) | (1 << 11);   // Preload enable
 8000bfc:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <configuracionTIM1+0x8c>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	4a0f      	ldr	r2, [pc, #60]	@ (8000c40 <configuracionTIM1+0x8c>)
 8000c02:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c06:	f043 0308 	orr.w	r3, r3, #8
 8000c0a:	6193      	str	r3, [r2, #24]

    TIM1->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E; // Enable CH1 y CH2
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <configuracionTIM1+0x8c>)
 8000c0e:	6a1b      	ldr	r3, [r3, #32]
 8000c10:	4a0b      	ldr	r2, [pc, #44]	@ (8000c40 <configuracionTIM1+0x8c>)
 8000c12:	f043 0311 	orr.w	r3, r3, #17
 8000c16:	6213      	str	r3, [r2, #32]
    TIM1->BDTR |= TIM_BDTR_MOE;   // Main output enable
 8000c18:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <configuracionTIM1+0x8c>)
 8000c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1c:	4a08      	ldr	r2, [pc, #32]	@ (8000c40 <configuracionTIM1+0x8c>)
 8000c1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c22:	6453      	str	r3, [r2, #68]	@ 0x44
    TIM1->CR1 |= TIM_CR1_CEN;     // Enable counter
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <configuracionTIM1+0x8c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a05      	ldr	r2, [pc, #20]	@ (8000c40 <configuracionTIM1+0x8c>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	6013      	str	r3, [r2, #0]
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40012c00 	.word	0x40012c00

08000c44 <esperarRecepcion>:


void esperarRecepcion(void) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0

	//supongamos q la idea es recibir 'INV1'

	while (1) {
	    // Recibo de a 1 byte
	    HAL_UART_Receive(&huart2, &ch, 1, HAL_MAX_DELAY);
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	490d      	ldr	r1, [pc, #52]	@ (8000c84 <esperarRecepcion+0x40>)
 8000c50:	480d      	ldr	r0, [pc, #52]	@ (8000c88 <esperarRecepcion+0x44>)
 8000c52:	f003 fd28 	bl	80046a6 <HAL_UART_Receive>
	    buffer[i++] = ch;
 8000c56:	4b0d      	ldr	r3, [pc, #52]	@ (8000c8c <esperarRecepcion+0x48>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	1c5a      	adds	r2, r3, #1
 8000c5c:	490b      	ldr	r1, [pc, #44]	@ (8000c8c <esperarRecepcion+0x48>)
 8000c5e:	600a      	str	r2, [r1, #0]
 8000c60:	4a08      	ldr	r2, [pc, #32]	@ (8000c84 <esperarRecepcion+0x40>)
 8000c62:	7811      	ldrb	r1, [r2, #0]
 8000c64:	4a0a      	ldr	r2, [pc, #40]	@ (8000c90 <esperarRecepcion+0x4c>)
 8000c66:	54d1      	strb	r1, [r2, r3]

	    // Si llegó el fin de línea
	    if (ch == '\n') {
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <esperarRecepcion+0x40>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b0a      	cmp	r3, #10
 8000c6e:	d1eb      	bne.n	8000c48 <esperarRecepcion+0x4>
	        buffer[i - 1] = '\0'; // Reemplazo el '\n' con terminador de string
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <esperarRecepcion+0x48>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	4a06      	ldr	r2, [pc, #24]	@ (8000c90 <esperarRecepcion+0x4c>)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	54d1      	strb	r1, [r2, r3]
	        break; // Ya tengo el mensaje completo
 8000c7c:	bf00      	nop
	    }
	}

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200001f4 	.word	0x200001f4
 8000c88:	2000012c 	.word	0x2000012c
 8000c8c:	200001f8 	.word	0x200001f8
 8000c90:	200001b4 	.word	0x200001b4

08000c94 <selectorDesicion>:

void selectorDesicion(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
    uint32_t inicio = HAL_GetTick();
 8000c9a:	f000 fc0f 	bl	80014bc <HAL_GetTick>
 8000c9e:	6078      	str	r0, [r7, #4]

    while (1)
    {
        if ((strcmp(buffer, "INV1") == 0) && (etapa_actual == NADA))
 8000ca0:	493d      	ldr	r1, [pc, #244]	@ (8000d98 <selectorDesicion+0x104>)
 8000ca2:	483e      	ldr	r0, [pc, #248]	@ (8000d9c <selectorDesicion+0x108>)
 8000ca4:	f7ff fa94 	bl	80001d0 <strcmp>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d107      	bne.n	8000cbe <selectorDesicion+0x2a>
 8000cae:	4b3c      	ldr	r3, [pc, #240]	@ (8000da0 <selectorDesicion+0x10c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	d103      	bne.n	8000cbe <selectorDesicion+0x2a>
        {
            etapa_actual = VALIDACION;
 8000cb6:	4b3a      	ldr	r3, [pc, #232]	@ (8000da0 <selectorDesicion+0x10c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
            break;
 8000cbc:	e068      	b.n	8000d90 <selectorDesicion+0xfc>
        }
        else if (strcmp(buffer, "RecibidoINV1") == 0 && etapa_actual == VALIDACION)
 8000cbe:	4939      	ldr	r1, [pc, #228]	@ (8000da4 <selectorDesicion+0x110>)
 8000cc0:	4836      	ldr	r0, [pc, #216]	@ (8000d9c <selectorDesicion+0x108>)
 8000cc2:	f7ff fa85 	bl	80001d0 <strcmp>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d107      	bne.n	8000cdc <selectorDesicion+0x48>
 8000ccc:	4b34      	ldr	r3, [pc, #208]	@ (8000da0 <selectorDesicion+0x10c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d103      	bne.n	8000cdc <selectorDesicion+0x48>
        {
            etapa_actual = VALIDACION2;
 8000cd4:	4b32      	ldr	r3, [pc, #200]	@ (8000da0 <selectorDesicion+0x10c>)
 8000cd6:	2204      	movs	r2, #4
 8000cd8:	601a      	str	r2, [r3, #0]
            break;
 8000cda:	e059      	b.n	8000d90 <selectorDesicion+0xfc>
        }
        else if (strcmp(buffer, "FIN1") == 0)
 8000cdc:	4932      	ldr	r1, [pc, #200]	@ (8000da8 <selectorDesicion+0x114>)
 8000cde:	482f      	ldr	r0, [pc, #188]	@ (8000d9c <selectorDesicion+0x108>)
 8000ce0:	f7ff fa76 	bl	80001d0 <strcmp>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d103      	bne.n	8000cf2 <selectorDesicion+0x5e>
        {
            etapa_actual = FIN;
 8000cea:	4b2d      	ldr	r3, [pc, #180]	@ (8000da0 <selectorDesicion+0x10c>)
 8000cec:	2202      	movs	r2, #2
 8000cee:	601a      	str	r2, [r3, #0]
            break;
 8000cf0:	e04e      	b.n	8000d90 <selectorDesicion+0xfc>
        }
        else if (etapa_actual == COMUNICACION)
 8000cf2:	4b2b      	ldr	r3, [pc, #172]	@ (8000da0 <selectorDesicion+0x10c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d138      	bne.n	8000d6c <selectorDesicion+0xd8>
        {
            if (strcmp(buffer, "SALIDA1") == 0 ||
 8000cfa:	492c      	ldr	r1, [pc, #176]	@ (8000dac <selectorDesicion+0x118>)
 8000cfc:	4827      	ldr	r0, [pc, #156]	@ (8000d9c <selectorDesicion+0x108>)
 8000cfe:	f7ff fa67 	bl	80001d0 <strcmp>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d043      	beq.n	8000d90 <selectorDesicion+0xfc>
                strcmp(buffer, "SALIDA2") == 0 ||
 8000d08:	4929      	ldr	r1, [pc, #164]	@ (8000db0 <selectorDesicion+0x11c>)
 8000d0a:	4824      	ldr	r0, [pc, #144]	@ (8000d9c <selectorDesicion+0x108>)
 8000d0c:	f7ff fa60 	bl	80001d0 <strcmp>
 8000d10:	4603      	mov	r3, r0
            if (strcmp(buffer, "SALIDA1") == 0 ||
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d03c      	beq.n	8000d90 <selectorDesicion+0xfc>
                strcmp(buffer, "SALIDA3") == 0 ||
 8000d16:	4927      	ldr	r1, [pc, #156]	@ (8000db4 <selectorDesicion+0x120>)
 8000d18:	4820      	ldr	r0, [pc, #128]	@ (8000d9c <selectorDesicion+0x108>)
 8000d1a:	f7ff fa59 	bl	80001d0 <strcmp>
 8000d1e:	4603      	mov	r3, r0
                strcmp(buffer, "SALIDA2") == 0 ||
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d035      	beq.n	8000d90 <selectorDesicion+0xfc>
                strcmp(buffer, "SALIDA4") == 0 ||
 8000d24:	4924      	ldr	r1, [pc, #144]	@ (8000db8 <selectorDesicion+0x124>)
 8000d26:	481d      	ldr	r0, [pc, #116]	@ (8000d9c <selectorDesicion+0x108>)
 8000d28:	f7ff fa52 	bl	80001d0 <strcmp>
 8000d2c:	4603      	mov	r3, r0
                strcmp(buffer, "SALIDA3") == 0 ||
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d02e      	beq.n	8000d90 <selectorDesicion+0xfc>
                strncmp(buffer, "PWM1_", 5) == 0 ||
 8000d32:	2205      	movs	r2, #5
 8000d34:	4921      	ldr	r1, [pc, #132]	@ (8000dbc <selectorDesicion+0x128>)
 8000d36:	4819      	ldr	r0, [pc, #100]	@ (8000d9c <selectorDesicion+0x108>)
 8000d38:	f004 fa78 	bl	800522c <strncmp>
 8000d3c:	4603      	mov	r3, r0
                strcmp(buffer, "SALIDA4") == 0 ||
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d026      	beq.n	8000d90 <selectorDesicion+0xfc>
                strncmp(buffer, "PWM2_", 5) == 0 ||
 8000d42:	2205      	movs	r2, #5
 8000d44:	491e      	ldr	r1, [pc, #120]	@ (8000dc0 <selectorDesicion+0x12c>)
 8000d46:	4815      	ldr	r0, [pc, #84]	@ (8000d9c <selectorDesicion+0x108>)
 8000d48:	f004 fa70 	bl	800522c <strncmp>
 8000d4c:	4603      	mov	r3, r0
                strncmp(buffer, "PWM1_", 5) == 0 ||
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d01e      	beq.n	8000d90 <selectorDesicion+0xfc>
				strncmp(buffer, "ADC_", 4) == 0
 8000d52:	2204      	movs	r2, #4
 8000d54:	491b      	ldr	r1, [pc, #108]	@ (8000dc4 <selectorDesicion+0x130>)
 8000d56:	4811      	ldr	r0, [pc, #68]	@ (8000d9c <selectorDesicion+0x108>)
 8000d58:	f004 fa68 	bl	800522c <strncmp>
 8000d5c:	4603      	mov	r3, r0
                strncmp(buffer, "PWM2_", 5) == 0 ||
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d016      	beq.n	8000d90 <selectorDesicion+0xfc>
            {
                break;
            }
            else
            {
                limpiar();
 8000d62:	f000 f83d 	bl	8000de0 <limpiar>
                esperarRecepcion();
 8000d66:	f7ff ff6d 	bl	8000c44 <esperarRecepcion>
                continue;
 8000d6a:	e010      	b.n	8000d8e <selectorDesicion+0xfa>
            }
        }

        if (HAL_GetTick() - inicio > 60000)
 8000d6c:	f000 fba6 	bl	80014bc <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d903      	bls.n	8000d86 <selectorDesicion+0xf2>
        {
            etapa_actual = NADA;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <selectorDesicion+0x10c>)
 8000d80:	2203      	movs	r2, #3
 8000d82:	601a      	str	r2, [r3, #0]
            break;
 8000d84:	e004      	b.n	8000d90 <selectorDesicion+0xfc>
        }

        limpiar();
 8000d86:	f000 f82b 	bl	8000de0 <limpiar>
        esperarRecepcion();
 8000d8a:	f7ff ff5b 	bl	8000c44 <esperarRecepcion>
        if ((strcmp(buffer, "INV1") == 0) && (etapa_actual == NADA))
 8000d8e:	e787      	b.n	8000ca0 <selectorDesicion+0xc>
    }
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	08005b94 	.word	0x08005b94
 8000d9c:	200001b4 	.word	0x200001b4
 8000da0:	20000000 	.word	0x20000000
 8000da4:	08005b9c 	.word	0x08005b9c
 8000da8:	08005bac 	.word	0x08005bac
 8000dac:	08005bb4 	.word	0x08005bb4
 8000db0:	08005bbc 	.word	0x08005bbc
 8000db4:	08005bc4 	.word	0x08005bc4
 8000db8:	08005bcc 	.word	0x08005bcc
 8000dbc:	08005bd4 	.word	0x08005bd4
 8000dc0:	08005bdc 	.word	0x08005bdc
 8000dc4:	08005be4 	.word	0x08005be4

08000dc8 <prenderLedComunicacion>:





void prenderLedComunicacion(void) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2120      	movs	r1, #32
 8000dd0:	4802      	ldr	r0, [pc, #8]	@ (8000ddc <prenderLedComunicacion+0x14>)
 8000dd2:	f001 fca3 	bl	800271c <HAL_GPIO_WritePin>
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	48000400 	.word	0x48000400

08000de0 <limpiar>:

void limpiar(void) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
    memset(buffer, 0, sizeof(buffer));
 8000de4:	2240      	movs	r2, #64	@ 0x40
 8000de6:	2100      	movs	r1, #0
 8000de8:	4803      	ldr	r0, [pc, #12]	@ (8000df8 <limpiar+0x18>)
 8000dea:	f004 fa17 	bl	800521c <memset>
    i = 0;
 8000dee:	4b03      	ldr	r3, [pc, #12]	@ (8000dfc <limpiar+0x1c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200001b4 	.word	0x200001b4
 8000dfc:	200001f8 	.word	0x200001f8

08000e00 <enviarStringPorUART>:
void enviarStringPorUART(const char* texto) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)texto, strlen(texto), HAL_MAX_DELAY);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff f9eb 	bl	80001e4 <strlen>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	4803      	ldr	r0, [pc, #12]	@ (8000e28 <enviarStringPorUART+0x28>)
 8000e1a:	f003 fbbb 	bl	8004594 <HAL_UART_Transmit>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	2000012c 	.word	0x2000012c

08000e2c <finalComunicacion>:

void finalComunicacion(void){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2120      	movs	r1, #32
 8000e34:	4811      	ldr	r0, [pc, #68]	@ (8000e7c <finalComunicacion+0x50>)
 8000e36:	f001 fc71 	bl	800271c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e44:	f001 fc6a 	bl	800271c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	480b      	ldr	r0, [pc, #44]	@ (8000e7c <finalComunicacion+0x50>)
 8000e4e:	f001 fc65 	bl	800271c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2180      	movs	r1, #128	@ 0x80
 8000e56:	4809      	ldr	r0, [pc, #36]	@ (8000e7c <finalComunicacion+0x50>)
 8000e58:	f001 fc60 	bl	800271c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2140      	movs	r1, #64	@ 0x40
 8000e60:	4806      	ldr	r0, [pc, #24]	@ (8000e7c <finalComunicacion+0x50>)
 8000e62:	f001 fc5b 	bl	800271c <HAL_GPIO_WritePin>
	TIM1->CCR1 = 0;      // duty canal1
 8000e66:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <finalComunicacion+0x54>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM1->CCR2 =  0;      // duty canal2
 8000e6c:	4b04      	ldr	r3, [pc, #16]	@ (8000e80 <finalComunicacion+0x54>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	639a      	str	r2, [r3, #56]	@ 0x38

	etapa_actual = NADA;
 8000e72:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <finalComunicacion+0x58>)
 8000e74:	2203      	movs	r2, #3
 8000e76:	601a      	str	r2, [r3, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	48000400 	.word	0x48000400
 8000e80:	40012c00 	.word	0x40012c00
 8000e84:	20000000 	.word	0x20000000

08000e88 <actualizar>:

void actualizar(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08c      	sub	sp, #48	@ 0x30
 8000e8c:	af00      	add	r7, sp, #0
    if (strncmp(buffer, "SALIDA", 6) == 0 && strlen(buffer) == 7)
 8000e8e:	2206      	movs	r2, #6
 8000e90:	494d      	ldr	r1, [pc, #308]	@ (8000fc8 <actualizar+0x140>)
 8000e92:	484e      	ldr	r0, [pc, #312]	@ (8000fcc <actualizar+0x144>)
 8000e94:	f004 f9ca 	bl	800522c <strncmp>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d139      	bne.n	8000f12 <actualizar+0x8a>
 8000e9e:	484b      	ldr	r0, [pc, #300]	@ (8000fcc <actualizar+0x144>)
 8000ea0:	f7ff f9a0 	bl	80001e4 <strlen>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b07      	cmp	r3, #7
 8000ea8:	d133      	bne.n	8000f12 <actualizar+0x8a>
    {
        switch (buffer[6])
 8000eaa:	4b48      	ldr	r3, [pc, #288]	@ (8000fcc <actualizar+0x144>)
 8000eac:	799b      	ldrb	r3, [r3, #6]
 8000eae:	3b31      	subs	r3, #49	@ 0x31
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	f200 8085 	bhi.w	8000fc0 <actualizar+0x138>
 8000eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8000ebc <actualizar+0x34>)
 8000eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ebc:	08000ecd 	.word	0x08000ecd
 8000ec0:	08000ee1 	.word	0x08000ee1
 8000ec4:	08000ef1 	.word	0x08000ef1
 8000ec8:	08000f01 	.word	0x08000f01
        {
            case '1':
                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8000ecc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ed0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed4:	f001 fc3a 	bl	800274c <HAL_GPIO_TogglePin>
                enviarStringPorUART("OK_SALIDA_1\n");
 8000ed8:	483d      	ldr	r0, [pc, #244]	@ (8000fd0 <actualizar+0x148>)
 8000eda:	f7ff ff91 	bl	8000e00 <enviarStringPorUART>
                break;
 8000ede:	e017      	b.n	8000f10 <actualizar+0x88>
            case '2':
                HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000ee0:	2110      	movs	r1, #16
 8000ee2:	483c      	ldr	r0, [pc, #240]	@ (8000fd4 <actualizar+0x14c>)
 8000ee4:	f001 fc32 	bl	800274c <HAL_GPIO_TogglePin>
                enviarStringPorUART("OK_SALIDA_2\n");
 8000ee8:	483b      	ldr	r0, [pc, #236]	@ (8000fd8 <actualizar+0x150>)
 8000eea:	f7ff ff89 	bl	8000e00 <enviarStringPorUART>
                break;
 8000eee:	e00f      	b.n	8000f10 <actualizar+0x88>
            case '3':
                HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000ef0:	2180      	movs	r1, #128	@ 0x80
 8000ef2:	4838      	ldr	r0, [pc, #224]	@ (8000fd4 <actualizar+0x14c>)
 8000ef4:	f001 fc2a 	bl	800274c <HAL_GPIO_TogglePin>
                enviarStringPorUART("OK_SALIDA_3\n");
 8000ef8:	4838      	ldr	r0, [pc, #224]	@ (8000fdc <actualizar+0x154>)
 8000efa:	f7ff ff81 	bl	8000e00 <enviarStringPorUART>
                break;
 8000efe:	e007      	b.n	8000f10 <actualizar+0x88>
            case '4':
                HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8000f00:	2140      	movs	r1, #64	@ 0x40
 8000f02:	4834      	ldr	r0, [pc, #208]	@ (8000fd4 <actualizar+0x14c>)
 8000f04:	f001 fc22 	bl	800274c <HAL_GPIO_TogglePin>
                enviarStringPorUART("OK_SALIDA_4\n");
 8000f08:	4835      	ldr	r0, [pc, #212]	@ (8000fe0 <actualizar+0x158>)
 8000f0a:	f7ff ff79 	bl	8000e00 <enviarStringPorUART>
                break;
 8000f0e:	bf00      	nop
        switch (buffer[6])
 8000f10:	e056      	b.n	8000fc0 <actualizar+0x138>
        }
    }
    else if (strncmp(buffer, "PWM1_", 5) == 0)
 8000f12:	2205      	movs	r2, #5
 8000f14:	4933      	ldr	r1, [pc, #204]	@ (8000fe4 <actualizar+0x15c>)
 8000f16:	482d      	ldr	r0, [pc, #180]	@ (8000fcc <actualizar+0x144>)
 8000f18:	f004 f988 	bl	800522c <strncmp>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d111      	bne.n	8000f46 <actualizar+0xbe>
    {
        int duty = atoi(&buffer[5]);
 8000f22:	4831      	ldr	r0, [pc, #196]	@ (8000fe8 <actualizar+0x160>)
 8000f24:	f004 f8cf 	bl	80050c6 <atoi>
 8000f28:	6278      	str	r0, [r7, #36]	@ 0x24
        TIM1->CCR1 = duty;
 8000f2a:	4a30      	ldr	r2, [pc, #192]	@ (8000fec <actualizar+0x164>)
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f2e:	6353      	str	r3, [r2, #52]	@ 0x34

        char respuesta[32];
        sprintf(respuesta, "OK_PWM1_%03d\n", duty);  // 3 dígitos con ceros a la izquierda
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f34:	492e      	ldr	r1, [pc, #184]	@ (8000ff0 <actualizar+0x168>)
 8000f36:	4618      	mov	r0, r3
 8000f38:	f004 f94e 	bl	80051d8 <siprintf>
        enviarStringPorUART(respuesta);
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ff5e 	bl	8000e00 <enviarStringPorUART>
        char respuesta[32];
        sprintf(respuesta, "VALOR_ADC_%04u\n", valor);  // 0 a 4095
        enviarStringPorUART(respuesta);
    }

}
 8000f44:	e03c      	b.n	8000fc0 <actualizar+0x138>
    else if (strncmp(buffer, "PWM2_", 5) == 0)
 8000f46:	2205      	movs	r2, #5
 8000f48:	492a      	ldr	r1, [pc, #168]	@ (8000ff4 <actualizar+0x16c>)
 8000f4a:	4820      	ldr	r0, [pc, #128]	@ (8000fcc <actualizar+0x144>)
 8000f4c:	f004 f96e 	bl	800522c <strncmp>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d111      	bne.n	8000f7a <actualizar+0xf2>
        int duty = atoi(&buffer[5]);
 8000f56:	4824      	ldr	r0, [pc, #144]	@ (8000fe8 <actualizar+0x160>)
 8000f58:	f004 f8b5 	bl	80050c6 <atoi>
 8000f5c:	62b8      	str	r0, [r7, #40]	@ 0x28
        TIM1->CCR2 = duty;
 8000f5e:	4a23      	ldr	r2, [pc, #140]	@ (8000fec <actualizar+0x164>)
 8000f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f62:	6393      	str	r3, [r2, #56]	@ 0x38
        sprintf(respuesta, "OK_PWM2_%03d\n", duty);
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f68:	4923      	ldr	r1, [pc, #140]	@ (8000ff8 <actualizar+0x170>)
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f004 f934 	bl	80051d8 <siprintf>
        enviarStringPorUART(respuesta);
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff44 	bl	8000e00 <enviarStringPorUART>
}
 8000f78:	e022      	b.n	8000fc0 <actualizar+0x138>
    else if (strncmp(buffer, "ADC_1", 5) == 0)
 8000f7a:	2205      	movs	r2, #5
 8000f7c:	491f      	ldr	r1, [pc, #124]	@ (8000ffc <actualizar+0x174>)
 8000f7e:	4813      	ldr	r0, [pc, #76]	@ (8000fcc <actualizar+0x144>)
 8000f80:	f004 f954 	bl	800522c <strncmp>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d11a      	bne.n	8000fc0 <actualizar+0x138>
        ADC1->CR |= ADC_CR_ADSTART;
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001000 <actualizar+0x178>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	4a1c      	ldr	r2, [pc, #112]	@ (8001000 <actualizar+0x178>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6093      	str	r3, [r2, #8]
        while (!(ADC1->ISR & ADC_ISR_EOC)) {} // Esperar fin de conversión
 8000f96:	bf00      	nop
 8000f98:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <actualizar+0x178>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0f9      	beq.n	8000f98 <actualizar+0x110>
        uint16_t valor = ADC1->DR;
 8000fa4:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <actualizar+0x178>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        sprintf(respuesta, "VALOR_ADC_%04u\n", valor);  // 0 a 4095
 8000faa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	4915      	ldr	r1, [pc, #84]	@ (8001004 <actualizar+0x17c>)
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f004 f911 	bl	80051d8 <siprintf>
        enviarStringPorUART(respuesta);
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff21 	bl	8000e00 <enviarStringPorUART>
}
 8000fbe:	e7ff      	b.n	8000fc0 <actualizar+0x138>
 8000fc0:	bf00      	nop
 8000fc2:	3730      	adds	r7, #48	@ 0x30
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	08005bec 	.word	0x08005bec
 8000fcc:	200001b4 	.word	0x200001b4
 8000fd0:	08005bf4 	.word	0x08005bf4
 8000fd4:	48000400 	.word	0x48000400
 8000fd8:	08005c04 	.word	0x08005c04
 8000fdc:	08005c14 	.word	0x08005c14
 8000fe0:	08005c24 	.word	0x08005c24
 8000fe4:	08005bd4 	.word	0x08005bd4
 8000fe8:	200001b9 	.word	0x200001b9
 8000fec:	40012c00 	.word	0x40012c00
 8000ff0:	08005c34 	.word	0x08005c34
 8000ff4:	08005bdc 	.word	0x08005bdc
 8000ff8:	08005c44 	.word	0x08005c44
 8000ffc:	08005c54 	.word	0x08005c54
 8001000:	50040000 	.word	0x50040000
 8001004:	08005c5c 	.word	0x08005c5c

08001008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100c:	b672      	cpsid	i
}
 800100e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <Error_Handler+0x8>

08001014 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <HAL_MspInit+0x44>)
 800101c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800101e:	4a0e      	ldr	r2, [pc, #56]	@ (8001058 <HAL_MspInit+0x44>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6613      	str	r3, [r2, #96]	@ 0x60
 8001026:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <HAL_MspInit+0x44>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001032:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <HAL_MspInit+0x44>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001036:	4a08      	ldr	r2, [pc, #32]	@ (8001058 <HAL_MspInit+0x44>)
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800103c:	6593      	str	r3, [r2, #88]	@ 0x58
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <HAL_MspInit+0x44>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40021000 	.word	0x40021000

0800105c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b09e      	sub	sp, #120	@ 0x78
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	2254      	movs	r2, #84	@ 0x54
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f004 f8cd 	bl	800521c <memset>
  if(hadc->Instance==ADC1)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a25      	ldr	r2, [pc, #148]	@ (800111c <HAL_ADC_MspInit+0xc0>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d143      	bne.n	8001114 <HAL_ADC_MspInit+0xb8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800108c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001090:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001092:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001096:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001098:	2301      	movs	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800109c:	2301      	movs	r3, #1
 800109e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80010a0:	2308      	movs	r3, #8
 80010a2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010a4:	2307      	movs	r3, #7
 80010a6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010a8:	2302      	movs	r3, #2
 80010aa:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80010b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	4618      	mov	r0, r3
 80010bc:	f002 f9fc 	bl	80034b8 <HAL_RCCEx_PeriphCLKConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80010c6:	f7ff ff9f 	bl	8001008 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010ca:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <HAL_ADC_MspInit+0xc4>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	4a14      	ldr	r2, [pc, #80]	@ (8001120 <HAL_ADC_MspInit+0xc4>)
 80010d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d6:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <HAL_ADC_MspInit+0xc4>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <HAL_ADC_MspInit+0xc4>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001120 <HAL_ADC_MspInit+0xc4>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <HAL_ADC_MspInit+0xc4>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = adc_Pin;
 80010fa:	2301      	movs	r3, #1
 80010fc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010fe:	230b      	movs	r3, #11
 8001100:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(adc_GPIO_Port, &GPIO_InitStruct);
 8001106:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800110a:	4619      	mov	r1, r3
 800110c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001110:	f001 f99a 	bl	8002448 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001114:	bf00      	nop
 8001116:	3778      	adds	r7, #120	@ 0x78
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	50040000 	.word	0x50040000
 8001120:	40021000 	.word	0x40021000

08001124 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0a      	ldr	r2, [pc, #40]	@ (800115c <HAL_TIM_PWM_MspInit+0x38>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d10b      	bne.n	800114e <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001136:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <HAL_TIM_PWM_MspInit+0x3c>)
 8001138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800113a:	4a09      	ldr	r2, [pc, #36]	@ (8001160 <HAL_TIM_PWM_MspInit+0x3c>)
 800113c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001140:	6613      	str	r3, [r2, #96]	@ 0x60
 8001142:	4b07      	ldr	r3, [pc, #28]	@ (8001160 <HAL_TIM_PWM_MspInit+0x3c>)
 8001144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001146:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800114e:	bf00      	nop
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40012c00 	.word	0x40012c00
 8001160:	40021000 	.word	0x40021000

08001164 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a12      	ldr	r2, [pc, #72]	@ (80011cc <HAL_TIM_MspPostInit+0x68>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d11d      	bne.n	80011c2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	4b12      	ldr	r3, [pc, #72]	@ (80011d0 <HAL_TIM_MspPostInit+0x6c>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	4a11      	ldr	r2, [pc, #68]	@ (80011d0 <HAL_TIM_MspPostInit+0x6c>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001192:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <HAL_TIM_MspPostInit+0x6c>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = pwm1_Pin|pwm2_Pin;
 800119e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	4619      	mov	r1, r3
 80011ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011be:	f001 f943 	bl	8002448 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011c2:	bf00      	nop
 80011c4:	3720      	adds	r7, #32
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40012c00 	.word	0x40012c00
 80011d0:	40021000 	.word	0x40021000

080011d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b09e      	sub	sp, #120	@ 0x78
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	2254      	movs	r2, #84	@ 0x54
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f004 f811 	bl	800521c <memset>
  if(huart->Instance==USART2)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a28      	ldr	r2, [pc, #160]	@ (80012a0 <HAL_UART_MspInit+0xcc>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d148      	bne.n	8001296 <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001204:	2302      	movs	r3, #2
 8001206:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001208:	2300      	movs	r3, #0
 800120a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	4618      	mov	r0, r3
 8001212:	f002 f951 	bl	80034b8 <HAL_RCCEx_PeriphCLKConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800121c:	f7ff fef4 	bl	8001008 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001220:	4b20      	ldr	r3, [pc, #128]	@ (80012a4 <HAL_UART_MspInit+0xd0>)
 8001222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001224:	4a1f      	ldr	r2, [pc, #124]	@ (80012a4 <HAL_UART_MspInit+0xd0>)
 8001226:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800122a:	6593      	str	r3, [r2, #88]	@ 0x58
 800122c:	4b1d      	ldr	r3, [pc, #116]	@ (80012a4 <HAL_UART_MspInit+0xd0>)
 800122e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001238:	4b1a      	ldr	r3, [pc, #104]	@ (80012a4 <HAL_UART_MspInit+0xd0>)
 800123a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123c:	4a19      	ldr	r2, [pc, #100]	@ (80012a4 <HAL_UART_MspInit+0xd0>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001244:	4b17      	ldr	r3, [pc, #92]	@ (80012a4 <HAL_UART_MspInit+0xd0>)
 8001246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001250:	2304      	movs	r3, #4
 8001252:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001260:	2307      	movs	r3, #7
 8001262:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126e:	f001 f8eb 	bl	8002448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001272:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001276:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001284:	2303      	movs	r3, #3
 8001286:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800128c:	4619      	mov	r1, r3
 800128e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001292:	f001 f8d9 	bl	8002448 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001296:	bf00      	nop
 8001298:	3778      	adds	r7, #120	@ 0x78
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40004400 	.word	0x40004400
 80012a4:	40021000 	.word	0x40021000

080012a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <NMI_Handler+0x4>

080012b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <HardFault_Handler+0x4>

080012b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <MemManage_Handler+0x4>

080012c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <BusFault_Handler+0x4>

080012c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <UsageFault_Handler+0x4>

080012d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fe:	f000 f8c9 	bl	8001494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001310:	4a14      	ldr	r2, [pc, #80]	@ (8001364 <_sbrk+0x5c>)
 8001312:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <_sbrk+0x60>)
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800131c:	4b13      	ldr	r3, [pc, #76]	@ (800136c <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d102      	bne.n	800132a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001324:	4b11      	ldr	r3, [pc, #68]	@ (800136c <_sbrk+0x64>)
 8001326:	4a12      	ldr	r2, [pc, #72]	@ (8001370 <_sbrk+0x68>)
 8001328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132a:	4b10      	ldr	r3, [pc, #64]	@ (800136c <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	429a      	cmp	r2, r3
 8001336:	d207      	bcs.n	8001348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001338:	f003 ff8a 	bl	8005250 <__errno>
 800133c:	4603      	mov	r3, r0
 800133e:	220c      	movs	r2, #12
 8001340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	e009      	b.n	800135c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001348:	4b08      	ldr	r3, [pc, #32]	@ (800136c <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134e:	4b07      	ldr	r3, [pc, #28]	@ (800136c <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	4a05      	ldr	r2, [pc, #20]	@ (800136c <_sbrk+0x64>)
 8001358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800135a:	68fb      	ldr	r3, [r7, #12]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	2000c000 	.word	0x2000c000
 8001368:	00000400 	.word	0x00000400
 800136c:	200001fc 	.word	0x200001fc
 8001370:	20000350 	.word	0x20000350

08001374 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <SystemInit+0x20>)
 800137a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800137e:	4a05      	ldr	r2, [pc, #20]	@ (8001394 <SystemInit+0x20>)
 8001380:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001384:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001398:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800139c:	f7ff ffea 	bl	8001374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a0:	480c      	ldr	r0, [pc, #48]	@ (80013d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80013a2:	490d      	ldr	r1, [pc, #52]	@ (80013d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013a4:	4a0d      	ldr	r2, [pc, #52]	@ (80013dc <LoopForever+0xe>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a8:	e002      	b.n	80013b0 <LoopCopyDataInit>

080013aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ae:	3304      	adds	r3, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b4:	d3f9      	bcc.n	80013aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b6:	4a0a      	ldr	r2, [pc, #40]	@ (80013e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013b8:	4c0a      	ldr	r4, [pc, #40]	@ (80013e4 <LoopForever+0x16>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013bc:	e001      	b.n	80013c2 <LoopFillZerobss>

080013be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c0:	3204      	adds	r2, #4

080013c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c4:	d3fb      	bcc.n	80013be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013c6:	f003 ff49 	bl	800525c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ca:	f7ff f8ff 	bl	80005cc <main>

080013ce <LoopForever>:

LoopForever:
    b LoopForever
 80013ce:	e7fe      	b.n	80013ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013d0:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80013d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80013dc:	08005df8 	.word	0x08005df8
  ldr r2, =_sbss
 80013e0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80013e4:	2000034c 	.word	0x2000034c

080013e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC1_IRQHandler>

080013ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013f0:	2300      	movs	r3, #0
 80013f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f4:	2003      	movs	r0, #3
 80013f6:	f000 fff3 	bl	80023e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013fa:	200f      	movs	r0, #15
 80013fc:	f000 f80e 	bl	800141c <HAL_InitTick>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d002      	beq.n	800140c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	71fb      	strb	r3, [r7, #7]
 800140a:	e001      	b.n	8001410 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800140c:	f7ff fe02 	bl	8001014 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001410:	79fb      	ldrb	r3, [r7, #7]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001424:	2300      	movs	r3, #0
 8001426:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001428:	4b17      	ldr	r3, [pc, #92]	@ (8001488 <HAL_InitTick+0x6c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d023      	beq.n	8001478 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001430:	4b16      	ldr	r3, [pc, #88]	@ (800148c <HAL_InitTick+0x70>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b14      	ldr	r3, [pc, #80]	@ (8001488 <HAL_InitTick+0x6c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800143e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001442:	fbb2 f3f3 	udiv	r3, r2, r3
 8001446:	4618      	mov	r0, r3
 8001448:	f000 fff1 	bl	800242e <HAL_SYSTICK_Config>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10f      	bne.n	8001472 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b0f      	cmp	r3, #15
 8001456:	d809      	bhi.n	800146c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001458:	2200      	movs	r2, #0
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	f04f 30ff 	mov.w	r0, #4294967295
 8001460:	f000 ffc9 	bl	80023f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001464:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <HAL_InitTick+0x74>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e007      	b.n	800147c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	73fb      	strb	r3, [r7, #15]
 8001470:	e004      	b.n	800147c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	73fb      	strb	r3, [r7, #15]
 8001476:	e001      	b.n	800147c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800147c:	7bfb      	ldrb	r3, [r7, #15]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	2000000c 	.word	0x2000000c
 800148c:	20000004 	.word	0x20000004
 8001490:	20000008 	.word	0x20000008

08001494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <HAL_IncTick+0x20>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_IncTick+0x24>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	4a04      	ldr	r2, [pc, #16]	@ (80014b8 <HAL_IncTick+0x24>)
 80014a6:	6013      	str	r3, [r2, #0]
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	2000000c 	.word	0x2000000c
 80014b8:	20000200 	.word	0x20000200

080014bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return uwTick;
 80014c0:	4b03      	ldr	r3, [pc, #12]	@ (80014d0 <HAL_GetTick+0x14>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20000200 	.word	0x20000200

080014d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014dc:	f7ff ffee 	bl	80014bc <HAL_GetTick>
 80014e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ec:	d005      	beq.n	80014fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001518 <HAL_Delay+0x44>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4413      	add	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014fa:	bf00      	nop
 80014fc:	f7ff ffde 	bl	80014bc <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	429a      	cmp	r2, r3
 800150a:	d8f7      	bhi.n	80014fc <HAL_Delay+0x28>
  {
  }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2000000c 	.word	0x2000000c

0800151c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	431a      	orrs	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	609a      	str	r2, [r3, #8]
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	609a      	str	r2, [r3, #8]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001584:	b480      	push	{r7}
 8001586:	b087      	sub	sp, #28
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3360      	adds	r3, #96	@ 0x60
 8001596:	461a      	mov	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <LL_ADC_SetOffset+0x44>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	4313      	orrs	r3, r2
 80015b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015bc:	bf00      	nop
 80015be:	371c      	adds	r7, #28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	03fff000 	.word	0x03fff000

080015cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3360      	adds	r3, #96	@ 0x60
 80015da:	461a      	mov	r2, r3
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	3360      	adds	r3, #96	@ 0x60
 8001608:	461a      	mov	r2, r3
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	431a      	orrs	r2, r3
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001622:	bf00      	nop
 8001624:	371c      	adds	r7, #28
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800162e:	b480      	push	{r7}
 8001630:	b087      	sub	sp, #28
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	3330      	adds	r3, #48	@ 0x30
 800163e:	461a      	mov	r2, r3
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	0a1b      	lsrs	r3, r3, #8
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	4413      	add	r3, r2
 800164c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	f003 031f 	and.w	r3, r3, #31
 8001658:	211f      	movs	r1, #31
 800165a:	fa01 f303 	lsl.w	r3, r1, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	401a      	ands	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	0e9b      	lsrs	r3, r3, #26
 8001666:	f003 011f 	and.w	r1, r3, #31
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	f003 031f 	and.w	r3, r3, #31
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	431a      	orrs	r2, r3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800167a:	bf00      	nop
 800167c:	371c      	adds	r7, #28
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001686:	b480      	push	{r7}
 8001688:	b087      	sub	sp, #28
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	3314      	adds	r3, #20
 8001696:	461a      	mov	r2, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	0e5b      	lsrs	r3, r3, #25
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	4413      	add	r3, r2
 80016a4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	0d1b      	lsrs	r3, r3, #20
 80016ae:	f003 031f 	and.w	r3, r3, #31
 80016b2:	2107      	movs	r1, #7
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	401a      	ands	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	0d1b      	lsrs	r3, r3, #20
 80016c0:	f003 031f 	and.w	r3, r3, #31
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	431a      	orrs	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016d0:	bf00      	nop
 80016d2:	371c      	adds	r7, #28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016f4:	43db      	mvns	r3, r3
 80016f6:	401a      	ands	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0318 	and.w	r3, r3, #24
 80016fe:	4908      	ldr	r1, [pc, #32]	@ (8001720 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001700:	40d9      	lsrs	r1, r3
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	400b      	ands	r3, r1
 8001706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800170a:	431a      	orrs	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001712:	bf00      	nop
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	0007ffff 	.word	0x0007ffff

08001724 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001734:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6093      	str	r3, [r2, #8]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001758:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800175c:	d101      	bne.n	8001762 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001780:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001784:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80017ac:	d101      	bne.n	80017b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <LL_ADC_IsEnabled+0x18>
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <LL_ADC_IsEnabled+0x1a>
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d101      	bne.n	80017fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b08      	cmp	r3, #8
 800181e:	d101      	bne.n	8001824 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e126      	b.n	8001a9c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001858:	2b00      	cmp	r3, #0
 800185a:	d109      	bne.n	8001870 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff fbfd 	bl	800105c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff67 	bl	8001748 <LL_ADC_IsDeepPowerDownEnabled>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d004      	beq.n	800188a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff4d 	bl	8001724 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ff82 	bl	8001798 <LL_ADC_IsInternalRegulatorEnabled>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d115      	bne.n	80018c6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ff66 	bl	8001770 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018a4:	4b7f      	ldr	r3, [pc, #508]	@ (8001aa4 <HAL_ADC_Init+0x270>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	099b      	lsrs	r3, r3, #6
 80018aa:	4a7f      	ldr	r2, [pc, #508]	@ (8001aa8 <HAL_ADC_Init+0x274>)
 80018ac:	fba2 2303 	umull	r2, r3, r2, r3
 80018b0:	099b      	lsrs	r3, r3, #6
 80018b2:	3301      	adds	r3, #1
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018b8:	e002      	b.n	80018c0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3b01      	subs	r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f9      	bne.n	80018ba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ff64 	bl	8001798 <LL_ADC_IsInternalRegulatorEnabled>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10d      	bne.n	80018f2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018da:	f043 0210 	orr.w	r2, r3, #16
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e6:	f043 0201 	orr.w	r2, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ff75 	bl	80017e6 <LL_ADC_REG_IsConversionOngoing>
 80018fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	2b00      	cmp	r3, #0
 8001908:	f040 80bf 	bne.w	8001a8a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	2b00      	cmp	r3, #0
 8001910:	f040 80bb 	bne.w	8001a8a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001918:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800191c:	f043 0202 	orr.w	r2, r3, #2
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff49 	bl	80017c0 <LL_ADC_IsEnabled>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d10b      	bne.n	800194c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001934:	485d      	ldr	r0, [pc, #372]	@ (8001aac <HAL_ADC_Init+0x278>)
 8001936:	f7ff ff43 	bl	80017c0 <LL_ADC_IsEnabled>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d105      	bne.n	800194c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4619      	mov	r1, r3
 8001946:	485a      	ldr	r0, [pc, #360]	@ (8001ab0 <HAL_ADC_Init+0x27c>)
 8001948:	f7ff fde8 	bl	800151c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	7e5b      	ldrb	r3, [r3, #25]
 8001950:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001956:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800195c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001962:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3020 	ldrb.w	r3, [r3, #32]
 800196a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d106      	bne.n	8001988 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197e:	3b01      	subs	r3, #1
 8001980:	045b      	lsls	r3, r3, #17
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198c:	2b00      	cmp	r3, #0
 800198e:	d009      	beq.n	80019a4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001994:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	4b42      	ldr	r3, [pc, #264]	@ (8001ab4 <HAL_ADC_Init+0x280>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6812      	ldr	r2, [r2, #0]
 80019b2:	69b9      	ldr	r1, [r7, #24]
 80019b4:	430b      	orrs	r3, r1
 80019b6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff25 	bl	800180c <LL_ADC_INJ_IsConversionOngoing>
 80019c2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d13d      	bne.n	8001a46 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d13a      	bne.n	8001a46 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019d4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019dc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80019ec:	f023 0302 	bic.w	r3, r3, #2
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6812      	ldr	r2, [r2, #0]
 80019f4:	69b9      	ldr	r1, [r7, #24]
 80019f6:	430b      	orrs	r3, r1
 80019f8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d118      	bne.n	8001a36 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001a0e:	f023 0304 	bic.w	r3, r3, #4
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a1a:	4311      	orrs	r1, r2
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001a20:	4311      	orrs	r1, r2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a26:	430a      	orrs	r2, r1
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f042 0201 	orr.w	r2, r2, #1
 8001a32:	611a      	str	r2, [r3, #16]
 8001a34:	e007      	b.n	8001a46 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0201 	bic.w	r2, r2, #1
 8001a44:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d10c      	bne.n	8001a68 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a54:	f023 010f 	bic.w	r1, r3, #15
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	1e5a      	subs	r2, r3, #1
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a66:	e007      	b.n	8001a78 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 020f 	bic.w	r2, r2, #15
 8001a76:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a7c:	f023 0303 	bic.w	r3, r3, #3
 8001a80:	f043 0201 	orr.w	r2, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a88:	e007      	b.n	8001a9a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a8e:	f043 0210 	orr.w	r2, r3, #16
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3720      	adds	r7, #32
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000004 	.word	0x20000004
 8001aa8:	053e2d63 	.word	0x053e2d63
 8001aac:	50040000 	.word	0x50040000
 8001ab0:	50040300 	.word	0x50040300
 8001ab4:	fff0c007 	.word	0xfff0c007

08001ab8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b0b6      	sub	sp, #216	@ 0xd8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <HAL_ADC_ConfigChannel+0x22>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e3bb      	b.n	8002252 <HAL_ADC_ConfigChannel+0x79a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fe7d 	bl	80017e6 <LL_ADC_REG_IsConversionOngoing>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f040 83a0 	bne.w	8002234 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b05      	cmp	r3, #5
 8001b02:	d824      	bhi.n	8001b4e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	3b02      	subs	r3, #2
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d81b      	bhi.n	8001b46 <HAL_ADC_ConfigChannel+0x8e>
 8001b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b14 <HAL_ADC_ConfigChannel+0x5c>)
 8001b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b14:	08001b25 	.word	0x08001b25
 8001b18:	08001b2d 	.word	0x08001b2d
 8001b1c:	08001b35 	.word	0x08001b35
 8001b20:	08001b3d 	.word	0x08001b3d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001b24:	230c      	movs	r3, #12
 8001b26:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b2a:	e010      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001b2c:	2312      	movs	r3, #18
 8001b2e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b32:	e00c      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001b34:	2318      	movs	r3, #24
 8001b36:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b3a:	e008      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001b3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b44:	e003      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001b46:	2306      	movs	r3, #6
 8001b48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b4c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001b5c:	f7ff fd67 	bl	800162e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fe3e 	bl	80017e6 <LL_ADC_REG_IsConversionOngoing>
 8001b6a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fe4a 	bl	800180c <LL_ADC_INJ_IsConversionOngoing>
 8001b78:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f040 81a4 	bne.w	8001ece <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f040 819f 	bne.w	8001ece <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	6819      	ldr	r1, [r3, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	f7ff fd72 	bl	8001686 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	08db      	lsrs	r3, r3, #3
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d00a      	beq.n	8001bda <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	6919      	ldr	r1, [r3, #16]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001bd4:	f7ff fcd6 	bl	8001584 <LL_ADC_SetOffset>
 8001bd8:	e179      	b.n	8001ece <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fcf3 	bl	80015cc <LL_ADC_GetOffsetChannel>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10a      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x14e>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fce8 	bl	80015cc <LL_ADC_GetOffsetChannel>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	0e9b      	lsrs	r3, r3, #26
 8001c00:	f003 021f 	and.w	r2, r3, #31
 8001c04:	e01e      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x18c>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fcdd 	bl	80015cc <LL_ADC_GetOffsetChannel>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c1c:	fa93 f3a3 	rbit	r3, r3
 8001c20:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001c34:	2320      	movs	r3, #32
 8001c36:	e004      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001c38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c3c:	fab3 f383 	clz	r3, r3
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d105      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x1a4>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	0e9b      	lsrs	r3, r3, #26
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	e018      	b.n	8001c8e <HAL_ADC_ConfigChannel+0x1d6>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001c70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001c78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001c80:	2320      	movs	r3, #32
 8001c82:	e004      	b.n	8001c8e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001c84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c88:	fab3 f383 	clz	r3, r3
 8001c8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d106      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fcac 	bl	80015f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fc90 	bl	80015cc <LL_ADC_GetOffsetChannel>
 8001cac:	4603      	mov	r3, r0
 8001cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10a      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x214>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2101      	movs	r1, #1
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fc85 	bl	80015cc <LL_ADC_GetOffsetChannel>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	0e9b      	lsrs	r3, r3, #26
 8001cc6:	f003 021f 	and.w	r2, r3, #31
 8001cca:	e01e      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x252>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fc7a 	bl	80015cc <LL_ADC_GetOffsetChannel>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ce2:	fa93 f3a3 	rbit	r3, r3
 8001ce6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001cea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001cee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001cf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001cfa:	2320      	movs	r3, #32
 8001cfc:	e004      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001cfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d02:	fab3 f383 	clz	r3, r3
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d105      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x26a>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	0e9b      	lsrs	r3, r3, #26
 8001d1c:	f003 031f 	and.w	r3, r3, #31
 8001d20:	e018      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x29c>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d2e:	fa93 f3a3 	rbit	r3, r3
 8001d32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001d36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001d3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001d46:	2320      	movs	r3, #32
 8001d48:	e004      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001d4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d106      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2101      	movs	r1, #1
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fc49 	bl	80015f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2102      	movs	r1, #2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fc2d 	bl	80015cc <LL_ADC_GetOffsetChannel>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10a      	bne.n	8001d92 <HAL_ADC_ConfigChannel+0x2da>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2102      	movs	r1, #2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fc22 	bl	80015cc <LL_ADC_GetOffsetChannel>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	0e9b      	lsrs	r3, r3, #26
 8001d8c:	f003 021f 	and.w	r2, r3, #31
 8001d90:	e01e      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x318>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2102      	movs	r1, #2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fc17 	bl	80015cc <LL_ADC_GetOffsetChannel>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001db4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001dc0:	2320      	movs	r3, #32
 8001dc2:	e004      	b.n	8001dce <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001dc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001dc8:	fab3 f383 	clz	r3, r3
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d105      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x330>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	0e9b      	lsrs	r3, r3, #26
 8001de2:	f003 031f 	and.w	r3, r3, #31
 8001de6:	e014      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x35a>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001df6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001df8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001dfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001e04:	2320      	movs	r3, #32
 8001e06:	e004      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001e08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e0c:	fab3 f383 	clz	r3, r3
 8001e10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d106      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fbea 	bl	80015f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2103      	movs	r1, #3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fbce 	bl	80015cc <LL_ADC_GetOffsetChannel>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10a      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x398>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2103      	movs	r1, #3
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fbc3 	bl	80015cc <LL_ADC_GetOffsetChannel>
 8001e46:	4603      	mov	r3, r0
 8001e48:	0e9b      	lsrs	r3, r3, #26
 8001e4a:	f003 021f 	and.w	r2, r3, #31
 8001e4e:	e017      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x3c8>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2103      	movs	r1, #3
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fbb8 	bl	80015cc <LL_ADC_GetOffsetChannel>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e62:	fa93 f3a3 	rbit	r3, r3
 8001e66:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001e68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e6a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001e6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001e72:	2320      	movs	r3, #32
 8001e74:	e003      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001e76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e78:	fab3 f383 	clz	r3, r3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d105      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x3e0>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	0e9b      	lsrs	r3, r3, #26
 8001e92:	f003 031f 	and.w	r3, r3, #31
 8001e96:	e011      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x404>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ea0:	fa93 f3a3 	rbit	r3, r3
 8001ea4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001ea6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ea8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001eaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001eb0:	2320      	movs	r3, #32
 8001eb2:	e003      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001eb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d106      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2103      	movs	r1, #3
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fb95 	bl	80015f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fc74 	bl	80017c0 <LL_ADC_IsEnabled>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f040 8140 	bne.w	8002160 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	6819      	ldr	r1, [r3, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	461a      	mov	r2, r3
 8001eee:	f7ff fbf5 	bl	80016dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	4a8f      	ldr	r2, [pc, #572]	@ (8002134 <HAL_ADC_ConfigChannel+0x67c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	f040 8131 	bne.w	8002160 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10b      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x46e>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	0e9b      	lsrs	r3, r3, #26
 8001f14:	3301      	adds	r3, #1
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	2b09      	cmp	r3, #9
 8001f1c:	bf94      	ite	ls
 8001f1e:	2301      	movls	r3, #1
 8001f20:	2300      	movhi	r3, #0
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	e019      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x4a2>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f36:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001f38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001f3e:	2320      	movs	r3, #32
 8001f40:	e003      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001f42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f44:	fab3 f383 	clz	r3, r3
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	2b09      	cmp	r3, #9
 8001f52:	bf94      	ite	ls
 8001f54:	2301      	movls	r3, #1
 8001f56:	2300      	movhi	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d079      	beq.n	8002052 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d107      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x4c2>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	0e9b      	lsrs	r3, r3, #26
 8001f70:	3301      	adds	r3, #1
 8001f72:	069b      	lsls	r3, r3, #26
 8001f74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f78:	e015      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x4ee>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001f88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f8a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001f8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001f92:	2320      	movs	r3, #32
 8001f94:	e003      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001f96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	069b      	lsls	r3, r3, #26
 8001fa2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d109      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x50e>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	0e9b      	lsrs	r3, r3, #26
 8001fb8:	3301      	adds	r3, #1
 8001fba:	f003 031f 	and.w	r3, r3, #31
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc4:	e017      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x53e>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fd6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001fd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001fde:	2320      	movs	r3, #32
 8001fe0:	e003      	b.n	8001fea <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001fe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fe4:	fab3 f383 	clz	r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	3301      	adds	r3, #1
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	ea42 0103 	orr.w	r1, r2, r3
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10a      	bne.n	800201c <HAL_ADC_ConfigChannel+0x564>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	0e9b      	lsrs	r3, r3, #26
 800200c:	3301      	adds	r3, #1
 800200e:	f003 021f 	and.w	r2, r3, #31
 8002012:	4613      	mov	r3, r2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	4413      	add	r3, r2
 8002018:	051b      	lsls	r3, r3, #20
 800201a:	e018      	b.n	800204e <HAL_ADC_ConfigChannel+0x596>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002024:	fa93 f3a3 	rbit	r3, r3
 8002028:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800202a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800202c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800202e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002034:	2320      	movs	r3, #32
 8002036:	e003      	b.n	8002040 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	3301      	adds	r3, #1
 8002042:	f003 021f 	and.w	r2, r3, #31
 8002046:	4613      	mov	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4413      	add	r3, r2
 800204c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800204e:	430b      	orrs	r3, r1
 8002050:	e081      	b.n	8002156 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205a:	2b00      	cmp	r3, #0
 800205c:	d107      	bne.n	800206e <HAL_ADC_ConfigChannel+0x5b6>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	0e9b      	lsrs	r3, r3, #26
 8002064:	3301      	adds	r3, #1
 8002066:	069b      	lsls	r3, r3, #26
 8002068:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800206c:	e015      	b.n	800209a <HAL_ADC_ConfigChannel+0x5e2>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800207c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002086:	2320      	movs	r3, #32
 8002088:	e003      	b.n	8002092 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800208a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800208c:	fab3 f383 	clz	r3, r3
 8002090:	b2db      	uxtb	r3, r3
 8002092:	3301      	adds	r3, #1
 8002094:	069b      	lsls	r3, r3, #26
 8002096:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x602>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	0e9b      	lsrs	r3, r3, #26
 80020ac:	3301      	adds	r3, #1
 80020ae:	f003 031f 	and.w	r3, r3, #31
 80020b2:	2101      	movs	r1, #1
 80020b4:	fa01 f303 	lsl.w	r3, r1, r3
 80020b8:	e017      	b.n	80020ea <HAL_ADC_ConfigChannel+0x632>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	61bb      	str	r3, [r7, #24]
  return result;
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80020d2:	2320      	movs	r3, #32
 80020d4:	e003      	b.n	80020de <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	3301      	adds	r3, #1
 80020e0:	f003 031f 	and.w	r3, r3, #31
 80020e4:	2101      	movs	r1, #1
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	ea42 0103 	orr.w	r1, r2, r3
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10d      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x65e>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	0e9b      	lsrs	r3, r3, #26
 8002100:	3301      	adds	r3, #1
 8002102:	f003 021f 	and.w	r2, r3, #31
 8002106:	4613      	mov	r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4413      	add	r3, r2
 800210c:	3b1e      	subs	r3, #30
 800210e:	051b      	lsls	r3, r3, #20
 8002110:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002114:	e01e      	b.n	8002154 <HAL_ADC_ConfigChannel+0x69c>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	60fb      	str	r3, [r7, #12]
  return result;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d104      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800212e:	2320      	movs	r3, #32
 8002130:	e006      	b.n	8002140 <HAL_ADC_ConfigChannel+0x688>
 8002132:	bf00      	nop
 8002134:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fab3 f383 	clz	r3, r3
 800213e:	b2db      	uxtb	r3, r3
 8002140:	3301      	adds	r3, #1
 8002142:	f003 021f 	and.w	r2, r3, #31
 8002146:	4613      	mov	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	3b1e      	subs	r3, #30
 800214e:	051b      	lsls	r3, r3, #20
 8002150:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002154:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800215a:	4619      	mov	r1, r3
 800215c:	f7ff fa93 	bl	8001686 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b3d      	ldr	r3, [pc, #244]	@ (800225c <HAL_ADC_ConfigChannel+0x7a4>)
 8002166:	4013      	ands	r3, r2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d06c      	beq.n	8002246 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800216c:	483c      	ldr	r0, [pc, #240]	@ (8002260 <HAL_ADC_ConfigChannel+0x7a8>)
 800216e:	f7ff f9fb 	bl	8001568 <LL_ADC_GetCommonPathInternalCh>
 8002172:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a3a      	ldr	r2, [pc, #232]	@ (8002264 <HAL_ADC_ConfigChannel+0x7ac>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d127      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002180:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002184:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d121      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a35      	ldr	r2, [pc, #212]	@ (8002268 <HAL_ADC_ConfigChannel+0x7b0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d157      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002196:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800219a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800219e:	4619      	mov	r1, r3
 80021a0:	482f      	ldr	r0, [pc, #188]	@ (8002260 <HAL_ADC_ConfigChannel+0x7a8>)
 80021a2:	f7ff f9ce 	bl	8001542 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021a6:	4b31      	ldr	r3, [pc, #196]	@ (800226c <HAL_ADC_ConfigChannel+0x7b4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	099b      	lsrs	r3, r3, #6
 80021ac:	4a30      	ldr	r2, [pc, #192]	@ (8002270 <HAL_ADC_ConfigChannel+0x7b8>)
 80021ae:	fba2 2303 	umull	r2, r3, r2, r3
 80021b2:	099b      	lsrs	r3, r3, #6
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	4613      	mov	r3, r2
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80021c0:	e002      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	3b01      	subs	r3, #1
 80021c6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f9      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021ce:	e03a      	b.n	8002246 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a27      	ldr	r2, [pc, #156]	@ (8002274 <HAL_ADC_ConfigChannel+0x7bc>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d113      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10d      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002268 <HAL_ADC_ConfigChannel+0x7b0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d12a      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021f8:	4619      	mov	r1, r3
 80021fa:	4819      	ldr	r0, [pc, #100]	@ (8002260 <HAL_ADC_ConfigChannel+0x7a8>)
 80021fc:	f7ff f9a1 	bl	8001542 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002200:	e021      	b.n	8002246 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a1c      	ldr	r2, [pc, #112]	@ (8002278 <HAL_ADC_ConfigChannel+0x7c0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d11c      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800220c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002210:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d116      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a12      	ldr	r2, [pc, #72]	@ (8002268 <HAL_ADC_ConfigChannel+0x7b0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d111      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002222:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002226:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800222a:	4619      	mov	r1, r3
 800222c:	480c      	ldr	r0, [pc, #48]	@ (8002260 <HAL_ADC_ConfigChannel+0x7a8>)
 800222e:	f7ff f988 	bl	8001542 <LL_ADC_SetCommonPathInternalCh>
 8002232:	e008      	b.n	8002246 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002238:	f043 0220 	orr.w	r2, r3, #32
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800224e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002252:	4618      	mov	r0, r3
 8002254:	37d8      	adds	r7, #216	@ 0xd8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	80080000 	.word	0x80080000
 8002260:	50040300 	.word	0x50040300
 8002264:	c7520000 	.word	0xc7520000
 8002268:	50040000 	.word	0x50040000
 800226c:	20000004 	.word	0x20000004
 8002270:	053e2d63 	.word	0x053e2d63
 8002274:	cb840000 	.word	0xcb840000
 8002278:	80000001 	.word	0x80000001

0800227c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800228c:	4b0c      	ldr	r3, [pc, #48]	@ (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002298:	4013      	ands	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ae:	4a04      	ldr	r2, [pc, #16]	@ (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	60d3      	str	r3, [r2, #12]
}
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c8:	4b04      	ldr	r3, [pc, #16]	@ (80022dc <__NVIC_GetPriorityGrouping+0x18>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	0a1b      	lsrs	r3, r3, #8
 80022ce:	f003 0307 	and.w	r3, r3, #7
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	6039      	str	r1, [r7, #0]
 80022ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	db0a      	blt.n	800230a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	490c      	ldr	r1, [pc, #48]	@ (800232c <__NVIC_SetPriority+0x4c>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	0112      	lsls	r2, r2, #4
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	440b      	add	r3, r1
 8002304:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002308:	e00a      	b.n	8002320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4908      	ldr	r1, [pc, #32]	@ (8002330 <__NVIC_SetPriority+0x50>)
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	3b04      	subs	r3, #4
 8002318:	0112      	lsls	r2, r2, #4
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	440b      	add	r3, r1
 800231e:	761a      	strb	r2, [r3, #24]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000e100 	.word	0xe000e100
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	@ 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f1c3 0307 	rsb	r3, r3, #7
 800234e:	2b04      	cmp	r3, #4
 8002350:	bf28      	it	cs
 8002352:	2304      	movcs	r3, #4
 8002354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3304      	adds	r3, #4
 800235a:	2b06      	cmp	r3, #6
 800235c:	d902      	bls.n	8002364 <NVIC_EncodePriority+0x30>
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3b03      	subs	r3, #3
 8002362:	e000      	b.n	8002366 <NVIC_EncodePriority+0x32>
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	f04f 32ff 	mov.w	r2, #4294967295
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43da      	mvns	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	401a      	ands	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800237c:	f04f 31ff 	mov.w	r1, #4294967295
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	fa01 f303 	lsl.w	r3, r1, r3
 8002386:	43d9      	mvns	r1, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	4313      	orrs	r3, r2
         );
}
 800238e:	4618      	mov	r0, r3
 8002390:	3724      	adds	r7, #36	@ 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023ac:	d301      	bcc.n	80023b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ae:	2301      	movs	r3, #1
 80023b0:	e00f      	b.n	80023d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b2:	4a0a      	ldr	r2, [pc, #40]	@ (80023dc <SysTick_Config+0x40>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ba:	210f      	movs	r1, #15
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295
 80023c0:	f7ff ff8e 	bl	80022e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c4:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <SysTick_Config+0x40>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ca:	4b04      	ldr	r3, [pc, #16]	@ (80023dc <SysTick_Config+0x40>)
 80023cc:	2207      	movs	r2, #7
 80023ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	e000e010 	.word	0xe000e010

080023e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ff47 	bl	800227c <__NVIC_SetPriorityGrouping>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002408:	f7ff ff5c 	bl	80022c4 <__NVIC_GetPriorityGrouping>
 800240c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	6978      	ldr	r0, [r7, #20]
 8002414:	f7ff ff8e 	bl	8002334 <NVIC_EncodePriority>
 8002418:	4602      	mov	r2, r0
 800241a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff5d 	bl	80022e0 <__NVIC_SetPriority>
}
 8002426:	bf00      	nop
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff ffb0 	bl	800239c <SysTick_Config>
 800243c:	4603      	mov	r3, r0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002456:	e148      	b.n	80026ea <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	2101      	movs	r1, #1
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	4013      	ands	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 813a 	beq.w	80026e4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	2b01      	cmp	r3, #1
 800247a:	d005      	beq.n	8002488 <HAL_GPIO_Init+0x40>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d130      	bne.n	80024ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	2203      	movs	r2, #3
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024be:	2201      	movs	r2, #1
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4013      	ands	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	f003 0201 	and.w	r2, r3, #1
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d017      	beq.n	8002526 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	2203      	movs	r2, #3
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d123      	bne.n	800257a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	08da      	lsrs	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3208      	adds	r2, #8
 800253a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800253e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	220f      	movs	r2, #15
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	08da      	lsrs	r2, r3, #3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3208      	adds	r2, #8
 8002574:	6939      	ldr	r1, [r7, #16]
 8002576:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	2203      	movs	r2, #3
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4013      	ands	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 0203 	and.w	r2, r3, #3
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 8094 	beq.w	80026e4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025bc:	4b52      	ldr	r3, [pc, #328]	@ (8002708 <HAL_GPIO_Init+0x2c0>)
 80025be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025c0:	4a51      	ldr	r2, [pc, #324]	@ (8002708 <HAL_GPIO_Init+0x2c0>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80025c8:	4b4f      	ldr	r3, [pc, #316]	@ (8002708 <HAL_GPIO_Init+0x2c0>)
 80025ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025d4:	4a4d      	ldr	r2, [pc, #308]	@ (800270c <HAL_GPIO_Init+0x2c4>)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	089b      	lsrs	r3, r3, #2
 80025da:	3302      	adds	r3, #2
 80025dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	220f      	movs	r2, #15
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80025fe:	d00d      	beq.n	800261c <HAL_GPIO_Init+0x1d4>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a43      	ldr	r2, [pc, #268]	@ (8002710 <HAL_GPIO_Init+0x2c8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d007      	beq.n	8002618 <HAL_GPIO_Init+0x1d0>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a42      	ldr	r2, [pc, #264]	@ (8002714 <HAL_GPIO_Init+0x2cc>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d101      	bne.n	8002614 <HAL_GPIO_Init+0x1cc>
 8002610:	2302      	movs	r3, #2
 8002612:	e004      	b.n	800261e <HAL_GPIO_Init+0x1d6>
 8002614:	2307      	movs	r3, #7
 8002616:	e002      	b.n	800261e <HAL_GPIO_Init+0x1d6>
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <HAL_GPIO_Init+0x1d6>
 800261c:	2300      	movs	r3, #0
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	f002 0203 	and.w	r2, r2, #3
 8002624:	0092      	lsls	r2, r2, #2
 8002626:	4093      	lsls	r3, r2
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800262e:	4937      	ldr	r1, [pc, #220]	@ (800270c <HAL_GPIO_Init+0x2c4>)
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	089b      	lsrs	r3, r3, #2
 8002634:	3302      	adds	r3, #2
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800263c:	4b36      	ldr	r3, [pc, #216]	@ (8002718 <HAL_GPIO_Init+0x2d0>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	43db      	mvns	r3, r3
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002660:	4a2d      	ldr	r2, [pc, #180]	@ (8002718 <HAL_GPIO_Init+0x2d0>)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002666:	4b2c      	ldr	r3, [pc, #176]	@ (8002718 <HAL_GPIO_Init+0x2d0>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	43db      	mvns	r3, r3
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800268a:	4a23      	ldr	r2, [pc, #140]	@ (8002718 <HAL_GPIO_Init+0x2d0>)
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002690:	4b21      	ldr	r3, [pc, #132]	@ (8002718 <HAL_GPIO_Init+0x2d0>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	43db      	mvns	r3, r3
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4013      	ands	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026b4:	4a18      	ldr	r2, [pc, #96]	@ (8002718 <HAL_GPIO_Init+0x2d0>)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80026ba:	4b17      	ldr	r3, [pc, #92]	@ (8002718 <HAL_GPIO_Init+0x2d0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	43db      	mvns	r3, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4013      	ands	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026de:	4a0e      	ldr	r2, [pc, #56]	@ (8002718 <HAL_GPIO_Init+0x2d0>)
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	3301      	adds	r3, #1
 80026e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	fa22 f303 	lsr.w	r3, r2, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f47f aeaf 	bne.w	8002458 <HAL_GPIO_Init+0x10>
  }
}
 80026fa:	bf00      	nop
 80026fc:	bf00      	nop
 80026fe:	371c      	adds	r7, #28
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	40021000 	.word	0x40021000
 800270c:	40010000 	.word	0x40010000
 8002710:	48000400 	.word	0x48000400
 8002714:	48000800 	.word	0x48000800
 8002718:	40010400 	.word	0x40010400

0800271c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	807b      	strh	r3, [r7, #2]
 8002728:	4613      	mov	r3, r2
 800272a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800272c:	787b      	ldrb	r3, [r7, #1]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002732:	887a      	ldrh	r2, [r7, #2]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002738:	e002      	b.n	8002740 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800273a:	887a      	ldrh	r2, [r7, #2]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800275e:	887a      	ldrh	r2, [r7, #2]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4013      	ands	r3, r2
 8002764:	041a      	lsls	r2, r3, #16
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	43d9      	mvns	r1, r3
 800276a:	887b      	ldrh	r3, [r7, #2]
 800276c:	400b      	ands	r3, r1
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	619a      	str	r2, [r3, #24]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002784:	4b04      	ldr	r3, [pc, #16]	@ (8002798 <HAL_PWREx_GetVoltageRange+0x18>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40007000 	.word	0x40007000

0800279c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027aa:	d130      	bne.n	800280e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ac:	4b23      	ldr	r3, [pc, #140]	@ (800283c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027b8:	d038      	beq.n	800282c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027ba:	4b20      	ldr	r3, [pc, #128]	@ (800283c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027c2:	4a1e      	ldr	r2, [pc, #120]	@ (800283c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002840 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2232      	movs	r2, #50	@ 0x32
 80027d0:	fb02 f303 	mul.w	r3, r2, r3
 80027d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002844 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	0c9b      	lsrs	r3, r3, #18
 80027dc:	3301      	adds	r3, #1
 80027de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027e0:	e002      	b.n	80027e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	3b01      	subs	r3, #1
 80027e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027e8:	4b14      	ldr	r3, [pc, #80]	@ (800283c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027f4:	d102      	bne.n	80027fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f2      	bne.n	80027e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027fc:	4b0f      	ldr	r3, [pc, #60]	@ (800283c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002804:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002808:	d110      	bne.n	800282c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e00f      	b.n	800282e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800280e:	4b0b      	ldr	r3, [pc, #44]	@ (800283c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800281a:	d007      	beq.n	800282c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800281c:	4b07      	ldr	r3, [pc, #28]	@ (800283c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002824:	4a05      	ldr	r2, [pc, #20]	@ (800283c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002826:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800282a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40007000 	.word	0x40007000
 8002840:	20000004 	.word	0x20000004
 8002844:	431bde83 	.word	0x431bde83

08002848 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d102      	bne.n	800285c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	f000 bc02 	b.w	8003060 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800285c:	4b96      	ldr	r3, [pc, #600]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002866:	4b94      	ldr	r3, [pc, #592]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 80e4 	beq.w	8002a46 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d007      	beq.n	8002894 <HAL_RCC_OscConfig+0x4c>
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	2b0c      	cmp	r3, #12
 8002888:	f040 808b 	bne.w	80029a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2b01      	cmp	r3, #1
 8002890:	f040 8087 	bne.w	80029a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002894:	4b88      	ldr	r3, [pc, #544]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_RCC_OscConfig+0x64>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e3d9      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1a      	ldr	r2, [r3, #32]
 80028b0:	4b81      	ldr	r3, [pc, #516]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d004      	beq.n	80028c6 <HAL_RCC_OscConfig+0x7e>
 80028bc:	4b7e      	ldr	r3, [pc, #504]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028c4:	e005      	b.n	80028d2 <HAL_RCC_OscConfig+0x8a>
 80028c6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 80028c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028cc:	091b      	lsrs	r3, r3, #4
 80028ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d223      	bcs.n	800291e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fd8c 	bl	80033f8 <RCC_SetFlashLatencyFromMSIRange>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e3ba      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028ea:	4b73      	ldr	r3, [pc, #460]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a72      	ldr	r2, [pc, #456]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 80028f0:	f043 0308 	orr.w	r3, r3, #8
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	4b70      	ldr	r3, [pc, #448]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	496d      	ldr	r1, [pc, #436]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002904:	4313      	orrs	r3, r2
 8002906:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002908:	4b6b      	ldr	r3, [pc, #428]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	021b      	lsls	r3, r3, #8
 8002916:	4968      	ldr	r1, [pc, #416]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002918:	4313      	orrs	r3, r2
 800291a:	604b      	str	r3, [r1, #4]
 800291c:	e025      	b.n	800296a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800291e:	4b66      	ldr	r3, [pc, #408]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a65      	ldr	r2, [pc, #404]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002924:	f043 0308 	orr.w	r3, r3, #8
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	4b63      	ldr	r3, [pc, #396]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	4960      	ldr	r1, [pc, #384]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002938:	4313      	orrs	r3, r2
 800293a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800293c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	021b      	lsls	r3, r3, #8
 800294a:	495b      	ldr	r1, [pc, #364]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 800294c:	4313      	orrs	r3, r2
 800294e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	4618      	mov	r0, r3
 800295c:	f000 fd4c 	bl	80033f8 <RCC_SetFlashLatencyFromMSIRange>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e37a      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800296a:	f000 fc81 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 800296e:	4602      	mov	r2, r0
 8002970:	4b51      	ldr	r3, [pc, #324]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	4950      	ldr	r1, [pc, #320]	@ (8002abc <HAL_RCC_OscConfig+0x274>)
 800297c:	5ccb      	ldrb	r3, [r1, r3]
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	fa22 f303 	lsr.w	r3, r2, r3
 8002986:	4a4e      	ldr	r2, [pc, #312]	@ (8002ac0 <HAL_RCC_OscConfig+0x278>)
 8002988:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800298a:	4b4e      	ldr	r3, [pc, #312]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe fd44 	bl	800141c <HAL_InitTick>
 8002994:	4603      	mov	r3, r0
 8002996:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d052      	beq.n	8002a44 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	e35e      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d032      	beq.n	8002a10 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029aa:	4b43      	ldr	r3, [pc, #268]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a42      	ldr	r2, [pc, #264]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029b6:	f7fe fd81 	bl	80014bc <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029be:	f7fe fd7d 	bl	80014bc <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e347      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029d0:	4b39      	ldr	r3, [pc, #228]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029dc:	4b36      	ldr	r3, [pc, #216]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a35      	ldr	r2, [pc, #212]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 80029e2:	f043 0308 	orr.w	r3, r3, #8
 80029e6:	6013      	str	r3, [r2, #0]
 80029e8:	4b33      	ldr	r3, [pc, #204]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	4930      	ldr	r1, [pc, #192]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029fa:	4b2f      	ldr	r3, [pc, #188]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	492b      	ldr	r1, [pc, #172]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	604b      	str	r3, [r1, #4]
 8002a0e:	e01a      	b.n	8002a46 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a10:	4b29      	ldr	r3, [pc, #164]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a28      	ldr	r2, [pc, #160]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002a16:	f023 0301 	bic.w	r3, r3, #1
 8002a1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a1c:	f7fe fd4e 	bl	80014bc <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a24:	f7fe fd4a 	bl	80014bc <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e314      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a36:	4b20      	ldr	r3, [pc, #128]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x1dc>
 8002a42:	e000      	b.n	8002a46 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d073      	beq.n	8002b3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_OscConfig+0x21c>
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	2b0c      	cmp	r3, #12
 8002a5c:	d10e      	bne.n	8002a7c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d10b      	bne.n	8002a7c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a64:	4b14      	ldr	r3, [pc, #80]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d063      	beq.n	8002b38 <HAL_RCC_OscConfig+0x2f0>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d15f      	bne.n	8002b38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e2f1      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a84:	d106      	bne.n	8002a94 <HAL_RCC_OscConfig+0x24c>
 8002a86:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	e025      	b.n	8002ae0 <HAL_RCC_OscConfig+0x298>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a9c:	d114      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x280>
 8002a9e:	4b06      	ldr	r3, [pc, #24]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a05      	ldr	r2, [pc, #20]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002aa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	4b03      	ldr	r3, [pc, #12]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a02      	ldr	r2, [pc, #8]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	e013      	b.n	8002ae0 <HAL_RCC_OscConfig+0x298>
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	08005c6c 	.word	0x08005c6c
 8002ac0:	20000004 	.word	0x20000004
 8002ac4:	20000008 	.word	0x20000008
 8002ac8:	4ba0      	ldr	r3, [pc, #640]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a9f      	ldr	r2, [pc, #636]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002ace:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ad2:	6013      	str	r3, [r2, #0]
 8002ad4:	4b9d      	ldr	r3, [pc, #628]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a9c      	ldr	r2, [pc, #624]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002ada:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d013      	beq.n	8002b10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae8:	f7fe fce8 	bl	80014bc <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af0:	f7fe fce4 	bl	80014bc <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b64      	cmp	r3, #100	@ 0x64
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e2ae      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b02:	4b92      	ldr	r3, [pc, #584]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0x2a8>
 8002b0e:	e014      	b.n	8002b3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7fe fcd4 	bl	80014bc <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b18:	f7fe fcd0 	bl	80014bc <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b64      	cmp	r3, #100	@ 0x64
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e29a      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b2a:	4b88      	ldr	r3, [pc, #544]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x2d0>
 8002b36:	e000      	b.n	8002b3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d060      	beq.n	8002c08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d005      	beq.n	8002b58 <HAL_RCC_OscConfig+0x310>
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	2b0c      	cmp	r3, #12
 8002b50:	d119      	bne.n	8002b86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d116      	bne.n	8002b86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b58:	4b7c      	ldr	r3, [pc, #496]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_RCC_OscConfig+0x328>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e277      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b70:	4b76      	ldr	r3, [pc, #472]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	061b      	lsls	r3, r3, #24
 8002b7e:	4973      	ldr	r1, [pc, #460]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b84:	e040      	b.n	8002c08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d023      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b8e:	4b6f      	ldr	r3, [pc, #444]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a6e      	ldr	r2, [pc, #440]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002b94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9a:	f7fe fc8f 	bl	80014bc <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba2:	f7fe fc8b 	bl	80014bc <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e255      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bb4:	4b65      	ldr	r3, [pc, #404]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0f0      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc0:	4b62      	ldr	r3, [pc, #392]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	061b      	lsls	r3, r3, #24
 8002bce:	495f      	ldr	r1, [pc, #380]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]
 8002bd4:	e018      	b.n	8002c08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bd6:	4b5d      	ldr	r3, [pc, #372]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a5c      	ldr	r2, [pc, #368]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002bdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be2:	f7fe fc6b 	bl	80014bc <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bea:	f7fe fc67 	bl	80014bc <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e231      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bfc:	4b53      	ldr	r3, [pc, #332]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1f0      	bne.n	8002bea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d03c      	beq.n	8002c8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d01c      	beq.n	8002c56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1c:	4b4b      	ldr	r3, [pc, #300]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c22:	4a4a      	ldr	r2, [pc, #296]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2c:	f7fe fc46 	bl	80014bc <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c34:	f7fe fc42 	bl	80014bc <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e20c      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c46:	4b41      	ldr	r3, [pc, #260]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0ef      	beq.n	8002c34 <HAL_RCC_OscConfig+0x3ec>
 8002c54:	e01b      	b.n	8002c8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c56:	4b3d      	ldr	r3, [pc, #244]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c5c:	4a3b      	ldr	r2, [pc, #236]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c66:	f7fe fc29 	bl	80014bc <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c6e:	f7fe fc25 	bl	80014bc <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e1ef      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c80:	4b32      	ldr	r3, [pc, #200]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1ef      	bne.n	8002c6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 80a6 	beq.w	8002de8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10d      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cac:	4b27      	ldr	r3, [pc, #156]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb0:	4a26      	ldr	r2, [pc, #152]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002cb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cb8:	4b24      	ldr	r3, [pc, #144]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cc8:	4b21      	ldr	r3, [pc, #132]	@ (8002d50 <HAL_RCC_OscConfig+0x508>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d118      	bne.n	8002d06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8002d50 <HAL_RCC_OscConfig+0x508>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8002d50 <HAL_RCC_OscConfig+0x508>)
 8002cda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce0:	f7fe fbec 	bl	80014bc <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce8:	f7fe fbe8 	bl	80014bc <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e1b2      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cfa:	4b15      	ldr	r3, [pc, #84]	@ (8002d50 <HAL_RCC_OscConfig+0x508>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d108      	bne.n	8002d20 <HAL_RCC_OscConfig+0x4d8>
 8002d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d14:	4a0d      	ldr	r2, [pc, #52]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d1e:	e029      	b.n	8002d74 <HAL_RCC_OscConfig+0x52c>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b05      	cmp	r3, #5
 8002d26:	d115      	bne.n	8002d54 <HAL_RCC_OscConfig+0x50c>
 8002d28:	4b08      	ldr	r3, [pc, #32]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d2e:	4a07      	ldr	r2, [pc, #28]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002d30:	f043 0304 	orr.w	r3, r3, #4
 8002d34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d38:	4b04      	ldr	r3, [pc, #16]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d3e:	4a03      	ldr	r2, [pc, #12]	@ (8002d4c <HAL_RCC_OscConfig+0x504>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d48:	e014      	b.n	8002d74 <HAL_RCC_OscConfig+0x52c>
 8002d4a:	bf00      	nop
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40007000 	.word	0x40007000
 8002d54:	4b9a      	ldr	r3, [pc, #616]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d5a:	4a99      	ldr	r2, [pc, #612]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002d5c:	f023 0301 	bic.w	r3, r3, #1
 8002d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d64:	4b96      	ldr	r3, [pc, #600]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d6a:	4a95      	ldr	r2, [pc, #596]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002d6c:	f023 0304 	bic.w	r3, r3, #4
 8002d70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d016      	beq.n	8002daa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fe fb9e 	bl	80014bc <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d82:	e00a      	b.n	8002d9a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d84:	f7fe fb9a 	bl	80014bc <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e162      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d9a:	4b89      	ldr	r3, [pc, #548]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0ed      	beq.n	8002d84 <HAL_RCC_OscConfig+0x53c>
 8002da8:	e015      	b.n	8002dd6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002daa:	f7fe fb87 	bl	80014bc <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f7fe fb83 	bl	80014bc <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e14b      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dc8:	4b7d      	ldr	r3, [pc, #500]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1ed      	bne.n	8002db2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dd6:	7ffb      	ldrb	r3, [r7, #31]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d105      	bne.n	8002de8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ddc:	4b78      	ldr	r3, [pc, #480]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de0:	4a77      	ldr	r2, [pc, #476]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002de2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002de6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0320 	and.w	r3, r3, #32
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d03c      	beq.n	8002e6e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d01c      	beq.n	8002e36 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dfc:	4b70      	ldr	r3, [pc, #448]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002dfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e02:	4a6f      	ldr	r2, [pc, #444]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0c:	f7fe fb56 	bl	80014bc <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e14:	f7fe fb52 	bl	80014bc <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e11c      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e26:	4b66      	ldr	r3, [pc, #408]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002e28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0ef      	beq.n	8002e14 <HAL_RCC_OscConfig+0x5cc>
 8002e34:	e01b      	b.n	8002e6e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e36:	4b62      	ldr	r3, [pc, #392]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002e38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e3c:	4a60      	ldr	r2, [pc, #384]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002e3e:	f023 0301 	bic.w	r3, r3, #1
 8002e42:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e46:	f7fe fb39 	bl	80014bc <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e4e:	f7fe fb35 	bl	80014bc <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e0ff      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e60:	4b57      	ldr	r3, [pc, #348]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002e62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1ef      	bne.n	8002e4e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 80f3 	beq.w	800305e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	f040 80c9 	bne.w	8003014 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e82:	4b4f      	ldr	r3, [pc, #316]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f003 0203 	and.w	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d12c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d123      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d11b      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d113      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed2:	085b      	lsrs	r3, r3, #1
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d109      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee6:	085b      	lsrs	r3, r3, #1
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d06b      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	2b0c      	cmp	r3, #12
 8002ef4:	d062      	beq.n	8002fbc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ef6:	4b32      	ldr	r3, [pc, #200]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e0ac      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f06:	4b2e      	ldr	r3, [pc, #184]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a2d      	ldr	r2, [pc, #180]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002f0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f12:	f7fe fad3 	bl	80014bc <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1a:	f7fe facf 	bl	80014bc <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e099      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f2c:	4b24      	ldr	r3, [pc, #144]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f0      	bne.n	8002f1a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f38:	4b21      	ldr	r3, [pc, #132]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	4b21      	ldr	r3, [pc, #132]	@ (8002fc4 <HAL_RCC_OscConfig+0x77c>)
 8002f3e:	4013      	ands	r3, r2
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f48:	3a01      	subs	r2, #1
 8002f4a:	0112      	lsls	r2, r2, #4
 8002f4c:	4311      	orrs	r1, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f52:	0212      	lsls	r2, r2, #8
 8002f54:	4311      	orrs	r1, r2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f5a:	0852      	lsrs	r2, r2, #1
 8002f5c:	3a01      	subs	r2, #1
 8002f5e:	0552      	lsls	r2, r2, #21
 8002f60:	4311      	orrs	r1, r2
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002f66:	0852      	lsrs	r2, r2, #1
 8002f68:	3a01      	subs	r2, #1
 8002f6a:	0652      	lsls	r2, r2, #25
 8002f6c:	4311      	orrs	r1, r2
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f72:	06d2      	lsls	r2, r2, #27
 8002f74:	430a      	orrs	r2, r1
 8002f76:	4912      	ldr	r1, [pc, #72]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f7c:	4b10      	ldr	r3, [pc, #64]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0f      	ldr	r2, [pc, #60]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002f82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f88:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002f8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f94:	f7fe fa92 	bl	80014bc <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9c:	f7fe fa8e 	bl	80014bc <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e058      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fae:	4b04      	ldr	r3, [pc, #16]	@ (8002fc0 <HAL_RCC_OscConfig+0x778>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fba:	e050      	b.n	800305e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e04f      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc8:	4b27      	ldr	r3, [pc, #156]	@ (8003068 <HAL_RCC_OscConfig+0x820>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d144      	bne.n	800305e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fd4:	4b24      	ldr	r3, [pc, #144]	@ (8003068 <HAL_RCC_OscConfig+0x820>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a23      	ldr	r2, [pc, #140]	@ (8003068 <HAL_RCC_OscConfig+0x820>)
 8002fda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fe0:	4b21      	ldr	r3, [pc, #132]	@ (8003068 <HAL_RCC_OscConfig+0x820>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	4a20      	ldr	r2, [pc, #128]	@ (8003068 <HAL_RCC_OscConfig+0x820>)
 8002fe6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fec:	f7fe fa66 	bl	80014bc <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff4:	f7fe fa62 	bl	80014bc <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e02c      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003006:	4b18      	ldr	r3, [pc, #96]	@ (8003068 <HAL_RCC_OscConfig+0x820>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x7ac>
 8003012:	e024      	b.n	800305e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	2b0c      	cmp	r3, #12
 8003018:	d01f      	beq.n	800305a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301a:	4b13      	ldr	r3, [pc, #76]	@ (8003068 <HAL_RCC_OscConfig+0x820>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a12      	ldr	r2, [pc, #72]	@ (8003068 <HAL_RCC_OscConfig+0x820>)
 8003020:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003026:	f7fe fa49 	bl	80014bc <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302e:	f7fe fa45 	bl	80014bc <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e00f      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003040:	4b09      	ldr	r3, [pc, #36]	@ (8003068 <HAL_RCC_OscConfig+0x820>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1f0      	bne.n	800302e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800304c:	4b06      	ldr	r3, [pc, #24]	@ (8003068 <HAL_RCC_OscConfig+0x820>)
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	4905      	ldr	r1, [pc, #20]	@ (8003068 <HAL_RCC_OscConfig+0x820>)
 8003052:	4b06      	ldr	r3, [pc, #24]	@ (800306c <HAL_RCC_OscConfig+0x824>)
 8003054:	4013      	ands	r3, r2
 8003056:	60cb      	str	r3, [r1, #12]
 8003058:	e001      	b.n	800305e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3720      	adds	r7, #32
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40021000 	.word	0x40021000
 800306c:	feeefffc 	.word	0xfeeefffc

08003070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0e7      	b.n	8003254 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003084:	4b75      	ldr	r3, [pc, #468]	@ (800325c <HAL_RCC_ClockConfig+0x1ec>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d910      	bls.n	80030b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b72      	ldr	r3, [pc, #456]	@ (800325c <HAL_RCC_ClockConfig+0x1ec>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 0207 	bic.w	r2, r3, #7
 800309a:	4970      	ldr	r1, [pc, #448]	@ (800325c <HAL_RCC_ClockConfig+0x1ec>)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b6e      	ldr	r3, [pc, #440]	@ (800325c <HAL_RCC_ClockConfig+0x1ec>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0cf      	b.n	8003254 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d010      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	4b66      	ldr	r3, [pc, #408]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d908      	bls.n	80030e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d0:	4b63      	ldr	r3, [pc, #396]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4960      	ldr	r1, [pc, #384]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d04c      	beq.n	8003188 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	d107      	bne.n	8003106 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f6:	4b5a      	ldr	r3, [pc, #360]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d121      	bne.n	8003146 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e0a6      	b.n	8003254 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d107      	bne.n	800311e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800310e:	4b54      	ldr	r3, [pc, #336]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d115      	bne.n	8003146 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e09a      	b.n	8003254 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d107      	bne.n	8003136 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003126:	4b4e      	ldr	r3, [pc, #312]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d109      	bne.n	8003146 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e08e      	b.n	8003254 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003136:	4b4a      	ldr	r3, [pc, #296]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e086      	b.n	8003254 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003146:	4b46      	ldr	r3, [pc, #280]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f023 0203 	bic.w	r2, r3, #3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	4943      	ldr	r1, [pc, #268]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 8003154:	4313      	orrs	r3, r2
 8003156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003158:	f7fe f9b0 	bl	80014bc <HAL_GetTick>
 800315c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800315e:	e00a      	b.n	8003176 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003160:	f7fe f9ac 	bl	80014bc <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800316e:	4293      	cmp	r3, r2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e06e      	b.n	8003254 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003176:	4b3a      	ldr	r3, [pc, #232]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 020c 	and.w	r2, r3, #12
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	429a      	cmp	r2, r3
 8003186:	d1eb      	bne.n	8003160 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d010      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	4b31      	ldr	r3, [pc, #196]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d208      	bcs.n	80031b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	492b      	ldr	r1, [pc, #172]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031b6:	4b29      	ldr	r3, [pc, #164]	@ (800325c <HAL_RCC_ClockConfig+0x1ec>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d210      	bcs.n	80031e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c4:	4b25      	ldr	r3, [pc, #148]	@ (800325c <HAL_RCC_ClockConfig+0x1ec>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f023 0207 	bic.w	r2, r3, #7
 80031cc:	4923      	ldr	r1, [pc, #140]	@ (800325c <HAL_RCC_ClockConfig+0x1ec>)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d4:	4b21      	ldr	r3, [pc, #132]	@ (800325c <HAL_RCC_ClockConfig+0x1ec>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d001      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e036      	b.n	8003254 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d008      	beq.n	8003204 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	4918      	ldr	r1, [pc, #96]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 8003200:	4313      	orrs	r3, r2
 8003202:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b00      	cmp	r3, #0
 800320e:	d009      	beq.n	8003224 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003210:	4b13      	ldr	r3, [pc, #76]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	4910      	ldr	r1, [pc, #64]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 8003220:	4313      	orrs	r3, r2
 8003222:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003224:	f000 f824 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 8003228:	4602      	mov	r2, r0
 800322a:	4b0d      	ldr	r3, [pc, #52]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	091b      	lsrs	r3, r3, #4
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	490b      	ldr	r1, [pc, #44]	@ (8003264 <HAL_RCC_ClockConfig+0x1f4>)
 8003236:	5ccb      	ldrb	r3, [r1, r3]
 8003238:	f003 031f 	and.w	r3, r3, #31
 800323c:	fa22 f303 	lsr.w	r3, r2, r3
 8003240:	4a09      	ldr	r2, [pc, #36]	@ (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 8003242:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003244:	4b09      	ldr	r3, [pc, #36]	@ (800326c <HAL_RCC_ClockConfig+0x1fc>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7fe f8e7 	bl	800141c <HAL_InitTick>
 800324e:	4603      	mov	r3, r0
 8003250:	72fb      	strb	r3, [r7, #11]

  return status;
 8003252:	7afb      	ldrb	r3, [r7, #11]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40022000 	.word	0x40022000
 8003260:	40021000 	.word	0x40021000
 8003264:	08005c6c 	.word	0x08005c6c
 8003268:	20000004 	.word	0x20000004
 800326c:	20000008 	.word	0x20000008

08003270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003270:	b480      	push	{r7}
 8003272:	b089      	sub	sp, #36	@ 0x24
 8003274:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	2300      	movs	r3, #0
 800327c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800327e:	4b3e      	ldr	r3, [pc, #248]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x108>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 030c 	and.w	r3, r3, #12
 8003286:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003288:	4b3b      	ldr	r3, [pc, #236]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x108>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_RCC_GetSysClockFreq+0x34>
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	2b0c      	cmp	r3, #12
 800329c:	d121      	bne.n	80032e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d11e      	bne.n	80032e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032a4:	4b34      	ldr	r3, [pc, #208]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x108>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d107      	bne.n	80032c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032b0:	4b31      	ldr	r3, [pc, #196]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x108>)
 80032b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032b6:	0a1b      	lsrs	r3, r3, #8
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	61fb      	str	r3, [r7, #28]
 80032be:	e005      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x108>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	091b      	lsrs	r3, r3, #4
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032cc:	4a2b      	ldr	r2, [pc, #172]	@ (800337c <HAL_RCC_GetSysClockFreq+0x10c>)
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10d      	bne.n	80032f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032e0:	e00a      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d102      	bne.n	80032ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032e8:	4b25      	ldr	r3, [pc, #148]	@ (8003380 <HAL_RCC_GetSysClockFreq+0x110>)
 80032ea:	61bb      	str	r3, [r7, #24]
 80032ec:	e004      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032f4:	4b23      	ldr	r3, [pc, #140]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x114>)
 80032f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	2b0c      	cmp	r3, #12
 80032fc:	d134      	bne.n	8003368 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x108>)
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d003      	beq.n	8003316 <HAL_RCC_GetSysClockFreq+0xa6>
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b03      	cmp	r3, #3
 8003312:	d003      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0xac>
 8003314:	e005      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003316:	4b1a      	ldr	r3, [pc, #104]	@ (8003380 <HAL_RCC_GetSysClockFreq+0x110>)
 8003318:	617b      	str	r3, [r7, #20]
      break;
 800331a:	e005      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800331c:	4b19      	ldr	r3, [pc, #100]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x114>)
 800331e:	617b      	str	r3, [r7, #20]
      break;
 8003320:	e002      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	617b      	str	r3, [r7, #20]
      break;
 8003326:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003328:	4b13      	ldr	r3, [pc, #76]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x108>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	091b      	lsrs	r3, r3, #4
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	3301      	adds	r3, #1
 8003334:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003336:	4b10      	ldr	r3, [pc, #64]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x108>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	0a1b      	lsrs	r3, r3, #8
 800333c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	fb03 f202 	mul.w	r2, r3, r2
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	fbb2 f3f3 	udiv	r3, r2, r3
 800334c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800334e:	4b0a      	ldr	r3, [pc, #40]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x108>)
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	0e5b      	lsrs	r3, r3, #25
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	3301      	adds	r3, #1
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	fbb2 f3f3 	udiv	r3, r2, r3
 8003366:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003368:	69bb      	ldr	r3, [r7, #24]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3724      	adds	r7, #36	@ 0x24
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40021000 	.word	0x40021000
 800337c:	08005c84 	.word	0x08005c84
 8003380:	00f42400 	.word	0x00f42400
 8003384:	007a1200 	.word	0x007a1200

08003388 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800338c:	4b03      	ldr	r3, [pc, #12]	@ (800339c <HAL_RCC_GetHCLKFreq+0x14>)
 800338e:	681b      	ldr	r3, [r3, #0]
}
 8003390:	4618      	mov	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20000004 	.word	0x20000004

080033a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033a4:	f7ff fff0 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 80033a8:	4602      	mov	r2, r0
 80033aa:	4b06      	ldr	r3, [pc, #24]	@ (80033c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	0a1b      	lsrs	r3, r3, #8
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	4904      	ldr	r1, [pc, #16]	@ (80033c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033b6:	5ccb      	ldrb	r3, [r1, r3]
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40021000 	.word	0x40021000
 80033c8:	08005c7c 	.word	0x08005c7c

080033cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033d0:	f7ff ffda 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 80033d4:	4602      	mov	r2, r0
 80033d6:	4b06      	ldr	r3, [pc, #24]	@ (80033f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	0adb      	lsrs	r3, r3, #11
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	4904      	ldr	r1, [pc, #16]	@ (80033f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033e2:	5ccb      	ldrb	r3, [r1, r3]
 80033e4:	f003 031f 	and.w	r3, r3, #31
 80033e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40021000 	.word	0x40021000
 80033f4:	08005c7c 	.word	0x08005c7c

080033f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003400:	2300      	movs	r3, #0
 8003402:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003404:	4b2a      	ldr	r3, [pc, #168]	@ (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003408:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003410:	f7ff f9b6 	bl	8002780 <HAL_PWREx_GetVoltageRange>
 8003414:	6178      	str	r0, [r7, #20]
 8003416:	e014      	b.n	8003442 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003418:	4b25      	ldr	r3, [pc, #148]	@ (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800341a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341c:	4a24      	ldr	r2, [pc, #144]	@ (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800341e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003422:	6593      	str	r3, [r2, #88]	@ 0x58
 8003424:	4b22      	ldr	r3, [pc, #136]	@ (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003428:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003430:	f7ff f9a6 	bl	8002780 <HAL_PWREx_GetVoltageRange>
 8003434:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003436:	4b1e      	ldr	r3, [pc, #120]	@ (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800343a:	4a1d      	ldr	r2, [pc, #116]	@ (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800343c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003440:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003448:	d10b      	bne.n	8003462 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b80      	cmp	r3, #128	@ 0x80
 800344e:	d919      	bls.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2ba0      	cmp	r3, #160	@ 0xa0
 8003454:	d902      	bls.n	800345c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003456:	2302      	movs	r3, #2
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	e013      	b.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800345c:	2301      	movs	r3, #1
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	e010      	b.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b80      	cmp	r3, #128	@ 0x80
 8003466:	d902      	bls.n	800346e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003468:	2303      	movs	r3, #3
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	e00a      	b.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b80      	cmp	r3, #128	@ 0x80
 8003472:	d102      	bne.n	800347a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003474:	2302      	movs	r3, #2
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	e004      	b.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b70      	cmp	r3, #112	@ 0x70
 800347e:	d101      	bne.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003480:	2301      	movs	r3, #1
 8003482:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003484:	4b0b      	ldr	r3, [pc, #44]	@ (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f023 0207 	bic.w	r2, r3, #7
 800348c:	4909      	ldr	r1, [pc, #36]	@ (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003494:	4b07      	ldr	r3, [pc, #28]	@ (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d001      	beq.n	80034a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40021000 	.word	0x40021000
 80034b4:	40022000 	.word	0x40022000

080034b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034c0:	2300      	movs	r3, #0
 80034c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034c4:	2300      	movs	r3, #0
 80034c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d031      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80034dc:	d01a      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80034de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80034e2:	d814      	bhi.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x56>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d009      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034ec:	d10f      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80034ee:	4b5d      	ldr	r3, [pc, #372]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	4a5c      	ldr	r2, [pc, #368]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034fa:	e00c      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3304      	adds	r3, #4
 8003500:	2100      	movs	r1, #0
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f9ce 	bl	80038a4 <RCCEx_PLLSAI1_Config>
 8003508:	4603      	mov	r3, r0
 800350a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800350c:	e003      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	74fb      	strb	r3, [r7, #19]
      break;
 8003512:	e000      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003514:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003516:	7cfb      	ldrb	r3, [r7, #19]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10b      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800351c:	4b51      	ldr	r3, [pc, #324]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003522:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352a:	494e      	ldr	r1, [pc, #312]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003532:	e001      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003534:	7cfb      	ldrb	r3, [r7, #19]
 8003536:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 809e 	beq.w	8003682 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003546:	2300      	movs	r3, #0
 8003548:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800354a:	4b46      	ldr	r3, [pc, #280]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800354c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800355a:	2300      	movs	r3, #0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00d      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003560:	4b40      	ldr	r3, [pc, #256]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003564:	4a3f      	ldr	r2, [pc, #252]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800356a:	6593      	str	r3, [r2, #88]	@ 0x58
 800356c:	4b3d      	ldr	r3, [pc, #244]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800356e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003578:	2301      	movs	r3, #1
 800357a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800357c:	4b3a      	ldr	r3, [pc, #232]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a39      	ldr	r2, [pc, #228]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003582:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003586:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003588:	f7fd ff98 	bl	80014bc <HAL_GetTick>
 800358c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800358e:	e009      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003590:	f7fd ff94 	bl	80014bc <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d902      	bls.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	74fb      	strb	r3, [r7, #19]
        break;
 80035a2:	e005      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035a4:	4b30      	ldr	r3, [pc, #192]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0ef      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80035b0:	7cfb      	ldrb	r3, [r7, #19]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d15a      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035b6:	4b2b      	ldr	r3, [pc, #172]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d01e      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d019      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035d2:	4b24      	ldr	r3, [pc, #144]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035de:	4b21      	ldr	r3, [pc, #132]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035fe:	4a19      	ldr	r2, [pc, #100]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d016      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003610:	f7fd ff54 	bl	80014bc <HAL_GetTick>
 8003614:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003616:	e00b      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003618:	f7fd ff50 	bl	80014bc <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003626:	4293      	cmp	r3, r2
 8003628:	d902      	bls.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	74fb      	strb	r3, [r7, #19]
            break;
 800362e:	e006      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003630:	4b0c      	ldr	r3, [pc, #48]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0ec      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800363e:	7cfb      	ldrb	r3, [r7, #19]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10b      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003644:	4b07      	ldr	r3, [pc, #28]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003652:	4904      	ldr	r1, [pc, #16]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800365a:	e009      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800365c:	7cfb      	ldrb	r3, [r7, #19]
 800365e:	74bb      	strb	r3, [r7, #18]
 8003660:	e006      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003662:	bf00      	nop
 8003664:	40021000 	.word	0x40021000
 8003668:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366c:	7cfb      	ldrb	r3, [r7, #19]
 800366e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003670:	7c7b      	ldrb	r3, [r7, #17]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d105      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003676:	4b8a      	ldr	r3, [pc, #552]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367a:	4a89      	ldr	r2, [pc, #548]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800367c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003680:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800368e:	4b84      	ldr	r3, [pc, #528]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003694:	f023 0203 	bic.w	r2, r3, #3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	4980      	ldr	r1, [pc, #512]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036b0:	4b7b      	ldr	r3, [pc, #492]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b6:	f023 020c 	bic.w	r2, r3, #12
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036be:	4978      	ldr	r1, [pc, #480]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036d2:	4b73      	ldr	r3, [pc, #460]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e0:	496f      	ldr	r1, [pc, #444]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00a      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036f4:	4b6a      	ldr	r3, [pc, #424]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036fa:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003702:	4967      	ldr	r1, [pc, #412]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003716:	4b62      	ldr	r3, [pc, #392]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003724:	495e      	ldr	r1, [pc, #376]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003738:	4b59      	ldr	r3, [pc, #356]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800373e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003746:	4956      	ldr	r1, [pc, #344]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800375a:	4b51      	ldr	r3, [pc, #324]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800375c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003760:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003768:	494d      	ldr	r1, [pc, #308]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d028      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800377c:	4b48      	ldr	r3, [pc, #288]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003782:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378a:	4945      	ldr	r1, [pc, #276]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003796:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800379a:	d106      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800379c:	4b40      	ldr	r3, [pc, #256]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	4a3f      	ldr	r2, [pc, #252]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037a6:	60d3      	str	r3, [r2, #12]
 80037a8:	e011      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037b2:	d10c      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3304      	adds	r3, #4
 80037b8:	2101      	movs	r1, #1
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 f872 	bl	80038a4 <RCCEx_PLLSAI1_Config>
 80037c0:	4603      	mov	r3, r0
 80037c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037c4:	7cfb      	ldrb	r3, [r7, #19]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80037ca:	7cfb      	ldrb	r3, [r7, #19]
 80037cc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d028      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037da:	4b31      	ldr	r3, [pc, #196]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e8:	492d      	ldr	r1, [pc, #180]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037f8:	d106      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037fa:	4b29      	ldr	r3, [pc, #164]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	4a28      	ldr	r2, [pc, #160]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003800:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003804:	60d3      	str	r3, [r2, #12]
 8003806:	e011      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003810:	d10c      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3304      	adds	r3, #4
 8003816:	2101      	movs	r1, #1
 8003818:	4618      	mov	r0, r3
 800381a:	f000 f843 	bl	80038a4 <RCCEx_PLLSAI1_Config>
 800381e:	4603      	mov	r3, r0
 8003820:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003822:	7cfb      	ldrb	r3, [r7, #19]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003828:	7cfb      	ldrb	r3, [r7, #19]
 800382a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01c      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003838:	4b19      	ldr	r3, [pc, #100]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800383a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800383e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003846:	4916      	ldr	r1, [pc, #88]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003848:	4313      	orrs	r3, r2
 800384a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003852:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003856:	d10c      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3304      	adds	r3, #4
 800385c:	2102      	movs	r1, #2
 800385e:	4618      	mov	r0, r3
 8003860:	f000 f820 	bl	80038a4 <RCCEx_PLLSAI1_Config>
 8003864:	4603      	mov	r3, r0
 8003866:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003868:	7cfb      	ldrb	r3, [r7, #19]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800386e:	7cfb      	ldrb	r3, [r7, #19]
 8003870:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800387e:	4b08      	ldr	r3, [pc, #32]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003884:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800388c:	4904      	ldr	r1, [pc, #16]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003894:	7cbb      	ldrb	r3, [r7, #18]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40021000 	.word	0x40021000

080038a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038b2:	4b74      	ldr	r3, [pc, #464]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d018      	beq.n	80038f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038be:	4b71      	ldr	r3, [pc, #452]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 0203 	and.w	r2, r3, #3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d10d      	bne.n	80038ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
       ||
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038d6:	4b6b      	ldr	r3, [pc, #428]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	091b      	lsrs	r3, r3, #4
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
       ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d047      	beq.n	800397a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
 80038ee:	e044      	b.n	800397a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d018      	beq.n	800392a <RCCEx_PLLSAI1_Config+0x86>
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d825      	bhi.n	8003948 <RCCEx_PLLSAI1_Config+0xa4>
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d002      	beq.n	8003906 <RCCEx_PLLSAI1_Config+0x62>
 8003900:	2b02      	cmp	r3, #2
 8003902:	d009      	beq.n	8003918 <RCCEx_PLLSAI1_Config+0x74>
 8003904:	e020      	b.n	8003948 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003906:	4b5f      	ldr	r3, [pc, #380]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d11d      	bne.n	800394e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003916:	e01a      	b.n	800394e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003918:	4b5a      	ldr	r3, [pc, #360]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003920:	2b00      	cmp	r3, #0
 8003922:	d116      	bne.n	8003952 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003928:	e013      	b.n	8003952 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800392a:	4b56      	ldr	r3, [pc, #344]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10f      	bne.n	8003956 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003936:	4b53      	ldr	r3, [pc, #332]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003946:	e006      	b.n	8003956 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	73fb      	strb	r3, [r7, #15]
      break;
 800394c:	e004      	b.n	8003958 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800394e:	bf00      	nop
 8003950:	e002      	b.n	8003958 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003952:	bf00      	nop
 8003954:	e000      	b.n	8003958 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003956:	bf00      	nop
    }

    if(status == HAL_OK)
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10d      	bne.n	800397a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800395e:	4b49      	ldr	r3, [pc, #292]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6819      	ldr	r1, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	3b01      	subs	r3, #1
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	430b      	orrs	r3, r1
 8003974:	4943      	ldr	r1, [pc, #268]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003976:	4313      	orrs	r3, r2
 8003978:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d17c      	bne.n	8003a7a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003980:	4b40      	ldr	r3, [pc, #256]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a3f      	ldr	r2, [pc, #252]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003986:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800398a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800398c:	f7fd fd96 	bl	80014bc <HAL_GetTick>
 8003990:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003992:	e009      	b.n	80039a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003994:	f7fd fd92 	bl	80014bc <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d902      	bls.n	80039a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	73fb      	strb	r3, [r7, #15]
        break;
 80039a6:	e005      	b.n	80039b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039a8:	4b36      	ldr	r3, [pc, #216]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1ef      	bne.n	8003994 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d15f      	bne.n	8003a7a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d110      	bne.n	80039e2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039c0:	4b30      	ldr	r3, [pc, #192]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80039c8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6892      	ldr	r2, [r2, #8]
 80039d0:	0211      	lsls	r1, r2, #8
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	68d2      	ldr	r2, [r2, #12]
 80039d6:	06d2      	lsls	r2, r2, #27
 80039d8:	430a      	orrs	r2, r1
 80039da:	492a      	ldr	r1, [pc, #168]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	610b      	str	r3, [r1, #16]
 80039e0:	e027      	b.n	8003a32 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d112      	bne.n	8003a0e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039e8:	4b26      	ldr	r3, [pc, #152]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80039f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6892      	ldr	r2, [r2, #8]
 80039f8:	0211      	lsls	r1, r2, #8
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6912      	ldr	r2, [r2, #16]
 80039fe:	0852      	lsrs	r2, r2, #1
 8003a00:	3a01      	subs	r2, #1
 8003a02:	0552      	lsls	r2, r2, #21
 8003a04:	430a      	orrs	r2, r1
 8003a06:	491f      	ldr	r1, [pc, #124]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	610b      	str	r3, [r1, #16]
 8003a0c:	e011      	b.n	8003a32 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a16:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6892      	ldr	r2, [r2, #8]
 8003a1e:	0211      	lsls	r1, r2, #8
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6952      	ldr	r2, [r2, #20]
 8003a24:	0852      	lsrs	r2, r2, #1
 8003a26:	3a01      	subs	r2, #1
 8003a28:	0652      	lsls	r2, r2, #25
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	4915      	ldr	r1, [pc, #84]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a32:	4b14      	ldr	r3, [pc, #80]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a13      	ldr	r2, [pc, #76]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a38:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a3c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3e:	f7fd fd3d 	bl	80014bc <HAL_GetTick>
 8003a42:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a44:	e009      	b.n	8003a5a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a46:	f7fd fd39 	bl	80014bc <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d902      	bls.n	8003a5a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	73fb      	strb	r3, [r7, #15]
          break;
 8003a58:	e005      	b.n	8003a66 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0ef      	beq.n	8003a46 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d106      	bne.n	8003a7a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a6c:	4b05      	ldr	r3, [pc, #20]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	4903      	ldr	r1, [pc, #12]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40021000 	.word	0x40021000

08003a88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e049      	b.n	8003b2e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d106      	bne.n	8003ab4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fd fb38 	bl	8001124 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	f000 f94a 	bl	8003d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b44:	2300      	movs	r3, #0
 8003b46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d101      	bne.n	8003b56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b52:	2302      	movs	r3, #2
 8003b54:	e0ff      	b.n	8003d56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b14      	cmp	r3, #20
 8003b62:	f200 80f0 	bhi.w	8003d46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003b66:	a201      	add	r2, pc, #4	@ (adr r2, 8003b6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6c:	08003bc1 	.word	0x08003bc1
 8003b70:	08003d47 	.word	0x08003d47
 8003b74:	08003d47 	.word	0x08003d47
 8003b78:	08003d47 	.word	0x08003d47
 8003b7c:	08003c01 	.word	0x08003c01
 8003b80:	08003d47 	.word	0x08003d47
 8003b84:	08003d47 	.word	0x08003d47
 8003b88:	08003d47 	.word	0x08003d47
 8003b8c:	08003c43 	.word	0x08003c43
 8003b90:	08003d47 	.word	0x08003d47
 8003b94:	08003d47 	.word	0x08003d47
 8003b98:	08003d47 	.word	0x08003d47
 8003b9c:	08003c83 	.word	0x08003c83
 8003ba0:	08003d47 	.word	0x08003d47
 8003ba4:	08003d47 	.word	0x08003d47
 8003ba8:	08003d47 	.word	0x08003d47
 8003bac:	08003cc5 	.word	0x08003cc5
 8003bb0:	08003d47 	.word	0x08003d47
 8003bb4:	08003d47 	.word	0x08003d47
 8003bb8:	08003d47 	.word	0x08003d47
 8003bbc:	08003d05 	.word	0x08003d05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 f93a 	bl	8003e40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0208 	orr.w	r2, r2, #8
 8003bda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0204 	bic.w	r2, r2, #4
 8003bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6999      	ldr	r1, [r3, #24]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	691a      	ldr	r2, [r3, #16]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	619a      	str	r2, [r3, #24]
      break;
 8003bfe:	e0a5      	b.n	8003d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68b9      	ldr	r1, [r7, #8]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 f996 	bl	8003f38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699a      	ldr	r2, [r3, #24]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6999      	ldr	r1, [r3, #24]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	021a      	lsls	r2, r3, #8
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	619a      	str	r2, [r3, #24]
      break;
 8003c40:	e084      	b.n	8003d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 f9ef 	bl	800402c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69da      	ldr	r2, [r3, #28]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 0208 	orr.w	r2, r2, #8
 8003c5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69da      	ldr	r2, [r3, #28]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0204 	bic.w	r2, r2, #4
 8003c6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69d9      	ldr	r1, [r3, #28]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	61da      	str	r2, [r3, #28]
      break;
 8003c80:	e064      	b.n	8003d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68b9      	ldr	r1, [r7, #8]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fa47 	bl	800411c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	69da      	ldr	r2, [r3, #28]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	69da      	ldr	r2, [r3, #28]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69d9      	ldr	r1, [r3, #28]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	021a      	lsls	r2, r3, #8
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	61da      	str	r2, [r3, #28]
      break;
 8003cc2:	e043      	b.n	8003d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fa84 	bl	80041d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0208 	orr.w	r2, r2, #8
 8003cde:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0204 	bic.w	r2, r2, #4
 8003cee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	691a      	ldr	r2, [r3, #16]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003d02:	e023      	b.n	8003d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68b9      	ldr	r1, [r7, #8]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fabc 	bl	8004288 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d1e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d2e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	021a      	lsls	r2, r3, #8
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003d44:	e002      	b.n	8003d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	75fb      	strb	r3, [r7, #23]
      break;
 8003d4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop

08003d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a30      	ldr	r2, [pc, #192]	@ (8003e34 <TIM_Base_SetConfig+0xd4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d003      	beq.n	8003d80 <TIM_Base_SetConfig+0x20>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d7e:	d108      	bne.n	8003d92 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a27      	ldr	r2, [pc, #156]	@ (8003e34 <TIM_Base_SetConfig+0xd4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00b      	beq.n	8003db2 <TIM_Base_SetConfig+0x52>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003da0:	d007      	beq.n	8003db2 <TIM_Base_SetConfig+0x52>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a24      	ldr	r2, [pc, #144]	@ (8003e38 <TIM_Base_SetConfig+0xd8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d003      	beq.n	8003db2 <TIM_Base_SetConfig+0x52>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a23      	ldr	r2, [pc, #140]	@ (8003e3c <TIM_Base_SetConfig+0xdc>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d108      	bne.n	8003dc4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a12      	ldr	r2, [pc, #72]	@ (8003e34 <TIM_Base_SetConfig+0xd4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d007      	beq.n	8003e00 <TIM_Base_SetConfig+0xa0>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a11      	ldr	r2, [pc, #68]	@ (8003e38 <TIM_Base_SetConfig+0xd8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d003      	beq.n	8003e00 <TIM_Base_SetConfig+0xa0>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a10      	ldr	r2, [pc, #64]	@ (8003e3c <TIM_Base_SetConfig+0xdc>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d103      	bne.n	8003e08 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d105      	bne.n	8003e26 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f023 0201 	bic.w	r2, r3, #1
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	611a      	str	r2, [r3, #16]
  }
}
 8003e26:	bf00      	nop
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	40012c00 	.word	0x40012c00
 8003e38:	40014000 	.word	0x40014000
 8003e3c:	40014400 	.word	0x40014400

08003e40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	f023 0201 	bic.w	r2, r3, #1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f023 0303 	bic.w	r3, r3, #3
 8003e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f023 0302 	bic.w	r3, r3, #2
 8003e8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a24      	ldr	r2, [pc, #144]	@ (8003f2c <TIM_OC1_SetConfig+0xec>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d007      	beq.n	8003eb0 <TIM_OC1_SetConfig+0x70>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a23      	ldr	r2, [pc, #140]	@ (8003f30 <TIM_OC1_SetConfig+0xf0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d003      	beq.n	8003eb0 <TIM_OC1_SetConfig+0x70>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a22      	ldr	r2, [pc, #136]	@ (8003f34 <TIM_OC1_SetConfig+0xf4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d10c      	bne.n	8003eca <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f023 0308 	bic.w	r3, r3, #8
 8003eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f023 0304 	bic.w	r3, r3, #4
 8003ec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a17      	ldr	r2, [pc, #92]	@ (8003f2c <TIM_OC1_SetConfig+0xec>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d007      	beq.n	8003ee2 <TIM_OC1_SetConfig+0xa2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a16      	ldr	r2, [pc, #88]	@ (8003f30 <TIM_OC1_SetConfig+0xf0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d003      	beq.n	8003ee2 <TIM_OC1_SetConfig+0xa2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a15      	ldr	r2, [pc, #84]	@ (8003f34 <TIM_OC1_SetConfig+0xf4>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d111      	bne.n	8003f06 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	621a      	str	r2, [r3, #32]
}
 8003f20:	bf00      	nop
 8003f22:	371c      	adds	r7, #28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	40012c00 	.word	0x40012c00
 8003f30:	40014000 	.word	0x40014000
 8003f34:	40014400 	.word	0x40014400

08003f38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	f023 0210 	bic.w	r2, r3, #16
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	021b      	lsls	r3, r3, #8
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f023 0320 	bic.w	r3, r3, #32
 8003f86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a22      	ldr	r2, [pc, #136]	@ (8004020 <TIM_OC2_SetConfig+0xe8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d10d      	bne.n	8003fb8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a19      	ldr	r2, [pc, #100]	@ (8004020 <TIM_OC2_SetConfig+0xe8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d007      	beq.n	8003fd0 <TIM_OC2_SetConfig+0x98>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a18      	ldr	r2, [pc, #96]	@ (8004024 <TIM_OC2_SetConfig+0xec>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d003      	beq.n	8003fd0 <TIM_OC2_SetConfig+0x98>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a17      	ldr	r2, [pc, #92]	@ (8004028 <TIM_OC2_SetConfig+0xf0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d113      	bne.n	8003ff8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	621a      	str	r2, [r3, #32]
}
 8004012:	bf00      	nop
 8004014:	371c      	adds	r7, #28
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40012c00 	.word	0x40012c00
 8004024:	40014000 	.word	0x40014000
 8004028:	40014400 	.word	0x40014400

0800402c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800405a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800405e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0303 	bic.w	r3, r3, #3
 8004066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	021b      	lsls	r3, r3, #8
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a21      	ldr	r2, [pc, #132]	@ (8004110 <TIM_OC3_SetConfig+0xe4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d10d      	bne.n	80040aa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004094:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	021b      	lsls	r3, r3, #8
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	4313      	orrs	r3, r2
 80040a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a18      	ldr	r2, [pc, #96]	@ (8004110 <TIM_OC3_SetConfig+0xe4>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d007      	beq.n	80040c2 <TIM_OC3_SetConfig+0x96>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a17      	ldr	r2, [pc, #92]	@ (8004114 <TIM_OC3_SetConfig+0xe8>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d003      	beq.n	80040c2 <TIM_OC3_SetConfig+0x96>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a16      	ldr	r2, [pc, #88]	@ (8004118 <TIM_OC3_SetConfig+0xec>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d113      	bne.n	80040ea <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	621a      	str	r2, [r3, #32]
}
 8004104:	bf00      	nop
 8004106:	371c      	adds	r7, #28
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	40012c00 	.word	0x40012c00
 8004114:	40014000 	.word	0x40014000
 8004118:	40014400 	.word	0x40014400

0800411c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800414a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800414e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	021b      	lsls	r3, r3, #8
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4313      	orrs	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800416a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	031b      	lsls	r3, r3, #12
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a14      	ldr	r2, [pc, #80]	@ (80041cc <TIM_OC4_SetConfig+0xb0>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d007      	beq.n	8004190 <TIM_OC4_SetConfig+0x74>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a13      	ldr	r2, [pc, #76]	@ (80041d0 <TIM_OC4_SetConfig+0xb4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d003      	beq.n	8004190 <TIM_OC4_SetConfig+0x74>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a12      	ldr	r2, [pc, #72]	@ (80041d4 <TIM_OC4_SetConfig+0xb8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d109      	bne.n	80041a4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004196:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	019b      	lsls	r3, r3, #6
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40012c00 	.word	0x40012c00
 80041d0:	40014000 	.word	0x40014000
 80041d4:	40014400 	.word	0x40014400

080041d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800420a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800421c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	041b      	lsls	r3, r3, #16
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a13      	ldr	r2, [pc, #76]	@ (800427c <TIM_OC5_SetConfig+0xa4>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d007      	beq.n	8004242 <TIM_OC5_SetConfig+0x6a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a12      	ldr	r2, [pc, #72]	@ (8004280 <TIM_OC5_SetConfig+0xa8>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d003      	beq.n	8004242 <TIM_OC5_SetConfig+0x6a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a11      	ldr	r2, [pc, #68]	@ (8004284 <TIM_OC5_SetConfig+0xac>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d109      	bne.n	8004256 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004248:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	021b      	lsls	r3, r3, #8
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	4313      	orrs	r3, r2
 8004254:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	621a      	str	r2, [r3, #32]
}
 8004270:	bf00      	nop
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	40012c00 	.word	0x40012c00
 8004280:	40014000 	.word	0x40014000
 8004284:	40014400 	.word	0x40014400

08004288 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	021b      	lsls	r3, r3, #8
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80042ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	051b      	lsls	r3, r3, #20
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	4313      	orrs	r3, r2
 80042da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a14      	ldr	r2, [pc, #80]	@ (8004330 <TIM_OC6_SetConfig+0xa8>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d007      	beq.n	80042f4 <TIM_OC6_SetConfig+0x6c>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a13      	ldr	r2, [pc, #76]	@ (8004334 <TIM_OC6_SetConfig+0xac>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d003      	beq.n	80042f4 <TIM_OC6_SetConfig+0x6c>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a12      	ldr	r2, [pc, #72]	@ (8004338 <TIM_OC6_SetConfig+0xb0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d109      	bne.n	8004308 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	029b      	lsls	r3, r3, #10
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	621a      	str	r2, [r3, #32]
}
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40014000 	.word	0x40014000
 8004338:	40014400 	.word	0x40014400

0800433c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004350:	2302      	movs	r3, #2
 8004352:	e04f      	b.n	80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a21      	ldr	r2, [pc, #132]	@ (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d108      	bne.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004384:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004396:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	4313      	orrs	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a14      	ldr	r2, [pc, #80]	@ (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d009      	beq.n	80043c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043bc:	d004      	beq.n	80043c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a10      	ldr	r2, [pc, #64]	@ (8004404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d10c      	bne.n	80043e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	40012c00 	.word	0x40012c00
 8004404:	40014000 	.word	0x40014000

08004408 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004420:	2302      	movs	r3, #2
 8004422:	e060      	b.n	80044e6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	4313      	orrs	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4313      	orrs	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	041b      	lsls	r3, r3, #16
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a14      	ldr	r2, [pc, #80]	@ (80044f4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d115      	bne.n	80044d4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b2:	051b      	lsls	r3, r3, #20
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40012c00 	.word	0x40012c00

080044f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e040      	b.n	800458c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fc fe5a 	bl	80011d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2224      	movs	r2, #36	@ 0x24
 8004524:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0201 	bic.w	r2, r2, #1
 8004534:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fba6 	bl	8004c90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f977 	bl	8004838 <UART_SetConfig>
 800454a:	4603      	mov	r3, r0
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e01b      	b.n	800458c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004562:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004572:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0201 	orr.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fc25 	bl	8004dd4 <UART_CheckIdleState>
 800458a:	4603      	mov	r3, r0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08a      	sub	sp, #40	@ 0x28
 8004598:	af02      	add	r7, sp, #8
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	4613      	mov	r3, r2
 80045a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045a8:	2b20      	cmp	r3, #32
 80045aa:	d177      	bne.n	800469c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <HAL_UART_Transmit+0x24>
 80045b2:	88fb      	ldrh	r3, [r7, #6]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e070      	b.n	800469e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2221      	movs	r2, #33	@ 0x21
 80045c8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ca:	f7fc ff77 	bl	80014bc <HAL_GetTick>
 80045ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	88fa      	ldrh	r2, [r7, #6]
 80045d4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	88fa      	ldrh	r2, [r7, #6]
 80045dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045e8:	d108      	bne.n	80045fc <HAL_UART_Transmit+0x68>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d104      	bne.n	80045fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	61bb      	str	r3, [r7, #24]
 80045fa:	e003      	b.n	8004604 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004600:	2300      	movs	r3, #0
 8004602:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004604:	e02f      	b.n	8004666 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2200      	movs	r2, #0
 800460e:	2180      	movs	r1, #128	@ 0x80
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 fc87 	bl	8004f24 <UART_WaitOnFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d004      	beq.n	8004626 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2220      	movs	r2, #32
 8004620:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e03b      	b.n	800469e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10b      	bne.n	8004644 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	881a      	ldrh	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004638:	b292      	uxth	r2, r2
 800463a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	3302      	adds	r3, #2
 8004640:	61bb      	str	r3, [r7, #24]
 8004642:	e007      	b.n	8004654 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	781a      	ldrb	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	3301      	adds	r3, #1
 8004652:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800465a:	b29b      	uxth	r3, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1c9      	bne.n	8004606 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2200      	movs	r2, #0
 800467a:	2140      	movs	r1, #64	@ 0x40
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 fc51 	bl	8004f24 <UART_WaitOnFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d004      	beq.n	8004692 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e005      	b.n	800469e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2220      	movs	r2, #32
 8004696:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	e000      	b.n	800469e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800469c:	2302      	movs	r3, #2
  }
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3720      	adds	r7, #32
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b08a      	sub	sp, #40	@ 0x28
 80046aa:	af02      	add	r7, sp, #8
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	603b      	str	r3, [r7, #0]
 80046b2:	4613      	mov	r3, r2
 80046b4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046bc:	2b20      	cmp	r3, #32
 80046be:	f040 80b6 	bne.w	800482e <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <HAL_UART_Receive+0x28>
 80046c8:	88fb      	ldrh	r3, [r7, #6]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e0ae      	b.n	8004830 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2222      	movs	r2, #34	@ 0x22
 80046de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046e8:	f7fc fee8 	bl	80014bc <HAL_GetTick>
 80046ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	88fa      	ldrh	r2, [r7, #6]
 80046f2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	88fa      	ldrh	r2, [r7, #6]
 80046fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004706:	d10e      	bne.n	8004726 <HAL_UART_Receive+0x80>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d105      	bne.n	800471c <HAL_UART_Receive+0x76>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004716:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800471a:	e02d      	b.n	8004778 <HAL_UART_Receive+0xd2>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	22ff      	movs	r2, #255	@ 0xff
 8004720:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004724:	e028      	b.n	8004778 <HAL_UART_Receive+0xd2>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10d      	bne.n	800474a <HAL_UART_Receive+0xa4>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d104      	bne.n	8004740 <HAL_UART_Receive+0x9a>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	22ff      	movs	r2, #255	@ 0xff
 800473a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800473e:	e01b      	b.n	8004778 <HAL_UART_Receive+0xd2>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	227f      	movs	r2, #127	@ 0x7f
 8004744:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004748:	e016      	b.n	8004778 <HAL_UART_Receive+0xd2>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004752:	d10d      	bne.n	8004770 <HAL_UART_Receive+0xca>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d104      	bne.n	8004766 <HAL_UART_Receive+0xc0>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	227f      	movs	r2, #127	@ 0x7f
 8004760:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004764:	e008      	b.n	8004778 <HAL_UART_Receive+0xd2>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	223f      	movs	r2, #63	@ 0x3f
 800476a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800476e:	e003      	b.n	8004778 <HAL_UART_Receive+0xd2>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800477e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004788:	d108      	bne.n	800479c <HAL_UART_Receive+0xf6>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d104      	bne.n	800479c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004792:	2300      	movs	r3, #0
 8004794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	e003      	b.n	80047a4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80047a4:	e037      	b.n	8004816 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2200      	movs	r2, #0
 80047ae:	2120      	movs	r1, #32
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 fbb7 	bl	8004f24 <UART_WaitOnFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d005      	beq.n	80047c8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e033      	b.n	8004830 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10c      	bne.n	80047e8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	8a7b      	ldrh	r3, [r7, #18]
 80047d8:	4013      	ands	r3, r2
 80047da:	b29a      	uxth	r2, r3
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	3302      	adds	r3, #2
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	e00d      	b.n	8004804 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	8a7b      	ldrh	r3, [r7, #18]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	4013      	ands	r3, r2
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	3301      	adds	r3, #1
 8004802:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800480a:	b29b      	uxth	r3, r3
 800480c:	3b01      	subs	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1c1      	bne.n	80047a6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2220      	movs	r2, #32
 8004826:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800482a:	2300      	movs	r3, #0
 800482c:	e000      	b.n	8004830 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800482e:	2302      	movs	r3, #2
  }
}
 8004830:	4618      	mov	r0, r3
 8004832:	3720      	adds	r7, #32
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800483c:	b08a      	sub	sp, #40	@ 0x28
 800483e:	af00      	add	r7, sp, #0
 8004840:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004842:	2300      	movs	r3, #0
 8004844:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	431a      	orrs	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	431a      	orrs	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	4313      	orrs	r3, r2
 800485e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	4bb4      	ldr	r3, [pc, #720]	@ (8004b38 <UART_SetConfig+0x300>)
 8004868:	4013      	ands	r3, r2
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004870:	430b      	orrs	r3, r1
 8004872:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4aa9      	ldr	r2, [pc, #676]	@ (8004b3c <UART_SetConfig+0x304>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d004      	beq.n	80048a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048a0:	4313      	orrs	r3, r2
 80048a2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048b4:	430a      	orrs	r2, r1
 80048b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4aa0      	ldr	r2, [pc, #640]	@ (8004b40 <UART_SetConfig+0x308>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d126      	bne.n	8004910 <UART_SetConfig+0xd8>
 80048c2:	4ba0      	ldr	r3, [pc, #640]	@ (8004b44 <UART_SetConfig+0x30c>)
 80048c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c8:	f003 0303 	and.w	r3, r3, #3
 80048cc:	2b03      	cmp	r3, #3
 80048ce:	d81b      	bhi.n	8004908 <UART_SetConfig+0xd0>
 80048d0:	a201      	add	r2, pc, #4	@ (adr r2, 80048d8 <UART_SetConfig+0xa0>)
 80048d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d6:	bf00      	nop
 80048d8:	080048e9 	.word	0x080048e9
 80048dc:	080048f9 	.word	0x080048f9
 80048e0:	080048f1 	.word	0x080048f1
 80048e4:	08004901 	.word	0x08004901
 80048e8:	2301      	movs	r3, #1
 80048ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ee:	e080      	b.n	80049f2 <UART_SetConfig+0x1ba>
 80048f0:	2302      	movs	r3, #2
 80048f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048f6:	e07c      	b.n	80049f2 <UART_SetConfig+0x1ba>
 80048f8:	2304      	movs	r3, #4
 80048fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048fe:	e078      	b.n	80049f2 <UART_SetConfig+0x1ba>
 8004900:	2308      	movs	r3, #8
 8004902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004906:	e074      	b.n	80049f2 <UART_SetConfig+0x1ba>
 8004908:	2310      	movs	r3, #16
 800490a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800490e:	e070      	b.n	80049f2 <UART_SetConfig+0x1ba>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a8c      	ldr	r2, [pc, #560]	@ (8004b48 <UART_SetConfig+0x310>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d138      	bne.n	800498c <UART_SetConfig+0x154>
 800491a:	4b8a      	ldr	r3, [pc, #552]	@ (8004b44 <UART_SetConfig+0x30c>)
 800491c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004920:	f003 030c 	and.w	r3, r3, #12
 8004924:	2b0c      	cmp	r3, #12
 8004926:	d82d      	bhi.n	8004984 <UART_SetConfig+0x14c>
 8004928:	a201      	add	r2, pc, #4	@ (adr r2, 8004930 <UART_SetConfig+0xf8>)
 800492a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492e:	bf00      	nop
 8004930:	08004965 	.word	0x08004965
 8004934:	08004985 	.word	0x08004985
 8004938:	08004985 	.word	0x08004985
 800493c:	08004985 	.word	0x08004985
 8004940:	08004975 	.word	0x08004975
 8004944:	08004985 	.word	0x08004985
 8004948:	08004985 	.word	0x08004985
 800494c:	08004985 	.word	0x08004985
 8004950:	0800496d 	.word	0x0800496d
 8004954:	08004985 	.word	0x08004985
 8004958:	08004985 	.word	0x08004985
 800495c:	08004985 	.word	0x08004985
 8004960:	0800497d 	.word	0x0800497d
 8004964:	2300      	movs	r3, #0
 8004966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800496a:	e042      	b.n	80049f2 <UART_SetConfig+0x1ba>
 800496c:	2302      	movs	r3, #2
 800496e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004972:	e03e      	b.n	80049f2 <UART_SetConfig+0x1ba>
 8004974:	2304      	movs	r3, #4
 8004976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800497a:	e03a      	b.n	80049f2 <UART_SetConfig+0x1ba>
 800497c:	2308      	movs	r3, #8
 800497e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004982:	e036      	b.n	80049f2 <UART_SetConfig+0x1ba>
 8004984:	2310      	movs	r3, #16
 8004986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800498a:	e032      	b.n	80049f2 <UART_SetConfig+0x1ba>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a6a      	ldr	r2, [pc, #424]	@ (8004b3c <UART_SetConfig+0x304>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d12a      	bne.n	80049ec <UART_SetConfig+0x1b4>
 8004996:	4b6b      	ldr	r3, [pc, #428]	@ (8004b44 <UART_SetConfig+0x30c>)
 8004998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800499c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80049a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049a4:	d01a      	beq.n	80049dc <UART_SetConfig+0x1a4>
 80049a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049aa:	d81b      	bhi.n	80049e4 <UART_SetConfig+0x1ac>
 80049ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049b0:	d00c      	beq.n	80049cc <UART_SetConfig+0x194>
 80049b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049b6:	d815      	bhi.n	80049e4 <UART_SetConfig+0x1ac>
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <UART_SetConfig+0x18c>
 80049bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c0:	d008      	beq.n	80049d4 <UART_SetConfig+0x19c>
 80049c2:	e00f      	b.n	80049e4 <UART_SetConfig+0x1ac>
 80049c4:	2300      	movs	r3, #0
 80049c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ca:	e012      	b.n	80049f2 <UART_SetConfig+0x1ba>
 80049cc:	2302      	movs	r3, #2
 80049ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049d2:	e00e      	b.n	80049f2 <UART_SetConfig+0x1ba>
 80049d4:	2304      	movs	r3, #4
 80049d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049da:	e00a      	b.n	80049f2 <UART_SetConfig+0x1ba>
 80049dc:	2308      	movs	r3, #8
 80049de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049e2:	e006      	b.n	80049f2 <UART_SetConfig+0x1ba>
 80049e4:	2310      	movs	r3, #16
 80049e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ea:	e002      	b.n	80049f2 <UART_SetConfig+0x1ba>
 80049ec:	2310      	movs	r3, #16
 80049ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a51      	ldr	r2, [pc, #324]	@ (8004b3c <UART_SetConfig+0x304>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d17a      	bne.n	8004af2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d824      	bhi.n	8004a4e <UART_SetConfig+0x216>
 8004a04:	a201      	add	r2, pc, #4	@ (adr r2, 8004a0c <UART_SetConfig+0x1d4>)
 8004a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0a:	bf00      	nop
 8004a0c:	08004a31 	.word	0x08004a31
 8004a10:	08004a4f 	.word	0x08004a4f
 8004a14:	08004a39 	.word	0x08004a39
 8004a18:	08004a4f 	.word	0x08004a4f
 8004a1c:	08004a3f 	.word	0x08004a3f
 8004a20:	08004a4f 	.word	0x08004a4f
 8004a24:	08004a4f 	.word	0x08004a4f
 8004a28:	08004a4f 	.word	0x08004a4f
 8004a2c:	08004a47 	.word	0x08004a47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a30:	f7fe fcb6 	bl	80033a0 <HAL_RCC_GetPCLK1Freq>
 8004a34:	61f8      	str	r0, [r7, #28]
        break;
 8004a36:	e010      	b.n	8004a5a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a38:	4b44      	ldr	r3, [pc, #272]	@ (8004b4c <UART_SetConfig+0x314>)
 8004a3a:	61fb      	str	r3, [r7, #28]
        break;
 8004a3c:	e00d      	b.n	8004a5a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a3e:	f7fe fc17 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 8004a42:	61f8      	str	r0, [r7, #28]
        break;
 8004a44:	e009      	b.n	8004a5a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a4a:	61fb      	str	r3, [r7, #28]
        break;
 8004a4c:	e005      	b.n	8004a5a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 8107 	beq.w	8004c70 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	4613      	mov	r3, r2
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	4413      	add	r3, r2
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d305      	bcc.n	8004a7e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a78:	69fa      	ldr	r2, [r7, #28]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d903      	bls.n	8004a86 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a84:	e0f4      	b.n	8004c70 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	461c      	mov	r4, r3
 8004a8c:	4615      	mov	r5, r2
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	022b      	lsls	r3, r5, #8
 8004a98:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004a9c:	0222      	lsls	r2, r4, #8
 8004a9e:	68f9      	ldr	r1, [r7, #12]
 8004aa0:	6849      	ldr	r1, [r1, #4]
 8004aa2:	0849      	lsrs	r1, r1, #1
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	4688      	mov	r8, r1
 8004aa8:	4681      	mov	r9, r0
 8004aaa:	eb12 0a08 	adds.w	sl, r2, r8
 8004aae:	eb43 0b09 	adc.w	fp, r3, r9
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	603b      	str	r3, [r7, #0]
 8004aba:	607a      	str	r2, [r7, #4]
 8004abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ac0:	4650      	mov	r0, sl
 8004ac2:	4659      	mov	r1, fp
 8004ac4:	f7fb fbec 	bl	80002a0 <__aeabi_uldivmod>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4613      	mov	r3, r2
 8004ace:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ad6:	d308      	bcc.n	8004aea <UART_SetConfig+0x2b2>
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ade:	d204      	bcs.n	8004aea <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	60da      	str	r2, [r3, #12]
 8004ae8:	e0c2      	b.n	8004c70 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004af0:	e0be      	b.n	8004c70 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004afa:	d16a      	bne.n	8004bd2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004afc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d834      	bhi.n	8004b6e <UART_SetConfig+0x336>
 8004b04:	a201      	add	r2, pc, #4	@ (adr r2, 8004b0c <UART_SetConfig+0x2d4>)
 8004b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0a:	bf00      	nop
 8004b0c:	08004b31 	.word	0x08004b31
 8004b10:	08004b51 	.word	0x08004b51
 8004b14:	08004b59 	.word	0x08004b59
 8004b18:	08004b6f 	.word	0x08004b6f
 8004b1c:	08004b5f 	.word	0x08004b5f
 8004b20:	08004b6f 	.word	0x08004b6f
 8004b24:	08004b6f 	.word	0x08004b6f
 8004b28:	08004b6f 	.word	0x08004b6f
 8004b2c:	08004b67 	.word	0x08004b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b30:	f7fe fc36 	bl	80033a0 <HAL_RCC_GetPCLK1Freq>
 8004b34:	61f8      	str	r0, [r7, #28]
        break;
 8004b36:	e020      	b.n	8004b7a <UART_SetConfig+0x342>
 8004b38:	efff69f3 	.word	0xefff69f3
 8004b3c:	40008000 	.word	0x40008000
 8004b40:	40013800 	.word	0x40013800
 8004b44:	40021000 	.word	0x40021000
 8004b48:	40004400 	.word	0x40004400
 8004b4c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b50:	f7fe fc3c 	bl	80033cc <HAL_RCC_GetPCLK2Freq>
 8004b54:	61f8      	str	r0, [r7, #28]
        break;
 8004b56:	e010      	b.n	8004b7a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b58:	4b4c      	ldr	r3, [pc, #304]	@ (8004c8c <UART_SetConfig+0x454>)
 8004b5a:	61fb      	str	r3, [r7, #28]
        break;
 8004b5c:	e00d      	b.n	8004b7a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b5e:	f7fe fb87 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 8004b62:	61f8      	str	r0, [r7, #28]
        break;
 8004b64:	e009      	b.n	8004b7a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b6a:	61fb      	str	r3, [r7, #28]
        break;
 8004b6c:	e005      	b.n	8004b7a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d077      	beq.n	8004c70 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	005a      	lsls	r2, r3, #1
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	085b      	lsrs	r3, r3, #1
 8004b8a:	441a      	add	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	2b0f      	cmp	r3, #15
 8004b9a:	d916      	bls.n	8004bca <UART_SetConfig+0x392>
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ba2:	d212      	bcs.n	8004bca <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	f023 030f 	bic.w	r3, r3, #15
 8004bac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	085b      	lsrs	r3, r3, #1
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	8afb      	ldrh	r3, [r7, #22]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	8afa      	ldrh	r2, [r7, #22]
 8004bc6:	60da      	str	r2, [r3, #12]
 8004bc8:	e052      	b.n	8004c70 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004bd0:	e04e      	b.n	8004c70 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bd2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004bd6:	2b08      	cmp	r3, #8
 8004bd8:	d827      	bhi.n	8004c2a <UART_SetConfig+0x3f2>
 8004bda:	a201      	add	r2, pc, #4	@ (adr r2, 8004be0 <UART_SetConfig+0x3a8>)
 8004bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be0:	08004c05 	.word	0x08004c05
 8004be4:	08004c0d 	.word	0x08004c0d
 8004be8:	08004c15 	.word	0x08004c15
 8004bec:	08004c2b 	.word	0x08004c2b
 8004bf0:	08004c1b 	.word	0x08004c1b
 8004bf4:	08004c2b 	.word	0x08004c2b
 8004bf8:	08004c2b 	.word	0x08004c2b
 8004bfc:	08004c2b 	.word	0x08004c2b
 8004c00:	08004c23 	.word	0x08004c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c04:	f7fe fbcc 	bl	80033a0 <HAL_RCC_GetPCLK1Freq>
 8004c08:	61f8      	str	r0, [r7, #28]
        break;
 8004c0a:	e014      	b.n	8004c36 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c0c:	f7fe fbde 	bl	80033cc <HAL_RCC_GetPCLK2Freq>
 8004c10:	61f8      	str	r0, [r7, #28]
        break;
 8004c12:	e010      	b.n	8004c36 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c14:	4b1d      	ldr	r3, [pc, #116]	@ (8004c8c <UART_SetConfig+0x454>)
 8004c16:	61fb      	str	r3, [r7, #28]
        break;
 8004c18:	e00d      	b.n	8004c36 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c1a:	f7fe fb29 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 8004c1e:	61f8      	str	r0, [r7, #28]
        break;
 8004c20:	e009      	b.n	8004c36 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c26:	61fb      	str	r3, [r7, #28]
        break;
 8004c28:	e005      	b.n	8004c36 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c34:	bf00      	nop
    }

    if (pclk != 0U)
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d019      	beq.n	8004c70 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	085a      	lsrs	r2, r3, #1
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	441a      	add	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2b0f      	cmp	r3, #15
 8004c54:	d909      	bls.n	8004c6a <UART_SetConfig+0x432>
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c5c:	d205      	bcs.n	8004c6a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60da      	str	r2, [r3, #12]
 8004c68:	e002      	b.n	8004c70 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004c7c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3728      	adds	r7, #40	@ 0x28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c8a:	bf00      	nop
 8004c8c:	00f42400 	.word	0x00f42400

08004c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9c:	f003 0308 	and.w	r3, r3, #8
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d02:	f003 0304 	and.w	r3, r3, #4
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01a      	beq.n	8004da6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d8e:	d10a      	bne.n	8004da6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	605a      	str	r2, [r3, #4]
  }
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b098      	sub	sp, #96	@ 0x60
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004de4:	f7fc fb6a 	bl	80014bc <HAL_GetTick>
 8004de8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0308 	and.w	r3, r3, #8
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d12e      	bne.n	8004e56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004df8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e00:	2200      	movs	r2, #0
 8004e02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f88c 	bl	8004f24 <UART_WaitOnFlagUntilTimeout>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d021      	beq.n	8004e56 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e1a:	e853 3f00 	ldrex	r3, [r3]
 8004e1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e26:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e30:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e32:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e38:	e841 2300 	strex	r3, r2, [r1]
 8004e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1e6      	bne.n	8004e12 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2220      	movs	r2, #32
 8004e48:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e062      	b.n	8004f1c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d149      	bne.n	8004ef8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f856 	bl	8004f24 <UART_WaitOnFlagUntilTimeout>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d03c      	beq.n	8004ef8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e86:	e853 3f00 	ldrex	r3, [r3]
 8004e8a:	623b      	str	r3, [r7, #32]
   return(result);
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ea2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ea4:	e841 2300 	strex	r3, r2, [r1]
 8004ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1e6      	bne.n	8004e7e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3308      	adds	r3, #8
 8004eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	e853 3f00 	ldrex	r3, [r3]
 8004ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 0301 	bic.w	r3, r3, #1
 8004ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3308      	adds	r3, #8
 8004ece:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ed0:	61fa      	str	r2, [r7, #28]
 8004ed2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed4:	69b9      	ldr	r1, [r7, #24]
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	e841 2300 	strex	r3, r2, [r1]
 8004edc:	617b      	str	r3, [r7, #20]
   return(result);
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1e5      	bne.n	8004eb0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e011      	b.n	8004f1c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2220      	movs	r2, #32
 8004efc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3758      	adds	r7, #88	@ 0x58
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	603b      	str	r3, [r7, #0]
 8004f30:	4613      	mov	r3, r2
 8004f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f34:	e04f      	b.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3c:	d04b      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f3e:	f7fc fabd 	bl	80014bc <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d302      	bcc.n	8004f54 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e04e      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0304 	and.w	r3, r3, #4
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d037      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2b80      	cmp	r3, #128	@ 0x80
 8004f6a:	d034      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b40      	cmp	r3, #64	@ 0x40
 8004f70:	d031      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	f003 0308 	and.w	r3, r3, #8
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d110      	bne.n	8004fa2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2208      	movs	r2, #8
 8004f86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 f838 	bl	8004ffe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2208      	movs	r2, #8
 8004f92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e029      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fb0:	d111      	bne.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004fba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 f81e 	bl	8004ffe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e00f      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69da      	ldr	r2, [r3, #28]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	bf0c      	ite	eq
 8004fe6:	2301      	moveq	r3, #1
 8004fe8:	2300      	movne	r3, #0
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	79fb      	ldrb	r3, [r7, #7]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d0a0      	beq.n	8004f36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b095      	sub	sp, #84	@ 0x54
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800500e:	e853 3f00 	ldrex	r3, [r3]
 8005012:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005016:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800501a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005024:	643b      	str	r3, [r7, #64]	@ 0x40
 8005026:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800502a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800502c:	e841 2300 	strex	r3, r2, [r1]
 8005030:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1e6      	bne.n	8005006 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3308      	adds	r3, #8
 800503e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	e853 3f00 	ldrex	r3, [r3]
 8005046:	61fb      	str	r3, [r7, #28]
   return(result);
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	f023 0301 	bic.w	r3, r3, #1
 800504e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3308      	adds	r3, #8
 8005056:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005058:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800505a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800505e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005060:	e841 2300 	strex	r3, r2, [r1]
 8005064:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1e5      	bne.n	8005038 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005070:	2b01      	cmp	r3, #1
 8005072:	d118      	bne.n	80050a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	60bb      	str	r3, [r7, #8]
   return(result);
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	f023 0310 	bic.w	r3, r3, #16
 8005088:	647b      	str	r3, [r7, #68]	@ 0x44
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005092:	61bb      	str	r3, [r7, #24]
 8005094:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005096:	6979      	ldr	r1, [r7, #20]
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	e841 2300 	strex	r3, r2, [r1]
 800509e:	613b      	str	r3, [r7, #16]
   return(result);
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1e6      	bne.n	8005074 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80050ba:	bf00      	nop
 80050bc:	3754      	adds	r7, #84	@ 0x54
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <atoi>:
 80050c6:	220a      	movs	r2, #10
 80050c8:	2100      	movs	r1, #0
 80050ca:	f000 b87b 	b.w	80051c4 <strtol>
	...

080050d0 <_strtol_l.isra.0>:
 80050d0:	2b24      	cmp	r3, #36	@ 0x24
 80050d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050d6:	4686      	mov	lr, r0
 80050d8:	4690      	mov	r8, r2
 80050da:	d801      	bhi.n	80050e0 <_strtol_l.isra.0+0x10>
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d106      	bne.n	80050ee <_strtol_l.isra.0+0x1e>
 80050e0:	f000 f8b6 	bl	8005250 <__errno>
 80050e4:	2316      	movs	r3, #22
 80050e6:	6003      	str	r3, [r0, #0]
 80050e8:	2000      	movs	r0, #0
 80050ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ee:	4834      	ldr	r0, [pc, #208]	@ (80051c0 <_strtol_l.isra.0+0xf0>)
 80050f0:	460d      	mov	r5, r1
 80050f2:	462a      	mov	r2, r5
 80050f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80050f8:	5d06      	ldrb	r6, [r0, r4]
 80050fa:	f016 0608 	ands.w	r6, r6, #8
 80050fe:	d1f8      	bne.n	80050f2 <_strtol_l.isra.0+0x22>
 8005100:	2c2d      	cmp	r4, #45	@ 0x2d
 8005102:	d110      	bne.n	8005126 <_strtol_l.isra.0+0x56>
 8005104:	782c      	ldrb	r4, [r5, #0]
 8005106:	2601      	movs	r6, #1
 8005108:	1c95      	adds	r5, r2, #2
 800510a:	f033 0210 	bics.w	r2, r3, #16
 800510e:	d115      	bne.n	800513c <_strtol_l.isra.0+0x6c>
 8005110:	2c30      	cmp	r4, #48	@ 0x30
 8005112:	d10d      	bne.n	8005130 <_strtol_l.isra.0+0x60>
 8005114:	782a      	ldrb	r2, [r5, #0]
 8005116:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800511a:	2a58      	cmp	r2, #88	@ 0x58
 800511c:	d108      	bne.n	8005130 <_strtol_l.isra.0+0x60>
 800511e:	786c      	ldrb	r4, [r5, #1]
 8005120:	3502      	adds	r5, #2
 8005122:	2310      	movs	r3, #16
 8005124:	e00a      	b.n	800513c <_strtol_l.isra.0+0x6c>
 8005126:	2c2b      	cmp	r4, #43	@ 0x2b
 8005128:	bf04      	itt	eq
 800512a:	782c      	ldrbeq	r4, [r5, #0]
 800512c:	1c95      	addeq	r5, r2, #2
 800512e:	e7ec      	b.n	800510a <_strtol_l.isra.0+0x3a>
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1f6      	bne.n	8005122 <_strtol_l.isra.0+0x52>
 8005134:	2c30      	cmp	r4, #48	@ 0x30
 8005136:	bf14      	ite	ne
 8005138:	230a      	movne	r3, #10
 800513a:	2308      	moveq	r3, #8
 800513c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005140:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005144:	2200      	movs	r2, #0
 8005146:	fbbc f9f3 	udiv	r9, ip, r3
 800514a:	4610      	mov	r0, r2
 800514c:	fb03 ca19 	mls	sl, r3, r9, ip
 8005150:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005154:	2f09      	cmp	r7, #9
 8005156:	d80f      	bhi.n	8005178 <_strtol_l.isra.0+0xa8>
 8005158:	463c      	mov	r4, r7
 800515a:	42a3      	cmp	r3, r4
 800515c:	dd1b      	ble.n	8005196 <_strtol_l.isra.0+0xc6>
 800515e:	1c57      	adds	r7, r2, #1
 8005160:	d007      	beq.n	8005172 <_strtol_l.isra.0+0xa2>
 8005162:	4581      	cmp	r9, r0
 8005164:	d314      	bcc.n	8005190 <_strtol_l.isra.0+0xc0>
 8005166:	d101      	bne.n	800516c <_strtol_l.isra.0+0x9c>
 8005168:	45a2      	cmp	sl, r4
 800516a:	db11      	blt.n	8005190 <_strtol_l.isra.0+0xc0>
 800516c:	fb00 4003 	mla	r0, r0, r3, r4
 8005170:	2201      	movs	r2, #1
 8005172:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005176:	e7eb      	b.n	8005150 <_strtol_l.isra.0+0x80>
 8005178:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800517c:	2f19      	cmp	r7, #25
 800517e:	d801      	bhi.n	8005184 <_strtol_l.isra.0+0xb4>
 8005180:	3c37      	subs	r4, #55	@ 0x37
 8005182:	e7ea      	b.n	800515a <_strtol_l.isra.0+0x8a>
 8005184:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005188:	2f19      	cmp	r7, #25
 800518a:	d804      	bhi.n	8005196 <_strtol_l.isra.0+0xc6>
 800518c:	3c57      	subs	r4, #87	@ 0x57
 800518e:	e7e4      	b.n	800515a <_strtol_l.isra.0+0x8a>
 8005190:	f04f 32ff 	mov.w	r2, #4294967295
 8005194:	e7ed      	b.n	8005172 <_strtol_l.isra.0+0xa2>
 8005196:	1c53      	adds	r3, r2, #1
 8005198:	d108      	bne.n	80051ac <_strtol_l.isra.0+0xdc>
 800519a:	2322      	movs	r3, #34	@ 0x22
 800519c:	f8ce 3000 	str.w	r3, [lr]
 80051a0:	4660      	mov	r0, ip
 80051a2:	f1b8 0f00 	cmp.w	r8, #0
 80051a6:	d0a0      	beq.n	80050ea <_strtol_l.isra.0+0x1a>
 80051a8:	1e69      	subs	r1, r5, #1
 80051aa:	e006      	b.n	80051ba <_strtol_l.isra.0+0xea>
 80051ac:	b106      	cbz	r6, 80051b0 <_strtol_l.isra.0+0xe0>
 80051ae:	4240      	negs	r0, r0
 80051b0:	f1b8 0f00 	cmp.w	r8, #0
 80051b4:	d099      	beq.n	80050ea <_strtol_l.isra.0+0x1a>
 80051b6:	2a00      	cmp	r2, #0
 80051b8:	d1f6      	bne.n	80051a8 <_strtol_l.isra.0+0xd8>
 80051ba:	f8c8 1000 	str.w	r1, [r8]
 80051be:	e794      	b.n	80050ea <_strtol_l.isra.0+0x1a>
 80051c0:	08005cb5 	.word	0x08005cb5

080051c4 <strtol>:
 80051c4:	4613      	mov	r3, r2
 80051c6:	460a      	mov	r2, r1
 80051c8:	4601      	mov	r1, r0
 80051ca:	4802      	ldr	r0, [pc, #8]	@ (80051d4 <strtol+0x10>)
 80051cc:	6800      	ldr	r0, [r0, #0]
 80051ce:	f7ff bf7f 	b.w	80050d0 <_strtol_l.isra.0>
 80051d2:	bf00      	nop
 80051d4:	20000010 	.word	0x20000010

080051d8 <siprintf>:
 80051d8:	b40e      	push	{r1, r2, r3}
 80051da:	b510      	push	{r4, lr}
 80051dc:	b09d      	sub	sp, #116	@ 0x74
 80051de:	ab1f      	add	r3, sp, #124	@ 0x7c
 80051e0:	9002      	str	r0, [sp, #8]
 80051e2:	9006      	str	r0, [sp, #24]
 80051e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80051e8:	480a      	ldr	r0, [pc, #40]	@ (8005214 <siprintf+0x3c>)
 80051ea:	9107      	str	r1, [sp, #28]
 80051ec:	9104      	str	r1, [sp, #16]
 80051ee:	490a      	ldr	r1, [pc, #40]	@ (8005218 <siprintf+0x40>)
 80051f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80051f4:	9105      	str	r1, [sp, #20]
 80051f6:	2400      	movs	r4, #0
 80051f8:	a902      	add	r1, sp, #8
 80051fa:	6800      	ldr	r0, [r0, #0]
 80051fc:	9301      	str	r3, [sp, #4]
 80051fe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005200:	f000 f9a6 	bl	8005550 <_svfiprintf_r>
 8005204:	9b02      	ldr	r3, [sp, #8]
 8005206:	701c      	strb	r4, [r3, #0]
 8005208:	b01d      	add	sp, #116	@ 0x74
 800520a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800520e:	b003      	add	sp, #12
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	20000010 	.word	0x20000010
 8005218:	ffff0208 	.word	0xffff0208

0800521c <memset>:
 800521c:	4402      	add	r2, r0
 800521e:	4603      	mov	r3, r0
 8005220:	4293      	cmp	r3, r2
 8005222:	d100      	bne.n	8005226 <memset+0xa>
 8005224:	4770      	bx	lr
 8005226:	f803 1b01 	strb.w	r1, [r3], #1
 800522a:	e7f9      	b.n	8005220 <memset+0x4>

0800522c <strncmp>:
 800522c:	b510      	push	{r4, lr}
 800522e:	b16a      	cbz	r2, 800524c <strncmp+0x20>
 8005230:	3901      	subs	r1, #1
 8005232:	1884      	adds	r4, r0, r2
 8005234:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005238:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800523c:	429a      	cmp	r2, r3
 800523e:	d103      	bne.n	8005248 <strncmp+0x1c>
 8005240:	42a0      	cmp	r0, r4
 8005242:	d001      	beq.n	8005248 <strncmp+0x1c>
 8005244:	2a00      	cmp	r2, #0
 8005246:	d1f5      	bne.n	8005234 <strncmp+0x8>
 8005248:	1ad0      	subs	r0, r2, r3
 800524a:	bd10      	pop	{r4, pc}
 800524c:	4610      	mov	r0, r2
 800524e:	e7fc      	b.n	800524a <strncmp+0x1e>

08005250 <__errno>:
 8005250:	4b01      	ldr	r3, [pc, #4]	@ (8005258 <__errno+0x8>)
 8005252:	6818      	ldr	r0, [r3, #0]
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	20000010 	.word	0x20000010

0800525c <__libc_init_array>:
 800525c:	b570      	push	{r4, r5, r6, lr}
 800525e:	4d0d      	ldr	r5, [pc, #52]	@ (8005294 <__libc_init_array+0x38>)
 8005260:	4c0d      	ldr	r4, [pc, #52]	@ (8005298 <__libc_init_array+0x3c>)
 8005262:	1b64      	subs	r4, r4, r5
 8005264:	10a4      	asrs	r4, r4, #2
 8005266:	2600      	movs	r6, #0
 8005268:	42a6      	cmp	r6, r4
 800526a:	d109      	bne.n	8005280 <__libc_init_array+0x24>
 800526c:	4d0b      	ldr	r5, [pc, #44]	@ (800529c <__libc_init_array+0x40>)
 800526e:	4c0c      	ldr	r4, [pc, #48]	@ (80052a0 <__libc_init_array+0x44>)
 8005270:	f000 fc64 	bl	8005b3c <_init>
 8005274:	1b64      	subs	r4, r4, r5
 8005276:	10a4      	asrs	r4, r4, #2
 8005278:	2600      	movs	r6, #0
 800527a:	42a6      	cmp	r6, r4
 800527c:	d105      	bne.n	800528a <__libc_init_array+0x2e>
 800527e:	bd70      	pop	{r4, r5, r6, pc}
 8005280:	f855 3b04 	ldr.w	r3, [r5], #4
 8005284:	4798      	blx	r3
 8005286:	3601      	adds	r6, #1
 8005288:	e7ee      	b.n	8005268 <__libc_init_array+0xc>
 800528a:	f855 3b04 	ldr.w	r3, [r5], #4
 800528e:	4798      	blx	r3
 8005290:	3601      	adds	r6, #1
 8005292:	e7f2      	b.n	800527a <__libc_init_array+0x1e>
 8005294:	08005df0 	.word	0x08005df0
 8005298:	08005df0 	.word	0x08005df0
 800529c:	08005df0 	.word	0x08005df0
 80052a0:	08005df4 	.word	0x08005df4

080052a4 <__retarget_lock_acquire_recursive>:
 80052a4:	4770      	bx	lr

080052a6 <__retarget_lock_release_recursive>:
 80052a6:	4770      	bx	lr

080052a8 <_free_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	4605      	mov	r5, r0
 80052ac:	2900      	cmp	r1, #0
 80052ae:	d041      	beq.n	8005334 <_free_r+0x8c>
 80052b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052b4:	1f0c      	subs	r4, r1, #4
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	bfb8      	it	lt
 80052ba:	18e4      	addlt	r4, r4, r3
 80052bc:	f000 f8e0 	bl	8005480 <__malloc_lock>
 80052c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005338 <_free_r+0x90>)
 80052c2:	6813      	ldr	r3, [r2, #0]
 80052c4:	b933      	cbnz	r3, 80052d4 <_free_r+0x2c>
 80052c6:	6063      	str	r3, [r4, #4]
 80052c8:	6014      	str	r4, [r2, #0]
 80052ca:	4628      	mov	r0, r5
 80052cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052d0:	f000 b8dc 	b.w	800548c <__malloc_unlock>
 80052d4:	42a3      	cmp	r3, r4
 80052d6:	d908      	bls.n	80052ea <_free_r+0x42>
 80052d8:	6820      	ldr	r0, [r4, #0]
 80052da:	1821      	adds	r1, r4, r0
 80052dc:	428b      	cmp	r3, r1
 80052de:	bf01      	itttt	eq
 80052e0:	6819      	ldreq	r1, [r3, #0]
 80052e2:	685b      	ldreq	r3, [r3, #4]
 80052e4:	1809      	addeq	r1, r1, r0
 80052e6:	6021      	streq	r1, [r4, #0]
 80052e8:	e7ed      	b.n	80052c6 <_free_r+0x1e>
 80052ea:	461a      	mov	r2, r3
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	b10b      	cbz	r3, 80052f4 <_free_r+0x4c>
 80052f0:	42a3      	cmp	r3, r4
 80052f2:	d9fa      	bls.n	80052ea <_free_r+0x42>
 80052f4:	6811      	ldr	r1, [r2, #0]
 80052f6:	1850      	adds	r0, r2, r1
 80052f8:	42a0      	cmp	r0, r4
 80052fa:	d10b      	bne.n	8005314 <_free_r+0x6c>
 80052fc:	6820      	ldr	r0, [r4, #0]
 80052fe:	4401      	add	r1, r0
 8005300:	1850      	adds	r0, r2, r1
 8005302:	4283      	cmp	r3, r0
 8005304:	6011      	str	r1, [r2, #0]
 8005306:	d1e0      	bne.n	80052ca <_free_r+0x22>
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	6053      	str	r3, [r2, #4]
 800530e:	4408      	add	r0, r1
 8005310:	6010      	str	r0, [r2, #0]
 8005312:	e7da      	b.n	80052ca <_free_r+0x22>
 8005314:	d902      	bls.n	800531c <_free_r+0x74>
 8005316:	230c      	movs	r3, #12
 8005318:	602b      	str	r3, [r5, #0]
 800531a:	e7d6      	b.n	80052ca <_free_r+0x22>
 800531c:	6820      	ldr	r0, [r4, #0]
 800531e:	1821      	adds	r1, r4, r0
 8005320:	428b      	cmp	r3, r1
 8005322:	bf04      	itt	eq
 8005324:	6819      	ldreq	r1, [r3, #0]
 8005326:	685b      	ldreq	r3, [r3, #4]
 8005328:	6063      	str	r3, [r4, #4]
 800532a:	bf04      	itt	eq
 800532c:	1809      	addeq	r1, r1, r0
 800532e:	6021      	streq	r1, [r4, #0]
 8005330:	6054      	str	r4, [r2, #4]
 8005332:	e7ca      	b.n	80052ca <_free_r+0x22>
 8005334:	bd38      	pop	{r3, r4, r5, pc}
 8005336:	bf00      	nop
 8005338:	20000348 	.word	0x20000348

0800533c <sbrk_aligned>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	4e0f      	ldr	r6, [pc, #60]	@ (800537c <sbrk_aligned+0x40>)
 8005340:	460c      	mov	r4, r1
 8005342:	6831      	ldr	r1, [r6, #0]
 8005344:	4605      	mov	r5, r0
 8005346:	b911      	cbnz	r1, 800534e <sbrk_aligned+0x12>
 8005348:	f000 fba4 	bl	8005a94 <_sbrk_r>
 800534c:	6030      	str	r0, [r6, #0]
 800534e:	4621      	mov	r1, r4
 8005350:	4628      	mov	r0, r5
 8005352:	f000 fb9f 	bl	8005a94 <_sbrk_r>
 8005356:	1c43      	adds	r3, r0, #1
 8005358:	d103      	bne.n	8005362 <sbrk_aligned+0x26>
 800535a:	f04f 34ff 	mov.w	r4, #4294967295
 800535e:	4620      	mov	r0, r4
 8005360:	bd70      	pop	{r4, r5, r6, pc}
 8005362:	1cc4      	adds	r4, r0, #3
 8005364:	f024 0403 	bic.w	r4, r4, #3
 8005368:	42a0      	cmp	r0, r4
 800536a:	d0f8      	beq.n	800535e <sbrk_aligned+0x22>
 800536c:	1a21      	subs	r1, r4, r0
 800536e:	4628      	mov	r0, r5
 8005370:	f000 fb90 	bl	8005a94 <_sbrk_r>
 8005374:	3001      	adds	r0, #1
 8005376:	d1f2      	bne.n	800535e <sbrk_aligned+0x22>
 8005378:	e7ef      	b.n	800535a <sbrk_aligned+0x1e>
 800537a:	bf00      	nop
 800537c:	20000344 	.word	0x20000344

08005380 <_malloc_r>:
 8005380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005384:	1ccd      	adds	r5, r1, #3
 8005386:	f025 0503 	bic.w	r5, r5, #3
 800538a:	3508      	adds	r5, #8
 800538c:	2d0c      	cmp	r5, #12
 800538e:	bf38      	it	cc
 8005390:	250c      	movcc	r5, #12
 8005392:	2d00      	cmp	r5, #0
 8005394:	4606      	mov	r6, r0
 8005396:	db01      	blt.n	800539c <_malloc_r+0x1c>
 8005398:	42a9      	cmp	r1, r5
 800539a:	d904      	bls.n	80053a6 <_malloc_r+0x26>
 800539c:	230c      	movs	r3, #12
 800539e:	6033      	str	r3, [r6, #0]
 80053a0:	2000      	movs	r0, #0
 80053a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800547c <_malloc_r+0xfc>
 80053aa:	f000 f869 	bl	8005480 <__malloc_lock>
 80053ae:	f8d8 3000 	ldr.w	r3, [r8]
 80053b2:	461c      	mov	r4, r3
 80053b4:	bb44      	cbnz	r4, 8005408 <_malloc_r+0x88>
 80053b6:	4629      	mov	r1, r5
 80053b8:	4630      	mov	r0, r6
 80053ba:	f7ff ffbf 	bl	800533c <sbrk_aligned>
 80053be:	1c43      	adds	r3, r0, #1
 80053c0:	4604      	mov	r4, r0
 80053c2:	d158      	bne.n	8005476 <_malloc_r+0xf6>
 80053c4:	f8d8 4000 	ldr.w	r4, [r8]
 80053c8:	4627      	mov	r7, r4
 80053ca:	2f00      	cmp	r7, #0
 80053cc:	d143      	bne.n	8005456 <_malloc_r+0xd6>
 80053ce:	2c00      	cmp	r4, #0
 80053d0:	d04b      	beq.n	800546a <_malloc_r+0xea>
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	4639      	mov	r1, r7
 80053d6:	4630      	mov	r0, r6
 80053d8:	eb04 0903 	add.w	r9, r4, r3
 80053dc:	f000 fb5a 	bl	8005a94 <_sbrk_r>
 80053e0:	4581      	cmp	r9, r0
 80053e2:	d142      	bne.n	800546a <_malloc_r+0xea>
 80053e4:	6821      	ldr	r1, [r4, #0]
 80053e6:	1a6d      	subs	r5, r5, r1
 80053e8:	4629      	mov	r1, r5
 80053ea:	4630      	mov	r0, r6
 80053ec:	f7ff ffa6 	bl	800533c <sbrk_aligned>
 80053f0:	3001      	adds	r0, #1
 80053f2:	d03a      	beq.n	800546a <_malloc_r+0xea>
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	442b      	add	r3, r5
 80053f8:	6023      	str	r3, [r4, #0]
 80053fa:	f8d8 3000 	ldr.w	r3, [r8]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	bb62      	cbnz	r2, 800545c <_malloc_r+0xdc>
 8005402:	f8c8 7000 	str.w	r7, [r8]
 8005406:	e00f      	b.n	8005428 <_malloc_r+0xa8>
 8005408:	6822      	ldr	r2, [r4, #0]
 800540a:	1b52      	subs	r2, r2, r5
 800540c:	d420      	bmi.n	8005450 <_malloc_r+0xd0>
 800540e:	2a0b      	cmp	r2, #11
 8005410:	d917      	bls.n	8005442 <_malloc_r+0xc2>
 8005412:	1961      	adds	r1, r4, r5
 8005414:	42a3      	cmp	r3, r4
 8005416:	6025      	str	r5, [r4, #0]
 8005418:	bf18      	it	ne
 800541a:	6059      	strne	r1, [r3, #4]
 800541c:	6863      	ldr	r3, [r4, #4]
 800541e:	bf08      	it	eq
 8005420:	f8c8 1000 	streq.w	r1, [r8]
 8005424:	5162      	str	r2, [r4, r5]
 8005426:	604b      	str	r3, [r1, #4]
 8005428:	4630      	mov	r0, r6
 800542a:	f000 f82f 	bl	800548c <__malloc_unlock>
 800542e:	f104 000b 	add.w	r0, r4, #11
 8005432:	1d23      	adds	r3, r4, #4
 8005434:	f020 0007 	bic.w	r0, r0, #7
 8005438:	1ac2      	subs	r2, r0, r3
 800543a:	bf1c      	itt	ne
 800543c:	1a1b      	subne	r3, r3, r0
 800543e:	50a3      	strne	r3, [r4, r2]
 8005440:	e7af      	b.n	80053a2 <_malloc_r+0x22>
 8005442:	6862      	ldr	r2, [r4, #4]
 8005444:	42a3      	cmp	r3, r4
 8005446:	bf0c      	ite	eq
 8005448:	f8c8 2000 	streq.w	r2, [r8]
 800544c:	605a      	strne	r2, [r3, #4]
 800544e:	e7eb      	b.n	8005428 <_malloc_r+0xa8>
 8005450:	4623      	mov	r3, r4
 8005452:	6864      	ldr	r4, [r4, #4]
 8005454:	e7ae      	b.n	80053b4 <_malloc_r+0x34>
 8005456:	463c      	mov	r4, r7
 8005458:	687f      	ldr	r7, [r7, #4]
 800545a:	e7b6      	b.n	80053ca <_malloc_r+0x4a>
 800545c:	461a      	mov	r2, r3
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	42a3      	cmp	r3, r4
 8005462:	d1fb      	bne.n	800545c <_malloc_r+0xdc>
 8005464:	2300      	movs	r3, #0
 8005466:	6053      	str	r3, [r2, #4]
 8005468:	e7de      	b.n	8005428 <_malloc_r+0xa8>
 800546a:	230c      	movs	r3, #12
 800546c:	6033      	str	r3, [r6, #0]
 800546e:	4630      	mov	r0, r6
 8005470:	f000 f80c 	bl	800548c <__malloc_unlock>
 8005474:	e794      	b.n	80053a0 <_malloc_r+0x20>
 8005476:	6005      	str	r5, [r0, #0]
 8005478:	e7d6      	b.n	8005428 <_malloc_r+0xa8>
 800547a:	bf00      	nop
 800547c:	20000348 	.word	0x20000348

08005480 <__malloc_lock>:
 8005480:	4801      	ldr	r0, [pc, #4]	@ (8005488 <__malloc_lock+0x8>)
 8005482:	f7ff bf0f 	b.w	80052a4 <__retarget_lock_acquire_recursive>
 8005486:	bf00      	nop
 8005488:	20000340 	.word	0x20000340

0800548c <__malloc_unlock>:
 800548c:	4801      	ldr	r0, [pc, #4]	@ (8005494 <__malloc_unlock+0x8>)
 800548e:	f7ff bf0a 	b.w	80052a6 <__retarget_lock_release_recursive>
 8005492:	bf00      	nop
 8005494:	20000340 	.word	0x20000340

08005498 <__ssputs_r>:
 8005498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800549c:	688e      	ldr	r6, [r1, #8]
 800549e:	461f      	mov	r7, r3
 80054a0:	42be      	cmp	r6, r7
 80054a2:	680b      	ldr	r3, [r1, #0]
 80054a4:	4682      	mov	sl, r0
 80054a6:	460c      	mov	r4, r1
 80054a8:	4690      	mov	r8, r2
 80054aa:	d82d      	bhi.n	8005508 <__ssputs_r+0x70>
 80054ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80054b4:	d026      	beq.n	8005504 <__ssputs_r+0x6c>
 80054b6:	6965      	ldr	r5, [r4, #20]
 80054b8:	6909      	ldr	r1, [r1, #16]
 80054ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054be:	eba3 0901 	sub.w	r9, r3, r1
 80054c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054c6:	1c7b      	adds	r3, r7, #1
 80054c8:	444b      	add	r3, r9
 80054ca:	106d      	asrs	r5, r5, #1
 80054cc:	429d      	cmp	r5, r3
 80054ce:	bf38      	it	cc
 80054d0:	461d      	movcc	r5, r3
 80054d2:	0553      	lsls	r3, r2, #21
 80054d4:	d527      	bpl.n	8005526 <__ssputs_r+0x8e>
 80054d6:	4629      	mov	r1, r5
 80054d8:	f7ff ff52 	bl	8005380 <_malloc_r>
 80054dc:	4606      	mov	r6, r0
 80054de:	b360      	cbz	r0, 800553a <__ssputs_r+0xa2>
 80054e0:	6921      	ldr	r1, [r4, #16]
 80054e2:	464a      	mov	r2, r9
 80054e4:	f000 fae6 	bl	8005ab4 <memcpy>
 80054e8:	89a3      	ldrh	r3, [r4, #12]
 80054ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80054ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054f2:	81a3      	strh	r3, [r4, #12]
 80054f4:	6126      	str	r6, [r4, #16]
 80054f6:	6165      	str	r5, [r4, #20]
 80054f8:	444e      	add	r6, r9
 80054fa:	eba5 0509 	sub.w	r5, r5, r9
 80054fe:	6026      	str	r6, [r4, #0]
 8005500:	60a5      	str	r5, [r4, #8]
 8005502:	463e      	mov	r6, r7
 8005504:	42be      	cmp	r6, r7
 8005506:	d900      	bls.n	800550a <__ssputs_r+0x72>
 8005508:	463e      	mov	r6, r7
 800550a:	6820      	ldr	r0, [r4, #0]
 800550c:	4632      	mov	r2, r6
 800550e:	4641      	mov	r1, r8
 8005510:	f000 faa6 	bl	8005a60 <memmove>
 8005514:	68a3      	ldr	r3, [r4, #8]
 8005516:	1b9b      	subs	r3, r3, r6
 8005518:	60a3      	str	r3, [r4, #8]
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	4433      	add	r3, r6
 800551e:	6023      	str	r3, [r4, #0]
 8005520:	2000      	movs	r0, #0
 8005522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005526:	462a      	mov	r2, r5
 8005528:	f000 fad2 	bl	8005ad0 <_realloc_r>
 800552c:	4606      	mov	r6, r0
 800552e:	2800      	cmp	r0, #0
 8005530:	d1e0      	bne.n	80054f4 <__ssputs_r+0x5c>
 8005532:	6921      	ldr	r1, [r4, #16]
 8005534:	4650      	mov	r0, sl
 8005536:	f7ff feb7 	bl	80052a8 <_free_r>
 800553a:	230c      	movs	r3, #12
 800553c:	f8ca 3000 	str.w	r3, [sl]
 8005540:	89a3      	ldrh	r3, [r4, #12]
 8005542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005546:	81a3      	strh	r3, [r4, #12]
 8005548:	f04f 30ff 	mov.w	r0, #4294967295
 800554c:	e7e9      	b.n	8005522 <__ssputs_r+0x8a>
	...

08005550 <_svfiprintf_r>:
 8005550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005554:	4698      	mov	r8, r3
 8005556:	898b      	ldrh	r3, [r1, #12]
 8005558:	061b      	lsls	r3, r3, #24
 800555a:	b09d      	sub	sp, #116	@ 0x74
 800555c:	4607      	mov	r7, r0
 800555e:	460d      	mov	r5, r1
 8005560:	4614      	mov	r4, r2
 8005562:	d510      	bpl.n	8005586 <_svfiprintf_r+0x36>
 8005564:	690b      	ldr	r3, [r1, #16]
 8005566:	b973      	cbnz	r3, 8005586 <_svfiprintf_r+0x36>
 8005568:	2140      	movs	r1, #64	@ 0x40
 800556a:	f7ff ff09 	bl	8005380 <_malloc_r>
 800556e:	6028      	str	r0, [r5, #0]
 8005570:	6128      	str	r0, [r5, #16]
 8005572:	b930      	cbnz	r0, 8005582 <_svfiprintf_r+0x32>
 8005574:	230c      	movs	r3, #12
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	f04f 30ff 	mov.w	r0, #4294967295
 800557c:	b01d      	add	sp, #116	@ 0x74
 800557e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005582:	2340      	movs	r3, #64	@ 0x40
 8005584:	616b      	str	r3, [r5, #20]
 8005586:	2300      	movs	r3, #0
 8005588:	9309      	str	r3, [sp, #36]	@ 0x24
 800558a:	2320      	movs	r3, #32
 800558c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005590:	f8cd 800c 	str.w	r8, [sp, #12]
 8005594:	2330      	movs	r3, #48	@ 0x30
 8005596:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005734 <_svfiprintf_r+0x1e4>
 800559a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800559e:	f04f 0901 	mov.w	r9, #1
 80055a2:	4623      	mov	r3, r4
 80055a4:	469a      	mov	sl, r3
 80055a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055aa:	b10a      	cbz	r2, 80055b0 <_svfiprintf_r+0x60>
 80055ac:	2a25      	cmp	r2, #37	@ 0x25
 80055ae:	d1f9      	bne.n	80055a4 <_svfiprintf_r+0x54>
 80055b0:	ebba 0b04 	subs.w	fp, sl, r4
 80055b4:	d00b      	beq.n	80055ce <_svfiprintf_r+0x7e>
 80055b6:	465b      	mov	r3, fp
 80055b8:	4622      	mov	r2, r4
 80055ba:	4629      	mov	r1, r5
 80055bc:	4638      	mov	r0, r7
 80055be:	f7ff ff6b 	bl	8005498 <__ssputs_r>
 80055c2:	3001      	adds	r0, #1
 80055c4:	f000 80a7 	beq.w	8005716 <_svfiprintf_r+0x1c6>
 80055c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055ca:	445a      	add	r2, fp
 80055cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80055ce:	f89a 3000 	ldrb.w	r3, [sl]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 809f 	beq.w	8005716 <_svfiprintf_r+0x1c6>
 80055d8:	2300      	movs	r3, #0
 80055da:	f04f 32ff 	mov.w	r2, #4294967295
 80055de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055e2:	f10a 0a01 	add.w	sl, sl, #1
 80055e6:	9304      	str	r3, [sp, #16]
 80055e8:	9307      	str	r3, [sp, #28]
 80055ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80055f0:	4654      	mov	r4, sl
 80055f2:	2205      	movs	r2, #5
 80055f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055f8:	484e      	ldr	r0, [pc, #312]	@ (8005734 <_svfiprintf_r+0x1e4>)
 80055fa:	f7fa fe01 	bl	8000200 <memchr>
 80055fe:	9a04      	ldr	r2, [sp, #16]
 8005600:	b9d8      	cbnz	r0, 800563a <_svfiprintf_r+0xea>
 8005602:	06d0      	lsls	r0, r2, #27
 8005604:	bf44      	itt	mi
 8005606:	2320      	movmi	r3, #32
 8005608:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800560c:	0711      	lsls	r1, r2, #28
 800560e:	bf44      	itt	mi
 8005610:	232b      	movmi	r3, #43	@ 0x2b
 8005612:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005616:	f89a 3000 	ldrb.w	r3, [sl]
 800561a:	2b2a      	cmp	r3, #42	@ 0x2a
 800561c:	d015      	beq.n	800564a <_svfiprintf_r+0xfa>
 800561e:	9a07      	ldr	r2, [sp, #28]
 8005620:	4654      	mov	r4, sl
 8005622:	2000      	movs	r0, #0
 8005624:	f04f 0c0a 	mov.w	ip, #10
 8005628:	4621      	mov	r1, r4
 800562a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800562e:	3b30      	subs	r3, #48	@ 0x30
 8005630:	2b09      	cmp	r3, #9
 8005632:	d94b      	bls.n	80056cc <_svfiprintf_r+0x17c>
 8005634:	b1b0      	cbz	r0, 8005664 <_svfiprintf_r+0x114>
 8005636:	9207      	str	r2, [sp, #28]
 8005638:	e014      	b.n	8005664 <_svfiprintf_r+0x114>
 800563a:	eba0 0308 	sub.w	r3, r0, r8
 800563e:	fa09 f303 	lsl.w	r3, r9, r3
 8005642:	4313      	orrs	r3, r2
 8005644:	9304      	str	r3, [sp, #16]
 8005646:	46a2      	mov	sl, r4
 8005648:	e7d2      	b.n	80055f0 <_svfiprintf_r+0xa0>
 800564a:	9b03      	ldr	r3, [sp, #12]
 800564c:	1d19      	adds	r1, r3, #4
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	9103      	str	r1, [sp, #12]
 8005652:	2b00      	cmp	r3, #0
 8005654:	bfbb      	ittet	lt
 8005656:	425b      	neglt	r3, r3
 8005658:	f042 0202 	orrlt.w	r2, r2, #2
 800565c:	9307      	strge	r3, [sp, #28]
 800565e:	9307      	strlt	r3, [sp, #28]
 8005660:	bfb8      	it	lt
 8005662:	9204      	strlt	r2, [sp, #16]
 8005664:	7823      	ldrb	r3, [r4, #0]
 8005666:	2b2e      	cmp	r3, #46	@ 0x2e
 8005668:	d10a      	bne.n	8005680 <_svfiprintf_r+0x130>
 800566a:	7863      	ldrb	r3, [r4, #1]
 800566c:	2b2a      	cmp	r3, #42	@ 0x2a
 800566e:	d132      	bne.n	80056d6 <_svfiprintf_r+0x186>
 8005670:	9b03      	ldr	r3, [sp, #12]
 8005672:	1d1a      	adds	r2, r3, #4
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	9203      	str	r2, [sp, #12]
 8005678:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800567c:	3402      	adds	r4, #2
 800567e:	9305      	str	r3, [sp, #20]
 8005680:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005744 <_svfiprintf_r+0x1f4>
 8005684:	7821      	ldrb	r1, [r4, #0]
 8005686:	2203      	movs	r2, #3
 8005688:	4650      	mov	r0, sl
 800568a:	f7fa fdb9 	bl	8000200 <memchr>
 800568e:	b138      	cbz	r0, 80056a0 <_svfiprintf_r+0x150>
 8005690:	9b04      	ldr	r3, [sp, #16]
 8005692:	eba0 000a 	sub.w	r0, r0, sl
 8005696:	2240      	movs	r2, #64	@ 0x40
 8005698:	4082      	lsls	r2, r0
 800569a:	4313      	orrs	r3, r2
 800569c:	3401      	adds	r4, #1
 800569e:	9304      	str	r3, [sp, #16]
 80056a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056a4:	4824      	ldr	r0, [pc, #144]	@ (8005738 <_svfiprintf_r+0x1e8>)
 80056a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056aa:	2206      	movs	r2, #6
 80056ac:	f7fa fda8 	bl	8000200 <memchr>
 80056b0:	2800      	cmp	r0, #0
 80056b2:	d036      	beq.n	8005722 <_svfiprintf_r+0x1d2>
 80056b4:	4b21      	ldr	r3, [pc, #132]	@ (800573c <_svfiprintf_r+0x1ec>)
 80056b6:	bb1b      	cbnz	r3, 8005700 <_svfiprintf_r+0x1b0>
 80056b8:	9b03      	ldr	r3, [sp, #12]
 80056ba:	3307      	adds	r3, #7
 80056bc:	f023 0307 	bic.w	r3, r3, #7
 80056c0:	3308      	adds	r3, #8
 80056c2:	9303      	str	r3, [sp, #12]
 80056c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056c6:	4433      	add	r3, r6
 80056c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80056ca:	e76a      	b.n	80055a2 <_svfiprintf_r+0x52>
 80056cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80056d0:	460c      	mov	r4, r1
 80056d2:	2001      	movs	r0, #1
 80056d4:	e7a8      	b.n	8005628 <_svfiprintf_r+0xd8>
 80056d6:	2300      	movs	r3, #0
 80056d8:	3401      	adds	r4, #1
 80056da:	9305      	str	r3, [sp, #20]
 80056dc:	4619      	mov	r1, r3
 80056de:	f04f 0c0a 	mov.w	ip, #10
 80056e2:	4620      	mov	r0, r4
 80056e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056e8:	3a30      	subs	r2, #48	@ 0x30
 80056ea:	2a09      	cmp	r2, #9
 80056ec:	d903      	bls.n	80056f6 <_svfiprintf_r+0x1a6>
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0c6      	beq.n	8005680 <_svfiprintf_r+0x130>
 80056f2:	9105      	str	r1, [sp, #20]
 80056f4:	e7c4      	b.n	8005680 <_svfiprintf_r+0x130>
 80056f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80056fa:	4604      	mov	r4, r0
 80056fc:	2301      	movs	r3, #1
 80056fe:	e7f0      	b.n	80056e2 <_svfiprintf_r+0x192>
 8005700:	ab03      	add	r3, sp, #12
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	462a      	mov	r2, r5
 8005706:	4b0e      	ldr	r3, [pc, #56]	@ (8005740 <_svfiprintf_r+0x1f0>)
 8005708:	a904      	add	r1, sp, #16
 800570a:	4638      	mov	r0, r7
 800570c:	f3af 8000 	nop.w
 8005710:	1c42      	adds	r2, r0, #1
 8005712:	4606      	mov	r6, r0
 8005714:	d1d6      	bne.n	80056c4 <_svfiprintf_r+0x174>
 8005716:	89ab      	ldrh	r3, [r5, #12]
 8005718:	065b      	lsls	r3, r3, #25
 800571a:	f53f af2d 	bmi.w	8005578 <_svfiprintf_r+0x28>
 800571e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005720:	e72c      	b.n	800557c <_svfiprintf_r+0x2c>
 8005722:	ab03      	add	r3, sp, #12
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	462a      	mov	r2, r5
 8005728:	4b05      	ldr	r3, [pc, #20]	@ (8005740 <_svfiprintf_r+0x1f0>)
 800572a:	a904      	add	r1, sp, #16
 800572c:	4638      	mov	r0, r7
 800572e:	f000 f879 	bl	8005824 <_printf_i>
 8005732:	e7ed      	b.n	8005710 <_svfiprintf_r+0x1c0>
 8005734:	08005db5 	.word	0x08005db5
 8005738:	08005dbf 	.word	0x08005dbf
 800573c:	00000000 	.word	0x00000000
 8005740:	08005499 	.word	0x08005499
 8005744:	08005dbb 	.word	0x08005dbb

08005748 <_printf_common>:
 8005748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800574c:	4616      	mov	r6, r2
 800574e:	4698      	mov	r8, r3
 8005750:	688a      	ldr	r2, [r1, #8]
 8005752:	690b      	ldr	r3, [r1, #16]
 8005754:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005758:	4293      	cmp	r3, r2
 800575a:	bfb8      	it	lt
 800575c:	4613      	movlt	r3, r2
 800575e:	6033      	str	r3, [r6, #0]
 8005760:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005764:	4607      	mov	r7, r0
 8005766:	460c      	mov	r4, r1
 8005768:	b10a      	cbz	r2, 800576e <_printf_common+0x26>
 800576a:	3301      	adds	r3, #1
 800576c:	6033      	str	r3, [r6, #0]
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	0699      	lsls	r1, r3, #26
 8005772:	bf42      	ittt	mi
 8005774:	6833      	ldrmi	r3, [r6, #0]
 8005776:	3302      	addmi	r3, #2
 8005778:	6033      	strmi	r3, [r6, #0]
 800577a:	6825      	ldr	r5, [r4, #0]
 800577c:	f015 0506 	ands.w	r5, r5, #6
 8005780:	d106      	bne.n	8005790 <_printf_common+0x48>
 8005782:	f104 0a19 	add.w	sl, r4, #25
 8005786:	68e3      	ldr	r3, [r4, #12]
 8005788:	6832      	ldr	r2, [r6, #0]
 800578a:	1a9b      	subs	r3, r3, r2
 800578c:	42ab      	cmp	r3, r5
 800578e:	dc26      	bgt.n	80057de <_printf_common+0x96>
 8005790:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005794:	6822      	ldr	r2, [r4, #0]
 8005796:	3b00      	subs	r3, #0
 8005798:	bf18      	it	ne
 800579a:	2301      	movne	r3, #1
 800579c:	0692      	lsls	r2, r2, #26
 800579e:	d42b      	bmi.n	80057f8 <_printf_common+0xb0>
 80057a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057a4:	4641      	mov	r1, r8
 80057a6:	4638      	mov	r0, r7
 80057a8:	47c8      	blx	r9
 80057aa:	3001      	adds	r0, #1
 80057ac:	d01e      	beq.n	80057ec <_printf_common+0xa4>
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	6922      	ldr	r2, [r4, #16]
 80057b2:	f003 0306 	and.w	r3, r3, #6
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	bf02      	ittt	eq
 80057ba:	68e5      	ldreq	r5, [r4, #12]
 80057bc:	6833      	ldreq	r3, [r6, #0]
 80057be:	1aed      	subeq	r5, r5, r3
 80057c0:	68a3      	ldr	r3, [r4, #8]
 80057c2:	bf0c      	ite	eq
 80057c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057c8:	2500      	movne	r5, #0
 80057ca:	4293      	cmp	r3, r2
 80057cc:	bfc4      	itt	gt
 80057ce:	1a9b      	subgt	r3, r3, r2
 80057d0:	18ed      	addgt	r5, r5, r3
 80057d2:	2600      	movs	r6, #0
 80057d4:	341a      	adds	r4, #26
 80057d6:	42b5      	cmp	r5, r6
 80057d8:	d11a      	bne.n	8005810 <_printf_common+0xc8>
 80057da:	2000      	movs	r0, #0
 80057dc:	e008      	b.n	80057f0 <_printf_common+0xa8>
 80057de:	2301      	movs	r3, #1
 80057e0:	4652      	mov	r2, sl
 80057e2:	4641      	mov	r1, r8
 80057e4:	4638      	mov	r0, r7
 80057e6:	47c8      	blx	r9
 80057e8:	3001      	adds	r0, #1
 80057ea:	d103      	bne.n	80057f4 <_printf_common+0xac>
 80057ec:	f04f 30ff 	mov.w	r0, #4294967295
 80057f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f4:	3501      	adds	r5, #1
 80057f6:	e7c6      	b.n	8005786 <_printf_common+0x3e>
 80057f8:	18e1      	adds	r1, r4, r3
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	2030      	movs	r0, #48	@ 0x30
 80057fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005802:	4422      	add	r2, r4
 8005804:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005808:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800580c:	3302      	adds	r3, #2
 800580e:	e7c7      	b.n	80057a0 <_printf_common+0x58>
 8005810:	2301      	movs	r3, #1
 8005812:	4622      	mov	r2, r4
 8005814:	4641      	mov	r1, r8
 8005816:	4638      	mov	r0, r7
 8005818:	47c8      	blx	r9
 800581a:	3001      	adds	r0, #1
 800581c:	d0e6      	beq.n	80057ec <_printf_common+0xa4>
 800581e:	3601      	adds	r6, #1
 8005820:	e7d9      	b.n	80057d6 <_printf_common+0x8e>
	...

08005824 <_printf_i>:
 8005824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005828:	7e0f      	ldrb	r7, [r1, #24]
 800582a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800582c:	2f78      	cmp	r7, #120	@ 0x78
 800582e:	4691      	mov	r9, r2
 8005830:	4680      	mov	r8, r0
 8005832:	460c      	mov	r4, r1
 8005834:	469a      	mov	sl, r3
 8005836:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800583a:	d807      	bhi.n	800584c <_printf_i+0x28>
 800583c:	2f62      	cmp	r7, #98	@ 0x62
 800583e:	d80a      	bhi.n	8005856 <_printf_i+0x32>
 8005840:	2f00      	cmp	r7, #0
 8005842:	f000 80d1 	beq.w	80059e8 <_printf_i+0x1c4>
 8005846:	2f58      	cmp	r7, #88	@ 0x58
 8005848:	f000 80b8 	beq.w	80059bc <_printf_i+0x198>
 800584c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005850:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005854:	e03a      	b.n	80058cc <_printf_i+0xa8>
 8005856:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800585a:	2b15      	cmp	r3, #21
 800585c:	d8f6      	bhi.n	800584c <_printf_i+0x28>
 800585e:	a101      	add	r1, pc, #4	@ (adr r1, 8005864 <_printf_i+0x40>)
 8005860:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005864:	080058bd 	.word	0x080058bd
 8005868:	080058d1 	.word	0x080058d1
 800586c:	0800584d 	.word	0x0800584d
 8005870:	0800584d 	.word	0x0800584d
 8005874:	0800584d 	.word	0x0800584d
 8005878:	0800584d 	.word	0x0800584d
 800587c:	080058d1 	.word	0x080058d1
 8005880:	0800584d 	.word	0x0800584d
 8005884:	0800584d 	.word	0x0800584d
 8005888:	0800584d 	.word	0x0800584d
 800588c:	0800584d 	.word	0x0800584d
 8005890:	080059cf 	.word	0x080059cf
 8005894:	080058fb 	.word	0x080058fb
 8005898:	08005989 	.word	0x08005989
 800589c:	0800584d 	.word	0x0800584d
 80058a0:	0800584d 	.word	0x0800584d
 80058a4:	080059f1 	.word	0x080059f1
 80058a8:	0800584d 	.word	0x0800584d
 80058ac:	080058fb 	.word	0x080058fb
 80058b0:	0800584d 	.word	0x0800584d
 80058b4:	0800584d 	.word	0x0800584d
 80058b8:	08005991 	.word	0x08005991
 80058bc:	6833      	ldr	r3, [r6, #0]
 80058be:	1d1a      	adds	r2, r3, #4
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6032      	str	r2, [r6, #0]
 80058c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058cc:	2301      	movs	r3, #1
 80058ce:	e09c      	b.n	8005a0a <_printf_i+0x1e6>
 80058d0:	6833      	ldr	r3, [r6, #0]
 80058d2:	6820      	ldr	r0, [r4, #0]
 80058d4:	1d19      	adds	r1, r3, #4
 80058d6:	6031      	str	r1, [r6, #0]
 80058d8:	0606      	lsls	r6, r0, #24
 80058da:	d501      	bpl.n	80058e0 <_printf_i+0xbc>
 80058dc:	681d      	ldr	r5, [r3, #0]
 80058de:	e003      	b.n	80058e8 <_printf_i+0xc4>
 80058e0:	0645      	lsls	r5, r0, #25
 80058e2:	d5fb      	bpl.n	80058dc <_printf_i+0xb8>
 80058e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80058e8:	2d00      	cmp	r5, #0
 80058ea:	da03      	bge.n	80058f4 <_printf_i+0xd0>
 80058ec:	232d      	movs	r3, #45	@ 0x2d
 80058ee:	426d      	negs	r5, r5
 80058f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058f4:	4858      	ldr	r0, [pc, #352]	@ (8005a58 <_printf_i+0x234>)
 80058f6:	230a      	movs	r3, #10
 80058f8:	e011      	b.n	800591e <_printf_i+0xfa>
 80058fa:	6821      	ldr	r1, [r4, #0]
 80058fc:	6833      	ldr	r3, [r6, #0]
 80058fe:	0608      	lsls	r0, r1, #24
 8005900:	f853 5b04 	ldr.w	r5, [r3], #4
 8005904:	d402      	bmi.n	800590c <_printf_i+0xe8>
 8005906:	0649      	lsls	r1, r1, #25
 8005908:	bf48      	it	mi
 800590a:	b2ad      	uxthmi	r5, r5
 800590c:	2f6f      	cmp	r7, #111	@ 0x6f
 800590e:	4852      	ldr	r0, [pc, #328]	@ (8005a58 <_printf_i+0x234>)
 8005910:	6033      	str	r3, [r6, #0]
 8005912:	bf14      	ite	ne
 8005914:	230a      	movne	r3, #10
 8005916:	2308      	moveq	r3, #8
 8005918:	2100      	movs	r1, #0
 800591a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800591e:	6866      	ldr	r6, [r4, #4]
 8005920:	60a6      	str	r6, [r4, #8]
 8005922:	2e00      	cmp	r6, #0
 8005924:	db05      	blt.n	8005932 <_printf_i+0x10e>
 8005926:	6821      	ldr	r1, [r4, #0]
 8005928:	432e      	orrs	r6, r5
 800592a:	f021 0104 	bic.w	r1, r1, #4
 800592e:	6021      	str	r1, [r4, #0]
 8005930:	d04b      	beq.n	80059ca <_printf_i+0x1a6>
 8005932:	4616      	mov	r6, r2
 8005934:	fbb5 f1f3 	udiv	r1, r5, r3
 8005938:	fb03 5711 	mls	r7, r3, r1, r5
 800593c:	5dc7      	ldrb	r7, [r0, r7]
 800593e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005942:	462f      	mov	r7, r5
 8005944:	42bb      	cmp	r3, r7
 8005946:	460d      	mov	r5, r1
 8005948:	d9f4      	bls.n	8005934 <_printf_i+0x110>
 800594a:	2b08      	cmp	r3, #8
 800594c:	d10b      	bne.n	8005966 <_printf_i+0x142>
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	07df      	lsls	r7, r3, #31
 8005952:	d508      	bpl.n	8005966 <_printf_i+0x142>
 8005954:	6923      	ldr	r3, [r4, #16]
 8005956:	6861      	ldr	r1, [r4, #4]
 8005958:	4299      	cmp	r1, r3
 800595a:	bfde      	ittt	le
 800595c:	2330      	movle	r3, #48	@ 0x30
 800595e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005962:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005966:	1b92      	subs	r2, r2, r6
 8005968:	6122      	str	r2, [r4, #16]
 800596a:	f8cd a000 	str.w	sl, [sp]
 800596e:	464b      	mov	r3, r9
 8005970:	aa03      	add	r2, sp, #12
 8005972:	4621      	mov	r1, r4
 8005974:	4640      	mov	r0, r8
 8005976:	f7ff fee7 	bl	8005748 <_printf_common>
 800597a:	3001      	adds	r0, #1
 800597c:	d14a      	bne.n	8005a14 <_printf_i+0x1f0>
 800597e:	f04f 30ff 	mov.w	r0, #4294967295
 8005982:	b004      	add	sp, #16
 8005984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	f043 0320 	orr.w	r3, r3, #32
 800598e:	6023      	str	r3, [r4, #0]
 8005990:	4832      	ldr	r0, [pc, #200]	@ (8005a5c <_printf_i+0x238>)
 8005992:	2778      	movs	r7, #120	@ 0x78
 8005994:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	6831      	ldr	r1, [r6, #0]
 800599c:	061f      	lsls	r7, r3, #24
 800599e:	f851 5b04 	ldr.w	r5, [r1], #4
 80059a2:	d402      	bmi.n	80059aa <_printf_i+0x186>
 80059a4:	065f      	lsls	r7, r3, #25
 80059a6:	bf48      	it	mi
 80059a8:	b2ad      	uxthmi	r5, r5
 80059aa:	6031      	str	r1, [r6, #0]
 80059ac:	07d9      	lsls	r1, r3, #31
 80059ae:	bf44      	itt	mi
 80059b0:	f043 0320 	orrmi.w	r3, r3, #32
 80059b4:	6023      	strmi	r3, [r4, #0]
 80059b6:	b11d      	cbz	r5, 80059c0 <_printf_i+0x19c>
 80059b8:	2310      	movs	r3, #16
 80059ba:	e7ad      	b.n	8005918 <_printf_i+0xf4>
 80059bc:	4826      	ldr	r0, [pc, #152]	@ (8005a58 <_printf_i+0x234>)
 80059be:	e7e9      	b.n	8005994 <_printf_i+0x170>
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	f023 0320 	bic.w	r3, r3, #32
 80059c6:	6023      	str	r3, [r4, #0]
 80059c8:	e7f6      	b.n	80059b8 <_printf_i+0x194>
 80059ca:	4616      	mov	r6, r2
 80059cc:	e7bd      	b.n	800594a <_printf_i+0x126>
 80059ce:	6833      	ldr	r3, [r6, #0]
 80059d0:	6825      	ldr	r5, [r4, #0]
 80059d2:	6961      	ldr	r1, [r4, #20]
 80059d4:	1d18      	adds	r0, r3, #4
 80059d6:	6030      	str	r0, [r6, #0]
 80059d8:	062e      	lsls	r6, r5, #24
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	d501      	bpl.n	80059e2 <_printf_i+0x1be>
 80059de:	6019      	str	r1, [r3, #0]
 80059e0:	e002      	b.n	80059e8 <_printf_i+0x1c4>
 80059e2:	0668      	lsls	r0, r5, #25
 80059e4:	d5fb      	bpl.n	80059de <_printf_i+0x1ba>
 80059e6:	8019      	strh	r1, [r3, #0]
 80059e8:	2300      	movs	r3, #0
 80059ea:	6123      	str	r3, [r4, #16]
 80059ec:	4616      	mov	r6, r2
 80059ee:	e7bc      	b.n	800596a <_printf_i+0x146>
 80059f0:	6833      	ldr	r3, [r6, #0]
 80059f2:	1d1a      	adds	r2, r3, #4
 80059f4:	6032      	str	r2, [r6, #0]
 80059f6:	681e      	ldr	r6, [r3, #0]
 80059f8:	6862      	ldr	r2, [r4, #4]
 80059fa:	2100      	movs	r1, #0
 80059fc:	4630      	mov	r0, r6
 80059fe:	f7fa fbff 	bl	8000200 <memchr>
 8005a02:	b108      	cbz	r0, 8005a08 <_printf_i+0x1e4>
 8005a04:	1b80      	subs	r0, r0, r6
 8005a06:	6060      	str	r0, [r4, #4]
 8005a08:	6863      	ldr	r3, [r4, #4]
 8005a0a:	6123      	str	r3, [r4, #16]
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a12:	e7aa      	b.n	800596a <_printf_i+0x146>
 8005a14:	6923      	ldr	r3, [r4, #16]
 8005a16:	4632      	mov	r2, r6
 8005a18:	4649      	mov	r1, r9
 8005a1a:	4640      	mov	r0, r8
 8005a1c:	47d0      	blx	sl
 8005a1e:	3001      	adds	r0, #1
 8005a20:	d0ad      	beq.n	800597e <_printf_i+0x15a>
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	079b      	lsls	r3, r3, #30
 8005a26:	d413      	bmi.n	8005a50 <_printf_i+0x22c>
 8005a28:	68e0      	ldr	r0, [r4, #12]
 8005a2a:	9b03      	ldr	r3, [sp, #12]
 8005a2c:	4298      	cmp	r0, r3
 8005a2e:	bfb8      	it	lt
 8005a30:	4618      	movlt	r0, r3
 8005a32:	e7a6      	b.n	8005982 <_printf_i+0x15e>
 8005a34:	2301      	movs	r3, #1
 8005a36:	4632      	mov	r2, r6
 8005a38:	4649      	mov	r1, r9
 8005a3a:	4640      	mov	r0, r8
 8005a3c:	47d0      	blx	sl
 8005a3e:	3001      	adds	r0, #1
 8005a40:	d09d      	beq.n	800597e <_printf_i+0x15a>
 8005a42:	3501      	adds	r5, #1
 8005a44:	68e3      	ldr	r3, [r4, #12]
 8005a46:	9903      	ldr	r1, [sp, #12]
 8005a48:	1a5b      	subs	r3, r3, r1
 8005a4a:	42ab      	cmp	r3, r5
 8005a4c:	dcf2      	bgt.n	8005a34 <_printf_i+0x210>
 8005a4e:	e7eb      	b.n	8005a28 <_printf_i+0x204>
 8005a50:	2500      	movs	r5, #0
 8005a52:	f104 0619 	add.w	r6, r4, #25
 8005a56:	e7f5      	b.n	8005a44 <_printf_i+0x220>
 8005a58:	08005dc6 	.word	0x08005dc6
 8005a5c:	08005dd7 	.word	0x08005dd7

08005a60 <memmove>:
 8005a60:	4288      	cmp	r0, r1
 8005a62:	b510      	push	{r4, lr}
 8005a64:	eb01 0402 	add.w	r4, r1, r2
 8005a68:	d902      	bls.n	8005a70 <memmove+0x10>
 8005a6a:	4284      	cmp	r4, r0
 8005a6c:	4623      	mov	r3, r4
 8005a6e:	d807      	bhi.n	8005a80 <memmove+0x20>
 8005a70:	1e43      	subs	r3, r0, #1
 8005a72:	42a1      	cmp	r1, r4
 8005a74:	d008      	beq.n	8005a88 <memmove+0x28>
 8005a76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a7e:	e7f8      	b.n	8005a72 <memmove+0x12>
 8005a80:	4402      	add	r2, r0
 8005a82:	4601      	mov	r1, r0
 8005a84:	428a      	cmp	r2, r1
 8005a86:	d100      	bne.n	8005a8a <memmove+0x2a>
 8005a88:	bd10      	pop	{r4, pc}
 8005a8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a92:	e7f7      	b.n	8005a84 <memmove+0x24>

08005a94 <_sbrk_r>:
 8005a94:	b538      	push	{r3, r4, r5, lr}
 8005a96:	4d06      	ldr	r5, [pc, #24]	@ (8005ab0 <_sbrk_r+0x1c>)
 8005a98:	2300      	movs	r3, #0
 8005a9a:	4604      	mov	r4, r0
 8005a9c:	4608      	mov	r0, r1
 8005a9e:	602b      	str	r3, [r5, #0]
 8005aa0:	f7fb fc32 	bl	8001308 <_sbrk>
 8005aa4:	1c43      	adds	r3, r0, #1
 8005aa6:	d102      	bne.n	8005aae <_sbrk_r+0x1a>
 8005aa8:	682b      	ldr	r3, [r5, #0]
 8005aaa:	b103      	cbz	r3, 8005aae <_sbrk_r+0x1a>
 8005aac:	6023      	str	r3, [r4, #0]
 8005aae:	bd38      	pop	{r3, r4, r5, pc}
 8005ab0:	2000033c 	.word	0x2000033c

08005ab4 <memcpy>:
 8005ab4:	440a      	add	r2, r1
 8005ab6:	4291      	cmp	r1, r2
 8005ab8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005abc:	d100      	bne.n	8005ac0 <memcpy+0xc>
 8005abe:	4770      	bx	lr
 8005ac0:	b510      	push	{r4, lr}
 8005ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aca:	4291      	cmp	r1, r2
 8005acc:	d1f9      	bne.n	8005ac2 <memcpy+0xe>
 8005ace:	bd10      	pop	{r4, pc}

08005ad0 <_realloc_r>:
 8005ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad4:	4607      	mov	r7, r0
 8005ad6:	4614      	mov	r4, r2
 8005ad8:	460d      	mov	r5, r1
 8005ada:	b921      	cbnz	r1, 8005ae6 <_realloc_r+0x16>
 8005adc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae0:	4611      	mov	r1, r2
 8005ae2:	f7ff bc4d 	b.w	8005380 <_malloc_r>
 8005ae6:	b92a      	cbnz	r2, 8005af4 <_realloc_r+0x24>
 8005ae8:	f7ff fbde 	bl	80052a8 <_free_r>
 8005aec:	4625      	mov	r5, r4
 8005aee:	4628      	mov	r0, r5
 8005af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005af4:	f000 f81a 	bl	8005b2c <_malloc_usable_size_r>
 8005af8:	4284      	cmp	r4, r0
 8005afa:	4606      	mov	r6, r0
 8005afc:	d802      	bhi.n	8005b04 <_realloc_r+0x34>
 8005afe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b02:	d8f4      	bhi.n	8005aee <_realloc_r+0x1e>
 8005b04:	4621      	mov	r1, r4
 8005b06:	4638      	mov	r0, r7
 8005b08:	f7ff fc3a 	bl	8005380 <_malloc_r>
 8005b0c:	4680      	mov	r8, r0
 8005b0e:	b908      	cbnz	r0, 8005b14 <_realloc_r+0x44>
 8005b10:	4645      	mov	r5, r8
 8005b12:	e7ec      	b.n	8005aee <_realloc_r+0x1e>
 8005b14:	42b4      	cmp	r4, r6
 8005b16:	4622      	mov	r2, r4
 8005b18:	4629      	mov	r1, r5
 8005b1a:	bf28      	it	cs
 8005b1c:	4632      	movcs	r2, r6
 8005b1e:	f7ff ffc9 	bl	8005ab4 <memcpy>
 8005b22:	4629      	mov	r1, r5
 8005b24:	4638      	mov	r0, r7
 8005b26:	f7ff fbbf 	bl	80052a8 <_free_r>
 8005b2a:	e7f1      	b.n	8005b10 <_realloc_r+0x40>

08005b2c <_malloc_usable_size_r>:
 8005b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b30:	1f18      	subs	r0, r3, #4
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	bfbc      	itt	lt
 8005b36:	580b      	ldrlt	r3, [r1, r0]
 8005b38:	18c0      	addlt	r0, r0, r3
 8005b3a:	4770      	bx	lr

08005b3c <_init>:
 8005b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3e:	bf00      	nop
 8005b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b42:	bc08      	pop	{r3}
 8005b44:	469e      	mov	lr, r3
 8005b46:	4770      	bx	lr

08005b48 <_fini>:
 8005b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4a:	bf00      	nop
 8005b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b4e:	bc08      	pop	{r3}
 8005b50:	469e      	mov	lr, r3
 8005b52:	4770      	bx	lr
