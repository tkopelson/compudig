
tpint1_kopelson.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004720  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080048ac  080048ac  000058ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048ec  080048ec  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080048ec  080048ec  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080048ec  080048ec  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048ec  080048ec  000058ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048f0  080048f0  000058f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080048f4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000000c  08004900  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08004900  00006184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d143  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d01  00000000  00000000  0001317f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  00014e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000adc  00000000  00000000  00015c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d86  00000000  00000000  0001676c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edea  00000000  00000000  000374f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1643  00000000  00000000  000462dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011791f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b5c  00000000  00000000  00117964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0011b4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004894 	.word	0x08004894

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004894 	.word	0x08004894

080001cc <TIM6_DAC_IRQHandler>:
int boton, flag = 0;
int16_t datomap1,datomap2,datopote1,datopote2 = 0;
void LeerPote();

void TIM6_DAC_IRQHandler(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	 if (TIM6->SR & TIM_SR_UIF) {
 80001d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000200 <TIM6_DAC_IRQHandler+0x34>)
 80001d2:	691b      	ldr	r3, [r3, #16]
 80001d4:	f003 0301 	and.w	r3, r3, #1
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d00b      	beq.n	80001f4 <TIM6_DAC_IRQHandler+0x28>
	    TIM6->SR &= ~TIM_SR_UIF; // Limpio flag
 80001dc:	4b08      	ldr	r3, [pc, #32]	@ (8000200 <TIM6_DAC_IRQHandler+0x34>)
 80001de:	691b      	ldr	r3, [r3, #16]
 80001e0:	4a07      	ldr	r2, [pc, #28]	@ (8000200 <TIM6_DAC_IRQHandler+0x34>)
 80001e2:	f023 0301 	bic.w	r3, r3, #1
 80001e6:	6113      	str	r3, [r2, #16]

	 if (flag == 1) {
 80001e8:	4b06      	ldr	r3, [pc, #24]	@ (8000204 <TIM6_DAC_IRQHandler+0x38>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	2b01      	cmp	r3, #1
 80001ee:	d101      	bne.n	80001f4 <TIM6_DAC_IRQHandler+0x28>
		 LeerPote();
 80001f0:	f000 fedc 	bl	8000fac <LeerPote>
	 }
}

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <TIM6_DAC_IRQHandler+0x3c>)
 80001f6:	f003 fce9 	bl	8003bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80001fa:	bf00      	nop
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	40001000 	.word	0x40001000
 8000204:	20000174 	.word	0x20000174
 8000208:	20000124 	.word	0x20000124

0800020c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000210:	f001 f8ed 	bl	80013ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000214:	f000 fc92 	bl	8000b3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000218:	f000 fe64 	bl	8000ee4 <MX_GPIO_Init>
  MX_TIM6_Init();
 800021c:	f000 fe2c 	bl	8000e78 <MX_TIM6_Init>
  MX_ADC1_Init();
 8000220:	f000 fcd2 	bl	8000bc8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000224:	f000 fdc4 	bl	8000db0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000228:	f000 fd32 	bl	8000c90 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

/* Habilito relojes */

  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 800022c:	4bbf      	ldr	r3, [pc, #764]	@ (800052c <main+0x320>)
 800022e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000230:	4abe      	ldr	r2, [pc, #760]	@ (800052c <main+0x320>)
 8000232:	f043 0301 	orr.w	r3, r3, #1
 8000236:	64d3      	str	r3, [r2, #76]	@ 0x4c
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000238:	4bbc      	ldr	r3, [pc, #752]	@ (800052c <main+0x320>)
 800023a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800023c:	4abb      	ldr	r2, [pc, #748]	@ (800052c <main+0x320>)
 800023e:	f043 0302 	orr.w	r3, r3, #2
 8000242:	64d3      	str	r3, [r2, #76]	@ 0x4c
  RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN | RCC_APB1ENR1_TIM6EN;
 8000244:	4bb9      	ldr	r3, [pc, #740]	@ (800052c <main+0x320>)
 8000246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000248:	4ab8      	ldr	r2, [pc, #736]	@ (800052c <main+0x320>)
 800024a:	f043 0311 	orr.w	r3, r3, #17
 800024e:	6593      	str	r3, [r2, #88]	@ 0x58
  RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 8000250:	4bb6      	ldr	r3, [pc, #728]	@ (800052c <main+0x320>)
 8000252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000254:	4ab5      	ldr	r2, [pc, #724]	@ (800052c <main+0x320>)
 8000256:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800025a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  RCC->CCIPR |= RCC_CCIPR_ADCSEL;
 800025c:	4bb3      	ldr	r3, [pc, #716]	@ (800052c <main+0x320>)
 800025e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000262:	4ab2      	ldr	r2, [pc, #712]	@ (800052c <main+0x320>)
 8000264:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8000268:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  //puse estos 2 xq no hay chance de hacer andar los otros 2 pines de led estado q puse anteriormente... y no detectÃ© la falla a tiempo.

  /* NUEVO LED_ESTADO_0 -- PIN d1 [PA_9] -- SALIDA */

    GPIOA->MODER |= GPIO_MODER_MODE9_0;           // PA7 modo salida
 800026c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000276:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800027a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~GPIO_MODER_MODE9_1;
 800027c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000286:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800028a:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~GPIO_OTYPER_OT9;            // Push-pull
 800028c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000296:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800029a:	6053      	str	r3, [r2, #4]
    GPIOA->BSRR |= GPIO_BSRR_BR9;                 // Inicializar en estado bajo
 800029c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002a0:	699b      	ldr	r3, [r3, #24]
 80002a2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002aa:	6193      	str	r3, [r2, #24]

    /* NUEVO LED_ESTADO_1 -- PIN d0 [PA_10] -- SALIDA */

    GPIOA->MODER |= GPIO_MODER_MODE10_0;           // PA7 modo salida
 80002ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002ba:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~GPIO_MODER_MODE10_1;
 80002bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80002ca:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~GPIO_OTYPER_OT10;            // Push-pull
 80002cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80002da:	6053      	str	r3, [r2, #4]
    GPIOA->BSRR |= GPIO_BSRR_BR10;                 // Inicializar en estado bajo
 80002dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80002ea:	6193      	str	r3, [r2, #24]

    /* NUEVO LED_CALEF2 -- PIN d0 [PA_11] -- SALIDA */

        GPIOA->MODER |= GPIO_MODER_MODE11_0;           // PA7 modo salida
 80002ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80002fa:	6013      	str	r3, [r2, #0]
        GPIOA->MODER &= ~GPIO_MODER_MODE11_1;
 80002fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000306:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800030a:	6013      	str	r3, [r2, #0]
        GPIOA->OTYPER &= ~GPIO_OTYPER_OT11;            // Push-pull
 800030c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000310:	685b      	ldr	r3, [r3, #4]
 8000312:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000316:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800031a:	6053      	str	r3, [r2, #4]
        GPIOA->BSRR |= GPIO_BSRR_BR11;                 // Inicializar en estado bajo
 800031c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000320:	699b      	ldr	r3, [r3, #24]
 8000322:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000326:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800032a:	6193      	str	r3, [r2, #24]

    /*  NUEVO PA8 -- PIN d9 [PA_8] -- SALIDA PWM AF */
        GPIOA->MODER &= ~GPIO_MODER_MODE8_Msk;               // Limpia los bits
 800032c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000336:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800033a:	6013      	str	r3, [r2, #0]
        GPIOA->MODER |= GPIO_MODER_MODE8_1;                  // Alternate Function (10)
 800033c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000346:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800034a:	6013      	str	r3, [r2, #0]
        GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL8_Msk;
 800034c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000352:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000356:	f023 030f 	bic.w	r3, r3, #15
 800035a:	6253      	str	r3, [r2, #36]	@ 0x24
        GPIOA->AFR[1] |= (1 << GPIO_AFRH_AFSEL8_Pos);        // AF1 para TIM1_CH1
 800035c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000362:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000366:	f043 0301 	orr.w	r3, r3, #1
 800036a:	6253      	str	r3, [r2, #36]	@ 0x24
        GPIOA->OTYPER &= ~GPIO_OTYPER_OT8;                   // Push-pull
 800036c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000376:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800037a:	6053      	str	r3, [r2, #4]
        GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEED8_Msk;          // Alta velocidad
 800037c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000380:	689b      	ldr	r3, [r3, #8]
 8000382:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000386:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800038a:	6093      	str	r3, [r2, #8]


/* BOTON (ON/OFF) -- PIN D2 [PA_12] -- ENTRADA */

  GPIOA->MODER &= ~GPIO_MODER_MODE12;
 800038c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000396:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800039a:	6013      	str	r3, [r2, #0]
  GPIOA->PUPDR |= GPIO_PUPDR_PUPD12_0;
 800039c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003a0:	68db      	ldr	r3, [r3, #12]
 80003a2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80003aa:	60d3      	str	r3, [r2, #12]
  GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD12_1;
 80003ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003b0:	68db      	ldr	r3, [r3, #12]
 80003b2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003b6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80003ba:	60d3      	str	r3, [r2, #12]

/* LED_ESTADO_0 -- PIN A6 [PA_7] -- SALIDA */

  GPIOA->MODER |= GPIO_MODER_MODE7_0;           // PA7 modo salida
 80003bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ca:	6013      	str	r3, [r2, #0]
  GPIOA->MODER &= ~GPIO_MODER_MODE7_1;
 80003cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80003da:	6013      	str	r3, [r2, #0]
  GPIOA->OTYPER &= ~GPIO_OTYPER_OT7;            // Push-pull
 80003dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80003ea:	6053      	str	r3, [r2, #4]
  GPIOA->BSRR |= GPIO_BSRR_BR7;                 // Inicializar en estado bajo
 80003ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80003fa:	6193      	str	r3, [r2, #24]

/* LED_ESTADO_1 -- PIN A7 [PA_2] -- SALIDA */

  GPIOA->MODER |= GPIO_MODER_MODE2_0;
 80003fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000406:	f043 0310 	orr.w	r3, r3, #16
 800040a:	6013      	str	r3, [r2, #0]
  GPIOA->MODER &= ~GPIO_MODER_MODE2_1;
 800040c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000416:	f023 0320 	bic.w	r3, r3, #32
 800041a:	6013      	str	r3, [r2, #0]
  GPIOA->OTYPER &= ~GPIO_OTYPER_OT2;
 800041c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000426:	f023 0304 	bic.w	r3, r3, #4
 800042a:	6053      	str	r3, [r2, #4]
  GPIOA->BSRR |= GPIO_BSRR_BR2;
 800042c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000436:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800043a:	6193      	str	r3, [r2, #24]

/* LED_ESTADO2_0 -- PIN D4 [PB_7] -- SALIDA */

  GPIOB->MODER |= GPIO_MODER_MODE7_0;
 800043c:	4b3c      	ldr	r3, [pc, #240]	@ (8000530 <main+0x324>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a3b      	ldr	r2, [pc, #236]	@ (8000530 <main+0x324>)
 8000442:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000446:	6013      	str	r3, [r2, #0]
  GPIOB->MODER &= ~GPIO_MODER_MODE7_1;
 8000448:	4b39      	ldr	r3, [pc, #228]	@ (8000530 <main+0x324>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a38      	ldr	r2, [pc, #224]	@ (8000530 <main+0x324>)
 800044e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000452:	6013      	str	r3, [r2, #0]
  GPIOB->OTYPER &= ~GPIO_OTYPER_OT7;
 8000454:	4b36      	ldr	r3, [pc, #216]	@ (8000530 <main+0x324>)
 8000456:	685b      	ldr	r3, [r3, #4]
 8000458:	4a35      	ldr	r2, [pc, #212]	@ (8000530 <main+0x324>)
 800045a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800045e:	6053      	str	r3, [r2, #4]
  GPIOB->BSRR |= GPIO_BSRR_BR7;
 8000460:	4b33      	ldr	r3, [pc, #204]	@ (8000530 <main+0x324>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a32      	ldr	r2, [pc, #200]	@ (8000530 <main+0x324>)
 8000466:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800046a:	6193      	str	r3, [r2, #24]

/* LED_ESTADO2_1 -- PIN D5 [PB_6] -- SALIDA */

  GPIOB->MODER |= GPIO_MODER_MODE6_0;
 800046c:	4b30      	ldr	r3, [pc, #192]	@ (8000530 <main+0x324>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a2f      	ldr	r2, [pc, #188]	@ (8000530 <main+0x324>)
 8000472:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000476:	6013      	str	r3, [r2, #0]
  GPIOB->MODER &= ~GPIO_MODER_MODE6_1;
 8000478:	4b2d      	ldr	r3, [pc, #180]	@ (8000530 <main+0x324>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a2c      	ldr	r2, [pc, #176]	@ (8000530 <main+0x324>)
 800047e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000482:	6013      	str	r3, [r2, #0]
  GPIOB->OTYPER &= ~GPIO_OTYPER_OT6;
 8000484:	4b2a      	ldr	r3, [pc, #168]	@ (8000530 <main+0x324>)
 8000486:	685b      	ldr	r3, [r3, #4]
 8000488:	4a29      	ldr	r2, [pc, #164]	@ (8000530 <main+0x324>)
 800048a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800048e:	6053      	str	r3, [r2, #4]
  GPIOB->BSRR |= GPIO_BSRR_BR6;
 8000490:	4b27      	ldr	r3, [pc, #156]	@ (8000530 <main+0x324>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a26      	ldr	r2, [pc, #152]	@ (8000530 <main+0x324>)
 8000496:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800049a:	6193      	str	r3, [r2, #24]

/* LED_CALEFACCION_1 -- PIN A3 [PA_4] -- SALIDA */

  GPIOA->MODER |= GPIO_MODER_MODE4_0;
 800049c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004aa:	6013      	str	r3, [r2, #0]
  GPIOA->MODER &= ~GPIO_MODER_MODE4_1;
 80004ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004b6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80004ba:	6013      	str	r3, [r2, #0]
  GPIOA->OTYPER &= ~GPIO_OTYPER_OT4;
 80004bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004c6:	f023 0310 	bic.w	r3, r3, #16
 80004ca:	6053      	str	r3, [r2, #4]
  GPIOA->BSRR |= GPIO_BSRR_BR4;
 80004cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80004da:	6193      	str	r3, [r2, #24]

/* LED_CALEFACCION_2 -- PIN A4 [PA_6] -- SALIDA */

  GPIOA->MODER |= GPIO_MODER_MODE6_0;  // 01: modo salida general
 80004dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80004ea:	6013      	str	r3, [r2, #0]
  GPIOA->MODER &= ~GPIO_MODER_MODE6_1;
 80004ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80004fa:	6013      	str	r3, [r2, #0]
  GPIOA->OTYPER &= ~GPIO_OTYPER_OT6;   // push-pull
 80004fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000506:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800050a:	6053      	str	r3, [r2, #4]
  GPIOA->BSRR |= GPIO_BSRR_BR6;        // apagar LED inicialmente
 800050c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000516:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800051a:	6193      	str	r3, [r2, #24]

/* LED_EXTRACTOR_1 -- PIN A2 [PA_3] -- SALIDA PWM AF */

  GPIOA->MODER |= GPIO_MODER_MODE3_1;           // Modo alternate function (10)
 800051c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800052a:	e003      	b.n	8000534 <main+0x328>
 800052c:	40021000 	.word	0x40021000
 8000530:	48000400 	.word	0x48000400
 8000534:	6013      	str	r3, [r2, #0]
  GPIOA->MODER &= ~GPIO_MODER_MODE3_0;
 8000536:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000544:	6013      	str	r3, [r2, #0]
  GPIOA->AFR[0] |=  (1 << GPIO_AFRL_AFSEL3_Pos);   // AF1: TIM2_CH4
 8000546:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800054a:	6a1b      	ldr	r3, [r3, #32]
 800054c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000550:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000554:	6213      	str	r3, [r2, #32]
  GPIOA->OTYPER &= ~GPIO_OTYPER_OT3;
 8000556:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000560:	f023 0308 	bic.w	r3, r3, #8
 8000564:	6053      	str	r3, [r2, #4]

/* LED_EXTRACTOR_2 -- PIN A5 [PA_5] -- SALIDA PWM AF */

  GPIOA->MODER |= GPIO_MODER_MODE5_1;              // 10: alternate function
 8000566:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000570:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000574:	6013      	str	r3, [r2, #0]
  GPIOA->MODER &= ~GPIO_MODER_MODE5_0;
 8000576:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000580:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000584:	6013      	str	r3, [r2, #0]
  GPIOA->AFR[0] |= (1 << GPIO_AFRL_AFSEL5_Pos);    // AF1 = TIM2_CH1
 8000586:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800058a:	6a1b      	ldr	r3, [r3, #32]
 800058c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000590:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000594:	6213      	str	r3, [r2, #32]
  GPIOA->OTYPER &= ~GPIO_OTYPER_OT5;               // push-pull
 8000596:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005a0:	f023 0320 	bic.w	r3, r3, #32
 80005a4:	6053      	str	r3, [r2, #4]

/* POTE_1 -- PIN A0 [PA_0] -- ADC ENTRADA */

  GPIOA->MODER |= GPIO_MODER_MODE0;             // PA0 en modo analÃ³gico
 80005a6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005b0:	f043 0303 	orr.w	r3, r3, #3
 80005b4:	6013      	str	r3, [r2, #0]
  GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD0;            // Sin pull-up/down
 80005b6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005c0:	f023 0303 	bic.w	r3, r3, #3
 80005c4:	60d3      	str	r3, [r2, #12]

/* POTE_2 -- PIN A1 [PA_1] -- ADC ENTRADA */

  GPIOA->MODER |= GPIO_MODER_MODE1;             // PA1 en modo analÃ³gico
 80005c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005d0:	f043 030c 	orr.w	r3, r3, #12
 80005d4:	6013      	str	r3, [r2, #0]
  GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD1;            // Sin pull-up/down
 80005d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005e0:	f023 030c 	bic.w	r3, r3, #12
 80005e4:	60d3      	str	r3, [r2, #12]


  /* Inicializo los timers aca */

  // TIM2 (1khz ya q en el examen calculÃ© eso, aprovecho los valores dados ja!)
  TIM2->PSC = 39;
 80005e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005ea:	2227      	movs	r2, #39	@ 0x27
 80005ec:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM2->ARR = 99;
 80005ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005f2:	2263      	movs	r2, #99	@ 0x63
 80005f4:	62da      	str	r2, [r3, #44]	@ 0x2c
//  TIM2->CCR1 = 0;
  TIM2->CCR4 = 0; // 50% duty por defecto
 80005f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005fa:	2200      	movs	r2, #0
 80005fc:	641a      	str	r2, [r3, #64]	@ 0x40
//  TIM2->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2; // PWM mode 1
//  TIM2->CCMR1 |= TIM_CCMR1_OC1PE;                     // Preload enable
  TIM2->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2; // PWM mode 1
 80005fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000602:	69db      	ldr	r3, [r3, #28]
 8000604:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000608:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 800060c:	61d3      	str	r3, [r2, #28]
  TIM2->CCMR2 |= TIM_CCMR2_OC4PE;    // Preload enable
 800060e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000612:	69db      	ldr	r3, [r3, #28]
 8000614:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000618:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800061c:	61d3      	str	r3, [r2, #28]
  TIM2->CCER |= TIM_CCER_CC4E;       // Enable output
 800061e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000622:	6a1b      	ldr	r3, [r3, #32]
 8000624:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000628:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800062c:	6213      	str	r3, [r2, #32]
//  TIM2->CCER  |= TIM_CCER_CC1E;      // Enable output

  TIM2->CR1 |= TIM_CR1_CEN;          // Enable timer
 800062e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6013      	str	r3, [r2, #0]

// TIM6 (cada medio seg)
  NVIC->ISER[1] |= (1 << 22);
 800063e:	4bab      	ldr	r3, [pc, #684]	@ (80008ec <main+0x6e0>)
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	4aaa      	ldr	r2, [pc, #680]	@ (80008ec <main+0x6e0>)
 8000644:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000648:	6053      	str	r3, [r2, #4]
  TIM6->PSC = 999;
 800064a:	4ba9      	ldr	r3, [pc, #676]	@ (80008f0 <main+0x6e4>)
 800064c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000650:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM6->ARR = 1999;
 8000652:	4ba7      	ldr	r3, [pc, #668]	@ (80008f0 <main+0x6e4>)
 8000654:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000658:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM6->DIER |= TIM_DIER_UIE;
 800065a:	4ba5      	ldr	r3, [pc, #660]	@ (80008f0 <main+0x6e4>)
 800065c:	68db      	ldr	r3, [r3, #12]
 800065e:	4aa4      	ldr	r2, [pc, #656]	@ (80008f0 <main+0x6e4>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	60d3      	str	r3, [r2, #12]
  TIM6->CR1 |= TIM_CR1_CEN;
 8000666:	4ba2      	ldr	r3, [pc, #648]	@ (80008f0 <main+0x6e4>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4aa1      	ldr	r2, [pc, #644]	@ (80008f0 <main+0x6e4>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6013      	str	r3, [r2, #0]

//TIM1 prueba
  TIM1->PSC = 39;
 8000672:	4ba0      	ldr	r3, [pc, #640]	@ (80008f4 <main+0x6e8>)
 8000674:	2227      	movs	r2, #39	@ 0x27
 8000676:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM1->ARR = 99;
 8000678:	4b9e      	ldr	r3, [pc, #632]	@ (80008f4 <main+0x6e8>)
 800067a:	2263      	movs	r2, #99	@ 0x63
 800067c:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM1->CCR1 = 0;  // 50% duty cycle
 800067e:	4b9d      	ldr	r3, [pc, #628]	@ (80008f4 <main+0x6e8>)
 8000680:	2200      	movs	r2, #0
 8000682:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCMR1 &= ~TIM_CCMR1_OC1M;  // Limpio los bits del modo
 8000684:	4b9b      	ldr	r3, [pc, #620]	@ (80008f4 <main+0x6e8>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a9a      	ldr	r2, [pc, #616]	@ (80008f4 <main+0x6e8>)
 800068a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800068e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000692:	6193      	str	r3, [r2, #24]
  TIM1->CCMR1 |= (6 << TIM_CCMR1_OC1M_Pos); // PWM mode 1
 8000694:	4b97      	ldr	r3, [pc, #604]	@ (80008f4 <main+0x6e8>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a96      	ldr	r2, [pc, #600]	@ (80008f4 <main+0x6e8>)
 800069a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800069e:	6193      	str	r3, [r2, #24]
  TIM1->CCMR1 |= TIM_CCMR1_OC1PE;  // Preload enable
 80006a0:	4b94      	ldr	r3, [pc, #592]	@ (80008f4 <main+0x6e8>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a93      	ldr	r2, [pc, #588]	@ (80008f4 <main+0x6e8>)
 80006a6:	f043 0308 	orr.w	r3, r3, #8
 80006aa:	6193      	str	r3, [r2, #24]
  TIM1->CCER |= TIM_CCER_CC1E;     // Habilita la salida del canal 1
 80006ac:	4b91      	ldr	r3, [pc, #580]	@ (80008f4 <main+0x6e8>)
 80006ae:	6a1b      	ldr	r3, [r3, #32]
 80006b0:	4a90      	ldr	r2, [pc, #576]	@ (80008f4 <main+0x6e8>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6213      	str	r3, [r2, #32]
  TIM1->CR1  |= TIM_CR1_CEN;       // Habilita el contador
 80006b8:	4b8e      	ldr	r3, [pc, #568]	@ (80008f4 <main+0x6e8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a8d      	ldr	r2, [pc, #564]	@ (80008f4 <main+0x6e8>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	6013      	str	r3, [r2, #0]
  TIM1->BDTR |= TIM_BDTR_MOE;      // Habilita salidas del timer (necesario en timers avanzados como TIM1)
 80006c4:	4b8b      	ldr	r3, [pc, #556]	@ (80008f4 <main+0x6e8>)
 80006c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006c8:	4a8a      	ldr	r2, [pc, #552]	@ (80008f4 <main+0x6e8>)
 80006ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006ce:	6453      	str	r3, [r2, #68]	@ 0x44

  //Configuro ADC
     ADC1->CR &=~ADC_CR_DEEPPWD;//Para que salga del estado deep sleep
 80006d0:	4b89      	ldr	r3, [pc, #548]	@ (80008f8 <main+0x6ec>)
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	4a88      	ldr	r2, [pc, #544]	@ (80008f8 <main+0x6ec>)
 80006d6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80006da:	6093      	str	r3, [r2, #8]
     ADC1->CR |=ADC_CR_ADVREGEN;//REG INT DE VOLTAJE
 80006dc:	4b86      	ldr	r3, [pc, #536]	@ (80008f8 <main+0x6ec>)
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	4a85      	ldr	r2, [pc, #532]	@ (80008f8 <main+0x6ec>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e6:	6093      	str	r3, [r2, #8]
     HAL_Delay(50);//delay para que se estabilice el reg de voltaje antes de convertir
 80006e8:	2032      	movs	r0, #50	@ 0x32
 80006ea:	f000 fef5 	bl	80014d8 <HAL_Delay>
     ADC1->CFGR &= ~ADC_CFGR_EXTEN;
 80006ee:	4b82      	ldr	r3, [pc, #520]	@ (80008f8 <main+0x6ec>)
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	4a81      	ldr	r2, [pc, #516]	@ (80008f8 <main+0x6ec>)
 80006f4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80006f8:	60d3      	str	r3, [r2, #12]
     ADC1->CFGR &= ~ADC_CFGR_RES; //res de 12 bits
 80006fa:	4b7f      	ldr	r3, [pc, #508]	@ (80008f8 <main+0x6ec>)
 80006fc:	68db      	ldr	r3, [r3, #12]
 80006fe:	4a7e      	ldr	r2, [pc, #504]	@ (80008f8 <main+0x6ec>)
 8000700:	f023 0318 	bic.w	r3, r3, #24
 8000704:	60d3      	str	r3, [r2, #12]
     ADC1->CFGR &= ~ADC_CFGR_ALIGN; //ALINEACION X DER
 8000706:	4b7c      	ldr	r3, [pc, #496]	@ (80008f8 <main+0x6ec>)
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	4a7b      	ldr	r2, [pc, #492]	@ (80008f8 <main+0x6ec>)
 800070c:	f023 0320 	bic.w	r3, r3, #32
 8000710:	60d3      	str	r3, [r2, #12]
     ADC1->CFGR &= ~ADC_CFGR_CONT; //SETEO SINGLE CONVERSION
 8000712:	4b79      	ldr	r3, [pc, #484]	@ (80008f8 <main+0x6ec>)
 8000714:	68db      	ldr	r3, [r3, #12]
 8000716:	4a78      	ldr	r2, [pc, #480]	@ (80008f8 <main+0x6ec>)
 8000718:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800071c:	60d3      	str	r3, [r2, #12]

  // config entradas
     ADC1->SMPR1 |= (3 << ADC_SMPR1_SMP5_Pos); // Por ejemplo 24.5 ciclos
 800071e:	4b76      	ldr	r3, [pc, #472]	@ (80008f8 <main+0x6ec>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4a75      	ldr	r2, [pc, #468]	@ (80008f8 <main+0x6ec>)
 8000724:	f443 33c0 	orr.w	r3, r3, #98304	@ 0x18000
 8000728:	6153      	str	r3, [r2, #20]
     ADC1->SMPR1 |= (3 << ADC_SMPR1_SMP6_Pos); // Igual tiempo para ambos
 800072a:	4b73      	ldr	r3, [pc, #460]	@ (80008f8 <main+0x6ec>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	4a72      	ldr	r2, [pc, #456]	@ (80008f8 <main+0x6ec>)
 8000730:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8000734:	6153      	str	r3, [r2, #20]
     ADC1->SQR1 &= ~ADC_SQR1_L;
 8000736:	4b70      	ldr	r3, [pc, #448]	@ (80008f8 <main+0x6ec>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a6f      	ldr	r2, [pc, #444]	@ (80008f8 <main+0x6ec>)
 800073c:	f023 030f 	bic.w	r3, r3, #15
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
     ADC1->SQR1 |= ADC_SQR1_L_0;
 8000742:	4b6d      	ldr	r3, [pc, #436]	@ (80008f8 <main+0x6ec>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a6c      	ldr	r2, [pc, #432]	@ (80008f8 <main+0x6ec>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
     ADC1->SQR1 &= ~ADC_SQR1_SQ1;
 800074e:	4b6a      	ldr	r3, [pc, #424]	@ (80008f8 <main+0x6ec>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a69      	ldr	r2, [pc, #420]	@ (80008f8 <main+0x6ec>)
 8000754:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
     ADC1->SQR1 |= (5 << ADC_SQR1_SQ1_Pos);    // canal 5
 800075a:	4b67      	ldr	r3, [pc, #412]	@ (80008f8 <main+0x6ec>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a66      	ldr	r2, [pc, #408]	@ (80008f8 <main+0x6ec>)
 8000760:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
     ADC1->SQR1 &= ~ADC_SQR1_SQ2;
 8000766:	4b64      	ldr	r3, [pc, #400]	@ (80008f8 <main+0x6ec>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a63      	ldr	r2, [pc, #396]	@ (80008f8 <main+0x6ec>)
 800076c:	f423 33f8 	bic.w	r3, r3, #126976	@ 0x1f000
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
     ADC1->SQR1 |= (6 << ADC_SQR1_SQ2_Pos);    // canal 6
 8000772:	4b61      	ldr	r3, [pc, #388]	@ (80008f8 <main+0x6ec>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a60      	ldr	r2, [pc, #384]	@ (80008f8 <main+0x6ec>)
 8000778:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30

     ADC1->CR |=ADC_CR_ADEN;
 800077e:	4b5e      	ldr	r3, [pc, #376]	@ (80008f8 <main+0x6ec>)
 8000780:	689b      	ldr	r3, [r3, #8]
 8000782:	4a5d      	ldr	r2, [pc, #372]	@ (80008f8 <main+0x6ec>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6093      	str	r3, [r2, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  boton = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12);
 800078a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800078e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000792:	f001 fff1 	bl	8002778 <HAL_GPIO_ReadPin>
 8000796:	4603      	mov	r3, r0
 8000798:	461a      	mov	r2, r3
 800079a:	4b58      	ldr	r3, [pc, #352]	@ (80008fc <main+0x6f0>)
 800079c:	601a      	str	r2, [r3, #0]

	  if (boton == GPIO_PIN_RESET) // BotÃ³n presionado (0 lÃ³gico PONER EN RESET, LO PRUEBO ASI XQ MI BOTON ES UNA M*******
 800079e:	4b57      	ldr	r3, [pc, #348]	@ (80008fc <main+0x6f0>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	f040 8186 	bne.w	8000ab4 <main+0x8a8>
	          {
		       flag = 1; // activa la conversiÃ³n
 80007a8:	4b55      	ldr	r3, [pc, #340]	@ (8000900 <main+0x6f4>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	601a      	str	r2, [r3, #0]

		       // esto es para la del ambiente 1
		       if (datomap1 <= 5) {
 80007ae:	4b55      	ldr	r3, [pc, #340]	@ (8000904 <main+0x6f8>)
 80007b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007b4:	2b05      	cmp	r3, #5
 80007b6:	dc15      	bgt.n	80007e4 <main+0x5d8>
		                      TIM2->CCR4 = 0; //pwm off
 80007b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007bc:	2200      	movs	r2, #0
 80007be:	641a      	str	r2, [r3, #64]	@ 0x40
		                      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //led calefaccion
 80007c0:	2201      	movs	r2, #1
 80007c2:	2110      	movs	r1, #16
 80007c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c8:	f001 ffee 	bl	80027a8 <HAL_GPIO_WritePin>
		                      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); //led estado 1
 80007cc:	2201      	movs	r2, #1
 80007ce:	2104      	movs	r1, #4
 80007d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d4:	f001 ffe8 	bl	80027a8 <HAL_GPIO_WritePin>
		                      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // led estado 0
 80007d8:	2200      	movs	r2, #0
 80007da:	2180      	movs	r1, #128	@ 0x80
 80007dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e0:	f001 ffe2 	bl	80027a8 <HAL_GPIO_WritePin>
		                      }

		                      if ((datomap1 > 5) & (datomap1 <=20) ) {
 80007e4:	4b47      	ldr	r3, [pc, #284]	@ (8000904 <main+0x6f8>)
 80007e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007ea:	2b05      	cmp	r3, #5
 80007ec:	bfcc      	ite	gt
 80007ee:	2301      	movgt	r3, #1
 80007f0:	2300      	movle	r3, #0
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	4b43      	ldr	r3, [pc, #268]	@ (8000904 <main+0x6f8>)
 80007f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007fa:	2b14      	cmp	r3, #20
 80007fc:	bfd4      	ite	le
 80007fe:	2301      	movle	r3, #1
 8000800:	2300      	movgt	r3, #0
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4013      	ands	r3, r2
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	d015      	beq.n	8000838 <main+0x62c>
		                      TIM2->CCR4 = 0; //pwm off
 800080c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000810:	2200      	movs	r2, #0
 8000812:	641a      	str	r2, [r3, #64]	@ 0x40
		                      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //led calefaccion
 8000814:	2200      	movs	r2, #0
 8000816:	2110      	movs	r1, #16
 8000818:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800081c:	f001 ffc4 	bl	80027a8 <HAL_GPIO_WritePin>
		                      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); //led estado 1
 8000820:	2200      	movs	r2, #0
 8000822:	2104      	movs	r1, #4
 8000824:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000828:	f001 ffbe 	bl	80027a8 <HAL_GPIO_WritePin>
		                      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); //led estado 0
 800082c:	2201      	movs	r2, #1
 800082e:	2180      	movs	r1, #128	@ 0x80
 8000830:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000834:	f001 ffb8 	bl	80027a8 <HAL_GPIO_WritePin>

		                      }

		                      if ((datomap1 > 20) & (datomap1 <=30) ) {
 8000838:	4b32      	ldr	r3, [pc, #200]	@ (8000904 <main+0x6f8>)
 800083a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800083e:	2b14      	cmp	r3, #20
 8000840:	bfcc      	ite	gt
 8000842:	2301      	movgt	r3, #1
 8000844:	2300      	movle	r3, #0
 8000846:	b2da      	uxtb	r2, r3
 8000848:	4b2e      	ldr	r3, [pc, #184]	@ (8000904 <main+0x6f8>)
 800084a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800084e:	2b1e      	cmp	r3, #30
 8000850:	bfd4      	ite	le
 8000852:	2301      	movle	r3, #1
 8000854:	2300      	movgt	r3, #0
 8000856:	b2db      	uxtb	r3, r3
 8000858:	4013      	ands	r3, r2
 800085a:	b2db      	uxtb	r3, r3
 800085c:	2b00      	cmp	r3, #0
 800085e:	d015      	beq.n	800088c <main+0x680>
		                      TIM2->CCR4 = 40; //pwm 40%
 8000860:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000864:	2228      	movs	r2, #40	@ 0x28
 8000866:	641a      	str	r2, [r3, #64]	@ 0x40
		                      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //led calefaccion
 8000868:	2200      	movs	r2, #0
 800086a:	2110      	movs	r1, #16
 800086c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000870:	f001 ff9a 	bl	80027a8 <HAL_GPIO_WritePin>
		                      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); //led estado 1
 8000874:	2201      	movs	r2, #1
 8000876:	2104      	movs	r1, #4
 8000878:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800087c:	f001 ff94 	bl	80027a8 <HAL_GPIO_WritePin>
		                      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); //led estado 0
 8000880:	2201      	movs	r2, #1
 8000882:	2180      	movs	r1, #128	@ 0x80
 8000884:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000888:	f001 ff8e 	bl	80027a8 <HAL_GPIO_WritePin>
		                      }

		                      if ((datomap1 > 30) & (datomap1 <=35) ) {
 800088c:	4b1d      	ldr	r3, [pc, #116]	@ (8000904 <main+0x6f8>)
 800088e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000892:	2b1e      	cmp	r3, #30
 8000894:	bfcc      	ite	gt
 8000896:	2301      	movgt	r3, #1
 8000898:	2300      	movle	r3, #0
 800089a:	b2da      	uxtb	r2, r3
 800089c:	4b19      	ldr	r3, [pc, #100]	@ (8000904 <main+0x6f8>)
 800089e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008a2:	2b23      	cmp	r3, #35	@ 0x23
 80008a4:	bfd4      	ite	le
 80008a6:	2301      	movle	r3, #1
 80008a8:	2300      	movgt	r3, #0
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	4013      	ands	r3, r2
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d015      	beq.n	80008e0 <main+0x6d4>
		                      TIM2->CCR4 = 60; //pwm 60%
 80008b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008b8:	223c      	movs	r2, #60	@ 0x3c
 80008ba:	641a      	str	r2, [r3, #64]	@ 0x40
		                      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //led calefaccion
 80008bc:	2200      	movs	r2, #0
 80008be:	2110      	movs	r1, #16
 80008c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c4:	f001 ff70 	bl	80027a8 <HAL_GPIO_WritePin>
		                      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); //led estado 1
 80008c8:	2201      	movs	r2, #1
 80008ca:	2104      	movs	r1, #4
 80008cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d0:	f001 ff6a 	bl	80027a8 <HAL_GPIO_WritePin>
		                      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); //led estado 0
 80008d4:	2201      	movs	r2, #1
 80008d6:	2180      	movs	r1, #128	@ 0x80
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008dc:	f001 ff64 	bl	80027a8 <HAL_GPIO_WritePin>
		                      }

		                      if (datomap1 > 35) {
 80008e0:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <main+0x6f8>)
 80008e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008e6:	2b23      	cmp	r3, #35	@ 0x23
 80008e8:	dd24      	ble.n	8000934 <main+0x728>
 80008ea:	e00d      	b.n	8000908 <main+0x6fc>
 80008ec:	e000e100 	.word	0xe000e100
 80008f0:	40001000 	.word	0x40001000
 80008f4:	40012c00 	.word	0x40012c00
 80008f8:	50040000 	.word	0x50040000
 80008fc:	20000170 	.word	0x20000170
 8000900:	20000174 	.word	0x20000174
 8000904:	20000178 	.word	0x20000178
		                      TIM2->CCR4 = 100; //pwm 100%
 8000908:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800090c:	2264      	movs	r2, #100	@ 0x64
 800090e:	641a      	str	r2, [r3, #64]	@ 0x40
		                      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //led calefaccion
 8000910:	2200      	movs	r2, #0
 8000912:	2110      	movs	r1, #16
 8000914:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000918:	f001 ff46 	bl	80027a8 <HAL_GPIO_WritePin>
		                      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); //led estado 1
 800091c:	2201      	movs	r2, #1
 800091e:	2104      	movs	r1, #4
 8000920:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000924:	f001 ff40 	bl	80027a8 <HAL_GPIO_WritePin>
		                      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); //led estado 0
 8000928:	2201      	movs	r2, #1
 800092a:	2180      	movs	r1, #128	@ 0x80
 800092c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000930:	f001 ff3a 	bl	80027a8 <HAL_GPIO_WritePin>
		                      }

               // esto es para la del ambiente 2

               if (datomap2 <= 5) {
 8000934:	4b7d      	ldr	r3, [pc, #500]	@ (8000b2c <main+0x920>)
 8000936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800093a:	2b05      	cmp	r3, #5
 800093c:	dc17      	bgt.n	800096e <main+0x762>
//                                 TIM2->CCR1 = 0; // pwm off
//                                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); // led calefaccion2
//                                  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // led estado2 1
//                                  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // led estado2 0
            	   TIM1->CCR1 = 0; // pwm off
 800093e:	4b7c      	ldr	r3, [pc, #496]	@ (8000b30 <main+0x924>)
 8000940:	2200      	movs	r2, #0
 8000942:	635a      	str	r2, [r3, #52]	@ 0x34
            	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); //nuevo led calefaccion
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800094a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800094e:	f001 ff2b 	bl	80027a8 <HAL_GPIO_WritePin>
            	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //NUEVO led estado2
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000958:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800095c:	f001 ff24 	bl	80027a8 <HAL_GPIO_WritePin>
            	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); //NUEVO led estado2
 8000960:	2201      	movs	r2, #1
 8000962:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000966:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800096a:	f001 ff1d 	bl	80027a8 <HAL_GPIO_WritePin>
                              }

               if ((datomap2 > 5) & (datomap2 <= 20)) {
 800096e:	4b6f      	ldr	r3, [pc, #444]	@ (8000b2c <main+0x920>)
 8000970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000974:	2b05      	cmp	r3, #5
 8000976:	bfcc      	ite	gt
 8000978:	2301      	movgt	r3, #1
 800097a:	2300      	movle	r3, #0
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4b6b      	ldr	r3, [pc, #428]	@ (8000b2c <main+0x920>)
 8000980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000984:	2b14      	cmp	r3, #20
 8000986:	bfd4      	ite	le
 8000988:	2301      	movle	r3, #1
 800098a:	2300      	movgt	r3, #0
 800098c:	b2db      	uxtb	r3, r3
 800098e:	4013      	ands	r3, r2
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	d017      	beq.n	80009c6 <main+0x7ba>
//                                  TIM2->CCR1 = 0; // pwm off
//                                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // led calefaccion2
//                                  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // led estado2 1
//                                  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // led estado2 0
            	   TIM1->CCR1 = 0; // pwm off
 8000996:	4b66      	ldr	r3, [pc, #408]	@ (8000b30 <main+0x924>)
 8000998:	2200      	movs	r2, #0
 800099a:	635a      	str	r2, [r3, #52]	@ 0x34
            	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET); //nuevo led calefaccion
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a6:	f001 feff 	bl	80027a8 <HAL_GPIO_WritePin>
            	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);//NUEVO led estado2
 80009aa:	2201      	movs	r2, #1
 80009ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009b4:	f001 fef8 	bl	80027a8 <HAL_GPIO_WritePin>
            	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);//NUEVO led estado2
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c2:	f001 fef1 	bl	80027a8 <HAL_GPIO_WritePin>
                              }

               if ((datomap2 > 20) & (datomap2 <= 30)) {
 80009c6:	4b59      	ldr	r3, [pc, #356]	@ (8000b2c <main+0x920>)
 80009c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009cc:	2b14      	cmp	r3, #20
 80009ce:	bfcc      	ite	gt
 80009d0:	2301      	movgt	r3, #1
 80009d2:	2300      	movle	r3, #0
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b55      	ldr	r3, [pc, #340]	@ (8000b2c <main+0x920>)
 80009d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009dc:	2b1e      	cmp	r3, #30
 80009de:	bfd4      	ite	le
 80009e0:	2301      	movle	r3, #1
 80009e2:	2300      	movgt	r3, #0
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	4013      	ands	r3, r2
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d017      	beq.n	8000a1e <main+0x812>
//                                  TIM2->CCR1 = 40; // pwm 40%
//                                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // led calefaccion2
//                                  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // led estado2 1
//                                  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // led estado2 0
            	   TIM1->CCR1 = 40; // pwm 40%
 80009ee:	4b50      	ldr	r3, [pc, #320]	@ (8000b30 <main+0x924>)
 80009f0:	2228      	movs	r2, #40	@ 0x28
 80009f2:	635a      	str	r2, [r3, #52]	@ 0x34
            	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET); //nuevo led calefaccion
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009fe:	f001 fed3 	bl	80027a8 <HAL_GPIO_WritePin>
            	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);//NUEVO led estado2
 8000a02:	2201      	movs	r2, #1
 8000a04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a0c:	f001 fecc 	bl	80027a8 <HAL_GPIO_WritePin>
            	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);//NUEVO led estado2
 8000a10:	2201      	movs	r2, #1
 8000a12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a1a:	f001 fec5 	bl	80027a8 <HAL_GPIO_WritePin>
                              }

              if ((datomap2 > 30) & (datomap2 <= 35)) {
 8000a1e:	4b43      	ldr	r3, [pc, #268]	@ (8000b2c <main+0x920>)
 8000a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a24:	2b1e      	cmp	r3, #30
 8000a26:	bfcc      	ite	gt
 8000a28:	2301      	movgt	r3, #1
 8000a2a:	2300      	movle	r3, #0
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4b3f      	ldr	r3, [pc, #252]	@ (8000b2c <main+0x920>)
 8000a30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a34:	2b23      	cmp	r3, #35	@ 0x23
 8000a36:	bfd4      	ite	le
 8000a38:	2301      	movle	r3, #1
 8000a3a:	2300      	movgt	r3, #0
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	4013      	ands	r3, r2
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d017      	beq.n	8000a76 <main+0x86a>
//                                  TIM2->CCR1 = 60; // pwm 60%
//                                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // led calefaccion2
//                                  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // led estado2 1
//                                  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // led estado2 0
            	  TIM1->CCR1 = 60; // pwm 60%
 8000a46:	4b3a      	ldr	r3, [pc, #232]	@ (8000b30 <main+0x924>)
 8000a48:	223c      	movs	r2, #60	@ 0x3c
 8000a4a:	635a      	str	r2, [r3, #52]	@ 0x34
            	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET); //nuevo led calefaccion
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a56:	f001 fea7 	bl	80027a8 <HAL_GPIO_WritePin>
            	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);//NUEVO led estado2
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a64:	f001 fea0 	bl	80027a8 <HAL_GPIO_WritePin>
            	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);//NUEVO led estado2
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a72:	f001 fe99 	bl	80027a8 <HAL_GPIO_WritePin>
                              }

              if (datomap2 > 35) {
 8000a76:	4b2d      	ldr	r3, [pc, #180]	@ (8000b2c <main+0x920>)
 8000a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a7c:	2b23      	cmp	r3, #35	@ 0x23
 8000a7e:	f77f ae84 	ble.w	800078a <main+0x57e>
//                                  TIM2->CCR1 = 100; // pwm 100%
//                                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // led calefaccion2
//                                  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // led estado2 1
//                                  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // led estado2 0
            	  TIM1->CCR1 = 100; // pwm 100%
 8000a82:	4b2b      	ldr	r3, [pc, #172]	@ (8000b30 <main+0x924>)
 8000a84:	2264      	movs	r2, #100	@ 0x64
 8000a86:	635a      	str	r2, [r3, #52]	@ 0x34
            	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET); //nuevo led calefaccion
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a92:	f001 fe89 	bl	80027a8 <HAL_GPIO_WritePin>
            	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);//NUEVO led estado2
 8000a96:	2201      	movs	r2, #1
 8000a98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa0:	f001 fe82 	bl	80027a8 <HAL_GPIO_WritePin>
            	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);//NUEVO led estado2
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000aaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aae:	f001 fe7b 	bl	80027a8 <HAL_GPIO_WritePin>
 8000ab2:	e66a      	b.n	800078a <main+0x57e>
                              }
	          }

	   else // BotÃ³n no presionado (1 lÃ³gico)
		   {
	            flag = 0;
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b34 <main+0x928>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
	            TIM2->CCR4 = 0; //pwm 0%
 8000aba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000abe:	2200      	movs	r2, #0
 8000ac0:	641a      	str	r2, [r3, #64]	@ 0x40
	            TIM1->CCR1 = 0; //pwm 0%
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <main+0x924>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	635a      	str	r2, [r3, #52]	@ 0x34
//	            TIM2->CCR1 = 0; //pwm 0%
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //led calefaccion
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2110      	movs	r1, #16
 8000acc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad0:	f001 fe6a 	bl	80027a8 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); //led estado 1
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2104      	movs	r1, #4
 8000ad8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000adc:	f001 fe64 	bl	80027a8 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); //led estado 0
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2180      	movs	r1, #128	@ 0x80
 8000ae4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae8:	f001 fe5e 	bl	80027a8 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); //led calefaccion2
 8000aec:	2200      	movs	r2, #0
 8000aee:	2140      	movs	r1, #64	@ 0x40
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af4:	f001 fe58 	bl	80027a8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); //led estado2 1
 8000af8:	2200      	movs	r2, #0
 8000afa:	2140      	movs	r1, #64	@ 0x40
 8000afc:	480e      	ldr	r0, [pc, #56]	@ (8000b38 <main+0x92c>)
 8000afe:	f001 fe53 	bl	80027a8 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); //led estado2 0
 8000b02:	2200      	movs	r2, #0
 8000b04:	2180      	movs	r1, #128	@ 0x80
 8000b06:	480c      	ldr	r0, [pc, #48]	@ (8000b38 <main+0x92c>)
 8000b08:	f001 fe4e 	bl	80027a8 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);//NUEVO led estado2
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b16:	f001 fe47 	bl	80027a8 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);//NUEVO led estado2
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b24:	f001 fe40 	bl	80027a8 <HAL_GPIO_WritePin>
	  boton = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12);
 8000b28:	e62f      	b.n	800078a <main+0x57e>
 8000b2a:	bf00      	nop
 8000b2c:	2000017a 	.word	0x2000017a
 8000b30:	40012c00 	.word	0x40012c00
 8000b34:	20000174 	.word	0x20000174
 8000b38:	48000400 	.word	0x48000400

08000b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b096      	sub	sp, #88	@ 0x58
 8000b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	2244      	movs	r2, #68	@ 0x44
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f003 fe76 	bl	800483c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b50:	463b      	mov	r3, r7
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b5e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b62:	f001 fe47 	bl	80027f4 <HAL_PWREx_ControlVoltageScaling>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b6c:	f000 fa94 	bl	8001098 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b70:	2310      	movs	r3, #16
 8000b72:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b74:	2301      	movs	r3, #1
 8000b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b7c:	2360      	movs	r3, #96	@ 0x60
 8000b7e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f001 fe89 	bl	80028a0 <HAL_RCC_OscConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000b94:	f000 fa80 	bl	8001098 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b98:	230f      	movs	r3, #15
 8000b9a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bac:	463b      	mov	r3, r7
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f002 fa89 	bl	80030c8 <HAL_RCC_ClockConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000bbc:	f000 fa6c 	bl	8001098 <Error_Handler>
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	3758      	adds	r7, #88	@ 0x58
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bce:	463b      	mov	r3, r7
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
 8000bdc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bde:	4b29      	ldr	r3, [pc, #164]	@ (8000c84 <MX_ADC1_Init+0xbc>)
 8000be0:	4a29      	ldr	r2, [pc, #164]	@ (8000c88 <MX_ADC1_Init+0xc0>)
 8000be2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000be4:	4b27      	ldr	r3, [pc, #156]	@ (8000c84 <MX_ADC1_Init+0xbc>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bea:	4b26      	ldr	r3, [pc, #152]	@ (8000c84 <MX_ADC1_Init+0xbc>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bf0:	4b24      	ldr	r3, [pc, #144]	@ (8000c84 <MX_ADC1_Init+0xbc>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bf6:	4b23      	ldr	r3, [pc, #140]	@ (8000c84 <MX_ADC1_Init+0xbc>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bfc:	4b21      	ldr	r3, [pc, #132]	@ (8000c84 <MX_ADC1_Init+0xbc>)
 8000bfe:	2204      	movs	r2, #4
 8000c00:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c02:	4b20      	ldr	r3, [pc, #128]	@ (8000c84 <MX_ADC1_Init+0xbc>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c08:	4b1e      	ldr	r3, [pc, #120]	@ (8000c84 <MX_ADC1_Init+0xbc>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c84 <MX_ADC1_Init+0xbc>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	@ (8000c84 <MX_ADC1_Init+0xbc>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c1c:	4b19      	ldr	r3, [pc, #100]	@ (8000c84 <MX_ADC1_Init+0xbc>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c22:	4b18      	ldr	r3, [pc, #96]	@ (8000c84 <MX_ADC1_Init+0xbc>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c28:	4b16      	ldr	r3, [pc, #88]	@ (8000c84 <MX_ADC1_Init+0xbc>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c30:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <MX_ADC1_Init+0xbc>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c36:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <MX_ADC1_Init+0xbc>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c3e:	4811      	ldr	r0, [pc, #68]	@ (8000c84 <MX_ADC1_Init+0xbc>)
 8000c40:	f000 fdfa 	bl	8001838 <HAL_ADC_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000c4a:	f000 fa25 	bl	8001098 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <MX_ADC1_Init+0xc4>)
 8000c50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c52:	2306      	movs	r3, #6
 8000c54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c5a:	237f      	movs	r3, #127	@ 0x7f
 8000c5c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c5e:	2304      	movs	r3, #4
 8000c60:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c66:	463b      	mov	r3, r7
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4806      	ldr	r0, [pc, #24]	@ (8000c84 <MX_ADC1_Init+0xbc>)
 8000c6c:	f000 ff26 	bl	8001abc <HAL_ADC_ConfigChannel>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000c76:	f000 fa0f 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000028 	.word	0x20000028
 8000c88:	50040000 	.word	0x50040000
 8000c8c:	14f00020 	.word	0x14f00020

08000c90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b096      	sub	sp, #88	@ 0x58
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c96:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ca2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]
 8000cb2:	615a      	str	r2, [r3, #20]
 8000cb4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	222c      	movs	r2, #44	@ 0x2c
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f003 fdbd 	bl	800483c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cc2:	4b39      	ldr	r3, [pc, #228]	@ (8000da8 <MX_TIM1_Init+0x118>)
 8000cc4:	4a39      	ldr	r2, [pc, #228]	@ (8000dac <MX_TIM1_Init+0x11c>)
 8000cc6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cc8:	4b37      	ldr	r3, [pc, #220]	@ (8000da8 <MX_TIM1_Init+0x118>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cce:	4b36      	ldr	r3, [pc, #216]	@ (8000da8 <MX_TIM1_Init+0x118>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cd4:	4b34      	ldr	r3, [pc, #208]	@ (8000da8 <MX_TIM1_Init+0x118>)
 8000cd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cda:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cdc:	4b32      	ldr	r3, [pc, #200]	@ (8000da8 <MX_TIM1_Init+0x118>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ce2:	4b31      	ldr	r3, [pc, #196]	@ (8000da8 <MX_TIM1_Init+0x118>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce8:	4b2f      	ldr	r3, [pc, #188]	@ (8000da8 <MX_TIM1_Init+0x118>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cee:	482e      	ldr	r0, [pc, #184]	@ (8000da8 <MX_TIM1_Init+0x118>)
 8000cf0:	f002 ff15 	bl	8003b1e <HAL_TIM_PWM_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000cfa:	f000 f9cd 	bl	8001098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d02:	2300      	movs	r3, #0
 8000d04:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d0a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4825      	ldr	r0, [pc, #148]	@ (8000da8 <MX_TIM1_Init+0x118>)
 8000d12:	f003 fc97 	bl	8004644 <HAL_TIMEx_MasterConfigSynchronization>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d1c:	f000 f9bc 	bl	8001098 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d20:	2360      	movs	r3, #96	@ 0x60
 8000d22:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d34:	2300      	movs	r3, #0
 8000d36:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d3c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d40:	2200      	movs	r2, #0
 8000d42:	4619      	mov	r1, r3
 8000d44:	4818      	ldr	r0, [pc, #96]	@ (8000da8 <MX_TIM1_Init+0x118>)
 8000d46:	f003 f849 	bl	8003ddc <HAL_TIM_PWM_ConfigChannel>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000d50:	f000 f9a2 	bl	8001098 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d6c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	4619      	mov	r1, r3
 8000d88:	4807      	ldr	r0, [pc, #28]	@ (8000da8 <MX_TIM1_Init+0x118>)
 8000d8a:	f003 fcc1 	bl	8004710 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000d94:	f000 f980 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d98:	4803      	ldr	r0, [pc, #12]	@ (8000da8 <MX_TIM1_Init+0x118>)
 8000d9a:	f000 fa63 	bl	8001264 <HAL_TIM_MspPostInit>

}
 8000d9e:	bf00      	nop
 8000da0:	3758      	adds	r7, #88	@ 0x58
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000008c 	.word	0x2000008c
 8000dac:	40012c00 	.word	0x40012c00

08000db0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	@ 0x28
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
 8000dd0:	615a      	str	r2, [r3, #20]
 8000dd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dd4:	4b27      	ldr	r3, [pc, #156]	@ (8000e74 <MX_TIM2_Init+0xc4>)
 8000dd6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ddc:	4b25      	ldr	r3, [pc, #148]	@ (8000e74 <MX_TIM2_Init+0xc4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de2:	4b24      	ldr	r3, [pc, #144]	@ (8000e74 <MX_TIM2_Init+0xc4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000de8:	4b22      	ldr	r3, [pc, #136]	@ (8000e74 <MX_TIM2_Init+0xc4>)
 8000dea:	f04f 32ff 	mov.w	r2, #4294967295
 8000dee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df0:	4b20      	ldr	r3, [pc, #128]	@ (8000e74 <MX_TIM2_Init+0xc4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e74 <MX_TIM2_Init+0xc4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000dfc:	481d      	ldr	r0, [pc, #116]	@ (8000e74 <MX_TIM2_Init+0xc4>)
 8000dfe:	f002 fe8e 	bl	8003b1e <HAL_TIM_PWM_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000e08:	f000 f946 	bl	8001098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4816      	ldr	r0, [pc, #88]	@ (8000e74 <MX_TIM2_Init+0xc4>)
 8000e1c:	f003 fc12 	bl	8004644 <HAL_TIMEx_MasterConfigSynchronization>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000e26:	f000 f937 	bl	8001098 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e2a:	2360      	movs	r3, #96	@ 0x60
 8000e2c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480c      	ldr	r0, [pc, #48]	@ (8000e74 <MX_TIM2_Init+0xc4>)
 8000e42:	f002 ffcb 	bl	8003ddc <HAL_TIM_PWM_ConfigChannel>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e4c:	f000 f924 	bl	8001098 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e50:	463b      	mov	r3, r7
 8000e52:	220c      	movs	r2, #12
 8000e54:	4619      	mov	r1, r3
 8000e56:	4807      	ldr	r0, [pc, #28]	@ (8000e74 <MX_TIM2_Init+0xc4>)
 8000e58:	f002 ffc0 	bl	8003ddc <HAL_TIM_PWM_ConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000e62:	f000 f919 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e66:	4803      	ldr	r0, [pc, #12]	@ (8000e74 <MX_TIM2_Init+0xc4>)
 8000e68:	f000 f9fc 	bl	8001264 <HAL_TIM_MspPostInit>

}
 8000e6c:	bf00      	nop
 8000e6e:	3728      	adds	r7, #40	@ 0x28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	200000d8 	.word	0x200000d8

08000e78 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e88:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <MX_TIM6_Init+0x64>)
 8000e8a:	4a15      	ldr	r2, [pc, #84]	@ (8000ee0 <MX_TIM6_Init+0x68>)
 8000e8c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000e8e:	4b13      	ldr	r3, [pc, #76]	@ (8000edc <MX_TIM6_Init+0x64>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e94:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <MX_TIM6_Init+0x64>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000e9a:	4b10      	ldr	r3, [pc, #64]	@ (8000edc <MX_TIM6_Init+0x64>)
 8000e9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ea0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <MX_TIM6_Init+0x64>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ea8:	480c      	ldr	r0, [pc, #48]	@ (8000edc <MX_TIM6_Init+0x64>)
 8000eaa:	f002 fde1 	bl	8003a70 <HAL_TIM_Base_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000eb4:	f000 f8f0 	bl	8001098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	@ (8000edc <MX_TIM6_Init+0x64>)
 8000ec6:	f003 fbbd 	bl	8004644 <HAL_TIMEx_MasterConfigSynchronization>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000ed0:	f000 f8e2 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000124 	.word	0x20000124
 8000ee0:	40001000 	.word	0x40001000

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 030c 	add.w	r3, r7, #12
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa4 <MX_GPIO_Init+0xc0>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efe:	4a29      	ldr	r2, [pc, #164]	@ (8000fa4 <MX_GPIO_Init+0xc0>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f06:	4b27      	ldr	r3, [pc, #156]	@ (8000fa4 <MX_GPIO_Init+0xc0>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	4b24      	ldr	r3, [pc, #144]	@ (8000fa4 <MX_GPIO_Init+0xc0>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	4a23      	ldr	r2, [pc, #140]	@ (8000fa4 <MX_GPIO_Init+0xc0>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f1e:	4b21      	ldr	r3, [pc, #132]	@ (8000fa4 <MX_GPIO_Init+0xc0>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_ESTADO_1_Pin|LED_CALEFACCION_1_Pin|LED_CALEFACCION_2_Pin|LED_ESTADO_0_Pin
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f640 61d4 	movw	r1, #3796	@ 0xed4
 8000f30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f34:	f001 fc38 	bl	80027a8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ESTADO2_1_Pin|LED_ESTADO2_0_Pin, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	21c0      	movs	r1, #192	@ 0xc0
 8000f3c:	481a      	ldr	r0, [pc, #104]	@ (8000fa8 <MX_GPIO_Init+0xc4>)
 8000f3e:	f001 fc33 	bl	80027a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_ESTADO_1_Pin LED_CALEFACCION_1_Pin LED_CALEFACCION_2_Pin LED_ESTADO_0_Pin
                           PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = LED_ESTADO_1_Pin|LED_CALEFACCION_1_Pin|LED_CALEFACCION_2_Pin|LED_ESTADO_0_Pin
 8000f42:	f640 63d4 	movw	r3, #3796	@ 0xed4
 8000f46:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f5e:	f001 faa1 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTON_Pin */
  GPIO_InitStruct.Pin = BOTON_Pin;
 8000f62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BOTON_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	4619      	mov	r1, r3
 8000f76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f7a:	f001 fa93 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ESTADO2_1_Pin LED_ESTADO2_0_Pin */
  GPIO_InitStruct.Pin = LED_ESTADO2_1_Pin|LED_ESTADO2_0_Pin;
 8000f7e:	23c0      	movs	r3, #192	@ 0xc0
 8000f80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	4619      	mov	r1, r3
 8000f94:	4804      	ldr	r0, [pc, #16]	@ (8000fa8 <MX_GPIO_Init+0xc4>)
 8000f96:	f001 fa85 	bl	80024a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f9a:	bf00      	nop
 8000f9c:	3720      	adds	r7, #32
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	48000400 	.word	0x48000400

08000fac <LeerPote>:

/* USER CODE BEGIN 4 */
void LeerPote(void) {
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

	ADC1->SQR1 &= ~ ADC_SQR1_SQ1; //LIMPIO
 8000fb0:	4b33      	ldr	r3, [pc, #204]	@ (8001080 <LeerPote+0xd4>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb4:	4a32      	ldr	r2, [pc, #200]	@ (8001080 <LeerPote+0xd4>)
 8000fb6:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 8000fba:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC1->SQR1 = (5 << ADC_SQR1_SQ1_Pos);  // Canal 5 en la primera conversiÃ³n
 8000fbc:	4b30      	ldr	r3, [pc, #192]	@ (8001080 <LeerPote+0xd4>)
 8000fbe:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fc2:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC1->CR |= ADC_CR_ADSTART;            // Iniciar conversiÃ³n
 8000fc4:	4b2e      	ldr	r3, [pc, #184]	@ (8001080 <LeerPote+0xd4>)
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	4a2d      	ldr	r2, [pc, #180]	@ (8001080 <LeerPote+0xd4>)
 8000fca:	f043 0304 	orr.w	r3, r3, #4
 8000fce:	6093      	str	r3, [r2, #8]

    while ((ADC1->ISR & ADC_ISR_EOC) == 0) {}    // Esperar fin de conversiÃ³n
 8000fd0:	bf00      	nop
 8000fd2:	4b2b      	ldr	r3, [pc, #172]	@ (8001080 <LeerPote+0xd4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0f9      	beq.n	8000fd2 <LeerPote+0x26>

    datopote1 = ADC1->DR;
 8000fde:	4b28      	ldr	r3, [pc, #160]	@ (8001080 <LeerPote+0xd4>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	b21a      	sxth	r2, r3
 8000fe4:	4b27      	ldr	r3, [pc, #156]	@ (8001084 <LeerPote+0xd8>)
 8000fe6:	801a      	strh	r2, [r3, #0]
    datomap1 = ( (datopote1*120) / 4095 ) - 20 ; // -20 a 100
 8000fe8:	4b26      	ldr	r3, [pc, #152]	@ (8001084 <LeerPote+0xd8>)
 8000fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	1a9b      	subs	r3, r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	4a23      	ldr	r2, [pc, #140]	@ (8001088 <LeerPote+0xdc>)
 8000ffa:	fb82 1203 	smull	r1, r2, r2, r3
 8000ffe:	441a      	add	r2, r3
 8001000:	12d2      	asrs	r2, r2, #11
 8001002:	17db      	asrs	r3, r3, #31
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	b29b      	uxth	r3, r3
 8001008:	3b14      	subs	r3, #20
 800100a:	b29b      	uxth	r3, r3
 800100c:	b21a      	sxth	r2, r3
 800100e:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <LeerPote+0xe0>)
 8001010:	801a      	strh	r2, [r3, #0]

    ADC1->SQR1 &= ~ ADC_SQR1_SQ1; //LIMPIO
 8001012:	4b1b      	ldr	r3, [pc, #108]	@ (8001080 <LeerPote+0xd4>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	4a1a      	ldr	r2, [pc, #104]	@ (8001080 <LeerPote+0xd4>)
 8001018:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 800101c:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC1->SQR1 = (6 << ADC_SQR1_SQ1_Pos);  // Canal 6 en la primera conversiÃ³n
 800101e:	4b18      	ldr	r3, [pc, #96]	@ (8001080 <LeerPote+0xd4>)
 8001020:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001024:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC1->CR |= ADC_CR_ADSTART;            // Iniciar conversiÃ³n
 8001026:	4b16      	ldr	r3, [pc, #88]	@ (8001080 <LeerPote+0xd4>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	4a15      	ldr	r2, [pc, #84]	@ (8001080 <LeerPote+0xd4>)
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	6093      	str	r3, [r2, #8]

    while (!(ADC1->ISR & ADC_ISR_EOC));    // Esperar fin de conversiÃ³n
 8001032:	bf00      	nop
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <LeerPote+0xd4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0f9      	beq.n	8001034 <LeerPote+0x88>

    datopote2 = ADC1->DR;
 8001040:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <LeerPote+0xd4>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001044:	b21a      	sxth	r2, r3
 8001046:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <LeerPote+0xe4>)
 8001048:	801a      	strh	r2, [r3, #0]
    datomap2 = ( (datopote2*120) / 4095 ) - 20 ; // -20 a 100
 800104a:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <LeerPote+0xe4>)
 800104c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001050:	461a      	mov	r2, r3
 8001052:	4613      	mov	r3, r2
 8001054:	011b      	lsls	r3, r3, #4
 8001056:	1a9b      	subs	r3, r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4a0b      	ldr	r2, [pc, #44]	@ (8001088 <LeerPote+0xdc>)
 800105c:	fb82 1203 	smull	r1, r2, r2, r3
 8001060:	441a      	add	r2, r3
 8001062:	12d2      	asrs	r2, r2, #11
 8001064:	17db      	asrs	r3, r3, #31
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	b29b      	uxth	r3, r3
 800106a:	3b14      	subs	r3, #20
 800106c:	b29b      	uxth	r3, r3
 800106e:	b21a      	sxth	r2, r3
 8001070:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <LeerPote+0xe8>)
 8001072:	801a      	strh	r2, [r3, #0]

}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	50040000 	.word	0x50040000
 8001084:	2000017c 	.word	0x2000017c
 8001088:	80080081 	.word	0x80080081
 800108c:	20000178 	.word	0x20000178
 8001090:	2000017e 	.word	0x2000017e
 8001094:	2000017a 	.word	0x2000017a

08001098 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800109c:	b672      	cpsid	i
}
 800109e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <Error_Handler+0x8>

080010a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010aa:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <HAL_MspInit+0x44>)
 80010ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ae:	4a0e      	ldr	r2, [pc, #56]	@ (80010e8 <HAL_MspInit+0x44>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80010b6:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <HAL_MspInit+0x44>)
 80010b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <HAL_MspInit+0x44>)
 80010c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c6:	4a08      	ldr	r2, [pc, #32]	@ (80010e8 <HAL_MspInit+0x44>)
 80010c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <HAL_MspInit+0x44>)
 80010d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40021000 	.word	0x40021000

080010ec <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b09e      	sub	sp, #120	@ 0x78
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	2254      	movs	r2, #84	@ 0x54
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f003 fb95 	bl	800483c <memset>
  if(hadc->Instance==ADC1)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a25      	ldr	r2, [pc, #148]	@ (80011ac <HAL_ADC_MspInit+0xc0>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d143      	bne.n	80011a4 <HAL_ADC_MspInit+0xb8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800111c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001120:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001122:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001126:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001128:	2301      	movs	r3, #1
 800112a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800112c:	2301      	movs	r3, #1
 800112e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001130:	2310      	movs	r3, #16
 8001132:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001134:	2307      	movs	r3, #7
 8001136:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001138:	2302      	movs	r3, #2
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800113c:	2302      	movs	r3, #2
 800113e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001140:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001144:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	4618      	mov	r0, r3
 800114c:	f002 f9a8 	bl	80034a0 <HAL_RCCEx_PeriphCLKConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001156:	f7ff ff9f 	bl	8001098 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800115a:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <HAL_ADC_MspInit+0xc4>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	4a14      	ldr	r2, [pc, #80]	@ (80011b0 <HAL_ADC_MspInit+0xc4>)
 8001160:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001164:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001166:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <HAL_ADC_MspInit+0xc4>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <HAL_ADC_MspInit+0xc4>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001176:	4a0e      	ldr	r2, [pc, #56]	@ (80011b0 <HAL_ADC_MspInit+0xc4>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800117e:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <HAL_ADC_MspInit+0xc4>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = POTE_1_Pin|POTE_2_Pin;
 800118a:	2303      	movs	r3, #3
 800118c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800118e:	230b      	movs	r3, #11
 8001190:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800119a:	4619      	mov	r1, r3
 800119c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011a0:	f001 f980 	bl	80024a4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80011a4:	bf00      	nop
 80011a6:	3778      	adds	r7, #120	@ 0x78
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	50040000 	.word	0x50040000
 80011b0:	40021000 	.word	0x40021000

080011b4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a13      	ldr	r2, [pc, #76]	@ (8001210 <HAL_TIM_PWM_MspInit+0x5c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d10c      	bne.n	80011e0 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011c6:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <HAL_TIM_PWM_MspInit+0x60>)
 80011c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ca:	4a12      	ldr	r2, [pc, #72]	@ (8001214 <HAL_TIM_PWM_MspInit+0x60>)
 80011cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80011d2:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <HAL_TIM_PWM_MspInit+0x60>)
 80011d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011de:	e010      	b.n	8001202 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011e8:	d10b      	bne.n	8001202 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <HAL_TIM_PWM_MspInit+0x60>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ee:	4a09      	ldr	r2, [pc, #36]	@ (8001214 <HAL_TIM_PWM_MspInit+0x60>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011f6:	4b07      	ldr	r3, [pc, #28]	@ (8001214 <HAL_TIM_PWM_MspInit+0x60>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40012c00 	.word	0x40012c00
 8001214:	40021000 	.word	0x40021000

08001218 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0d      	ldr	r2, [pc, #52]	@ (800125c <HAL_TIM_Base_MspInit+0x44>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d113      	bne.n	8001252 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800122a:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <HAL_TIM_Base_MspInit+0x48>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122e:	4a0c      	ldr	r2, [pc, #48]	@ (8001260 <HAL_TIM_Base_MspInit+0x48>)
 8001230:	f043 0310 	orr.w	r3, r3, #16
 8001234:	6593      	str	r3, [r2, #88]	@ 0x58
 8001236:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <HAL_TIM_Base_MspInit+0x48>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123a:	f003 0310 	and.w	r3, r3, #16
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	2036      	movs	r0, #54	@ 0x36
 8001248:	f001 f8f5 	bl	8002436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800124c:	2036      	movs	r0, #54	@ 0x36
 800124e:	f001 f90e 	bl	800246e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40001000 	.word	0x40001000
 8001260:	40021000 	.word	0x40021000

08001264 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	@ 0x28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a23      	ldr	r2, [pc, #140]	@ (8001310 <HAL_TIM_MspPostInit+0xac>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d11e      	bne.n	80012c4 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	4b23      	ldr	r3, [pc, #140]	@ (8001314 <HAL_TIM_MspPostInit+0xb0>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128a:	4a22      	ldr	r2, [pc, #136]	@ (8001314 <HAL_TIM_MspPostInit+0xb0>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001292:	4b20      	ldr	r3, [pc, #128]	@ (8001314 <HAL_TIM_MspPostInit+0xb0>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800129e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012b0:	2301      	movs	r3, #1
 80012b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012be:	f001 f8f1 	bl	80024a4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80012c2:	e021      	b.n	8001308 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012cc:	d11c      	bne.n	8001308 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <HAL_TIM_MspPostInit+0xb0>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d2:	4a10      	ldr	r2, [pc, #64]	@ (8001314 <HAL_TIM_MspPostInit+0xb0>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012da:	4b0e      	ldr	r3, [pc, #56]	@ (8001314 <HAL_TIM_MspPostInit+0xb0>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_EXTRACTOR_1_Pin|LED_EXTRACTOR_2_Pin;
 80012e6:	2328      	movs	r3, #40	@ 0x28
 80012e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012f6:	2301      	movs	r3, #1
 80012f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001304:	f001 f8ce 	bl	80024a4 <HAL_GPIO_Init>
}
 8001308:	bf00      	nop
 800130a:	3728      	adds	r7, #40	@ 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40012c00 	.word	0x40012c00
 8001314:	40021000 	.word	0x40021000

08001318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <NMI_Handler+0x4>

08001320 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <HardFault_Handler+0x4>

08001328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <MemManage_Handler+0x4>

08001330 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <BusFault_Handler+0x4>

08001338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <UsageFault_Handler+0x4>

08001340 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800136e:	f000 f893 	bl	8001498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <SystemInit+0x20>)
 800137e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001382:	4a05      	ldr	r2, [pc, #20]	@ (8001398 <SystemInit+0x20>)
 8001384:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001388:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800139c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013a0:	f7ff ffea 	bl	8001378 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a4:	480c      	ldr	r0, [pc, #48]	@ (80013d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80013a6:	490d      	ldr	r1, [pc, #52]	@ (80013dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80013a8:	4a0d      	ldr	r2, [pc, #52]	@ (80013e0 <LoopForever+0xe>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ac:	e002      	b.n	80013b4 <LoopCopyDataInit>

080013ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b2:	3304      	adds	r3, #4

080013b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b8:	d3f9      	bcc.n	80013ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ba:	4a0a      	ldr	r2, [pc, #40]	@ (80013e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013bc:	4c0a      	ldr	r4, [pc, #40]	@ (80013e8 <LoopForever+0x16>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c0:	e001      	b.n	80013c6 <LoopFillZerobss>

080013c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c4:	3204      	adds	r2, #4

080013c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c8:	d3fb      	bcc.n	80013c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ca:	f003 fa3f 	bl	800484c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ce:	f7fe ff1d 	bl	800020c <main>

080013d2 <LoopForever>:

LoopForever:
    b LoopForever
 80013d2:	e7fe      	b.n	80013d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013d4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80013d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013e0:	080048f4 	.word	0x080048f4
  ldr r2, =_sbss
 80013e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013e8:	20000184 	.word	0x20000184

080013ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013ec:	e7fe      	b.n	80013ec <ADC1_IRQHandler>

080013ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f8:	2003      	movs	r0, #3
 80013fa:	f001 f811 	bl	8002420 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013fe:	200f      	movs	r0, #15
 8001400:	f000 f80e 	bl	8001420 <HAL_InitTick>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d002      	beq.n	8001410 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	71fb      	strb	r3, [r7, #7]
 800140e:	e001      	b.n	8001414 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001410:	f7ff fe48 	bl	80010a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001414:	79fb      	ldrb	r3, [r7, #7]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001428:	2300      	movs	r3, #0
 800142a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800142c:	4b17      	ldr	r3, [pc, #92]	@ (800148c <HAL_InitTick+0x6c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d023      	beq.n	800147c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001434:	4b16      	ldr	r3, [pc, #88]	@ (8001490 <HAL_InitTick+0x70>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b14      	ldr	r3, [pc, #80]	@ (800148c <HAL_InitTick+0x6c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4619      	mov	r1, r3
 800143e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001442:	fbb3 f3f1 	udiv	r3, r3, r1
 8001446:	fbb2 f3f3 	udiv	r3, r2, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f001 f81d 	bl	800248a <HAL_SYSTICK_Config>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10f      	bne.n	8001476 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b0f      	cmp	r3, #15
 800145a:	d809      	bhi.n	8001470 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800145c:	2200      	movs	r2, #0
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	f04f 30ff 	mov.w	r0, #4294967295
 8001464:	f000 ffe7 	bl	8002436 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001468:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <HAL_InitTick+0x74>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e007      	b.n	8001480 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	e004      	b.n	8001480 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	73fb      	strb	r3, [r7, #15]
 800147a:	e001      	b.n	8001480 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001480:	7bfb      	ldrb	r3, [r7, #15]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000008 	.word	0x20000008
 8001490:	20000000 	.word	0x20000000
 8001494:	20000004 	.word	0x20000004

08001498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_IncTick+0x20>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_IncTick+0x24>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	4a04      	ldr	r2, [pc, #16]	@ (80014bc <HAL_IncTick+0x24>)
 80014aa:	6013      	str	r3, [r2, #0]
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000008 	.word	0x20000008
 80014bc:	20000180 	.word	0x20000180

080014c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return uwTick;
 80014c4:	4b03      	ldr	r3, [pc, #12]	@ (80014d4 <HAL_GetTick+0x14>)
 80014c6:	681b      	ldr	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000180 	.word	0x20000180

080014d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e0:	f7ff ffee 	bl	80014c0 <HAL_GetTick>
 80014e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f0:	d005      	beq.n	80014fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014f2:	4b0a      	ldr	r3, [pc, #40]	@ (800151c <HAL_Delay+0x44>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4413      	add	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014fe:	bf00      	nop
 8001500:	f7ff ffde 	bl	80014c0 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	429a      	cmp	r2, r3
 800150e:	d8f7      	bhi.n	8001500 <HAL_Delay+0x28>
  {
  }
}
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000008 	.word	0x20000008

08001520 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	609a      	str	r2, [r3, #8]
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	431a      	orrs	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	609a      	str	r2, [r3, #8]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001588:	b480      	push	{r7}
 800158a:	b087      	sub	sp, #28
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	3360      	adds	r3, #96	@ 0x60
 800159a:	461a      	mov	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <LL_ADC_SetOffset+0x44>)
 80015aa:	4013      	ands	r3, r2
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	4313      	orrs	r3, r2
 80015b8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015c0:	bf00      	nop
 80015c2:	371c      	adds	r7, #28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	03fff000 	.word	0x03fff000

080015d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3360      	adds	r3, #96	@ 0x60
 80015de:	461a      	mov	r2, r3
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b087      	sub	sp, #28
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	3360      	adds	r3, #96	@ 0x60
 800160c:	461a      	mov	r2, r3
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	431a      	orrs	r2, r3
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001626:	bf00      	nop
 8001628:	371c      	adds	r7, #28
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001632:	b480      	push	{r7}
 8001634:	b087      	sub	sp, #28
 8001636:	af00      	add	r7, sp, #0
 8001638:	60f8      	str	r0, [r7, #12]
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	3330      	adds	r3, #48	@ 0x30
 8001642:	461a      	mov	r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	0a1b      	lsrs	r3, r3, #8
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	4413      	add	r3, r2
 8001650:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	f003 031f 	and.w	r3, r3, #31
 800165c:	211f      	movs	r1, #31
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	401a      	ands	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	0e9b      	lsrs	r3, r3, #26
 800166a:	f003 011f 	and.w	r1, r3, #31
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	f003 031f 	and.w	r3, r3, #31
 8001674:	fa01 f303 	lsl.w	r3, r1, r3
 8001678:	431a      	orrs	r2, r3
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800167e:	bf00      	nop
 8001680:	371c      	adds	r7, #28
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800168a:	b480      	push	{r7}
 800168c:	b087      	sub	sp, #28
 800168e:	af00      	add	r7, sp, #0
 8001690:	60f8      	str	r0, [r7, #12]
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	3314      	adds	r3, #20
 800169a:	461a      	mov	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	0e5b      	lsrs	r3, r3, #25
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	4413      	add	r3, r2
 80016a8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	0d1b      	lsrs	r3, r3, #20
 80016b2:	f003 031f 	and.w	r3, r3, #31
 80016b6:	2107      	movs	r1, #7
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	401a      	ands	r2, r3
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	0d1b      	lsrs	r3, r3, #20
 80016c4:	f003 031f 	and.w	r3, r3, #31
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	431a      	orrs	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016d4:	bf00      	nop
 80016d6:	371c      	adds	r7, #28
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016f8:	43db      	mvns	r3, r3
 80016fa:	401a      	ands	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f003 0318 	and.w	r3, r3, #24
 8001702:	4908      	ldr	r1, [pc, #32]	@ (8001724 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001704:	40d9      	lsrs	r1, r3
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	400b      	ands	r3, r1
 800170a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800170e:	431a      	orrs	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	0007ffff 	.word	0x0007ffff

08001728 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001738:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6093      	str	r3, [r2, #8]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800175c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001760:	d101      	bne.n	8001766 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001784:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001788:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80017b0:	d101      	bne.n	80017b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d101      	bne.n	80017dc <LL_ADC_IsEnabled+0x18>
 80017d8:	2301      	movs	r3, #1
 80017da:	e000      	b.n	80017de <LL_ADC_IsEnabled+0x1a>
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d101      	bne.n	8001802 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	2b08      	cmp	r3, #8
 8001822:	d101      	bne.n	8001828 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e126      	b.n	8001aa0 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800185c:	2b00      	cmp	r3, #0
 800185e:	d109      	bne.n	8001874 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff fc43 	bl	80010ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff67 	bl	800174c <LL_ADC_IsDeepPowerDownEnabled>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d004      	beq.n	800188e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff4d 	bl	8001728 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff ff82 	bl	800179c <LL_ADC_IsInternalRegulatorEnabled>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d115      	bne.n	80018ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ff66 	bl	8001774 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018a8:	4b7f      	ldr	r3, [pc, #508]	@ (8001aa8 <HAL_ADC_Init+0x270>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	099b      	lsrs	r3, r3, #6
 80018ae:	4a7f      	ldr	r2, [pc, #508]	@ (8001aac <HAL_ADC_Init+0x274>)
 80018b0:	fba2 2303 	umull	r2, r3, r2, r3
 80018b4:	099b      	lsrs	r3, r3, #6
 80018b6:	3301      	adds	r3, #1
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018bc:	e002      	b.n	80018c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f9      	bne.n	80018be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ff64 	bl	800179c <LL_ADC_IsInternalRegulatorEnabled>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10d      	bne.n	80018f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018de:	f043 0210 	orr.w	r2, r3, #16
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ea:	f043 0201 	orr.w	r2, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff ff75 	bl	80017ea <LL_ADC_REG_IsConversionOngoing>
 8001900:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	2b00      	cmp	r3, #0
 800190c:	f040 80bf 	bne.w	8001a8e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	2b00      	cmp	r3, #0
 8001914:	f040 80bb 	bne.w	8001a8e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800191c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001920:	f043 0202 	orr.w	r2, r3, #2
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff49 	bl	80017c4 <LL_ADC_IsEnabled>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10b      	bne.n	8001950 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001938:	485d      	ldr	r0, [pc, #372]	@ (8001ab0 <HAL_ADC_Init+0x278>)
 800193a:	f7ff ff43 	bl	80017c4 <LL_ADC_IsEnabled>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d105      	bne.n	8001950 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4619      	mov	r1, r3
 800194a:	485a      	ldr	r0, [pc, #360]	@ (8001ab4 <HAL_ADC_Init+0x27c>)
 800194c:	f7ff fde8 	bl	8001520 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	7e5b      	ldrb	r3, [r3, #25]
 8001954:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800195a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001960:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001966:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800196e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 3020 	ldrb.w	r3, [r3, #32]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d106      	bne.n	800198c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001982:	3b01      	subs	r3, #1
 8001984:	045b      	lsls	r3, r3, #17
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001990:	2b00      	cmp	r3, #0
 8001992:	d009      	beq.n	80019a8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001998:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	4b42      	ldr	r3, [pc, #264]	@ (8001ab8 <HAL_ADC_Init+0x280>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	69b9      	ldr	r1, [r7, #24]
 80019b8:	430b      	orrs	r3, r1
 80019ba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff25 	bl	8001810 <LL_ADC_INJ_IsConversionOngoing>
 80019c6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d13d      	bne.n	8001a4a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d13a      	bne.n	8001a4a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019d8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019e0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80019f0:	f023 0302 	bic.w	r3, r3, #2
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	69b9      	ldr	r1, [r7, #24]
 80019fa:	430b      	orrs	r3, r1
 80019fc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d118      	bne.n	8001a3a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001a12:	f023 0304 	bic.w	r3, r3, #4
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a1e:	4311      	orrs	r1, r2
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001a24:	4311      	orrs	r1, r2
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0201 	orr.w	r2, r2, #1
 8001a36:	611a      	str	r2, [r3, #16]
 8001a38:	e007      	b.n	8001a4a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	691a      	ldr	r2, [r3, #16]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0201 	bic.w	r2, r2, #1
 8001a48:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d10c      	bne.n	8001a6c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a58:	f023 010f 	bic.w	r1, r3, #15
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	1e5a      	subs	r2, r3, #1
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a6a:	e007      	b.n	8001a7c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 020f 	bic.w	r2, r2, #15
 8001a7a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a80:	f023 0303 	bic.w	r3, r3, #3
 8001a84:	f043 0201 	orr.w	r2, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a8c:	e007      	b.n	8001a9e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a92:	f043 0210 	orr.w	r2, r3, #16
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3720      	adds	r7, #32
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	053e2d63 	.word	0x053e2d63
 8001ab0:	50040000 	.word	0x50040000
 8001ab4:	50040300 	.word	0x50040300
 8001ab8:	fff0c007 	.word	0xfff0c007

08001abc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b0b6      	sub	sp, #216	@ 0xd8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d101      	bne.n	8001ade <HAL_ADC_ConfigChannel+0x22>
 8001ada:	2302      	movs	r3, #2
 8001adc:	e3bb      	b.n	8002256 <HAL_ADC_ConfigChannel+0x79a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fe7d 	bl	80017ea <LL_ADC_REG_IsConversionOngoing>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f040 83a0 	bne.w	8002238 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b05      	cmp	r3, #5
 8001b06:	d824      	bhi.n	8001b52 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	3b02      	subs	r3, #2
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d81b      	bhi.n	8001b4a <HAL_ADC_ConfigChannel+0x8e>
 8001b12:	a201      	add	r2, pc, #4	@ (adr r2, 8001b18 <HAL_ADC_ConfigChannel+0x5c>)
 8001b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b18:	08001b29 	.word	0x08001b29
 8001b1c:	08001b31 	.word	0x08001b31
 8001b20:	08001b39 	.word	0x08001b39
 8001b24:	08001b41 	.word	0x08001b41
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001b28:	230c      	movs	r3, #12
 8001b2a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b2e:	e010      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001b30:	2312      	movs	r3, #18
 8001b32:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b36:	e00c      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001b38:	2318      	movs	r3, #24
 8001b3a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b3e:	e008      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001b40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b48:	e003      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001b4a:	2306      	movs	r3, #6
 8001b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b50:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001b60:	f7ff fd67 	bl	8001632 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fe3e 	bl	80017ea <LL_ADC_REG_IsConversionOngoing>
 8001b6e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fe4a 	bl	8001810 <LL_ADC_INJ_IsConversionOngoing>
 8001b7c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f040 81a4 	bne.w	8001ed2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f040 819f 	bne.w	8001ed2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6818      	ldr	r0, [r3, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	6819      	ldr	r1, [r3, #0]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	f7ff fd72 	bl	800168a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	08db      	lsrs	r3, r3, #3
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d00a      	beq.n	8001bde <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	6919      	ldr	r1, [r3, #16]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001bd8:	f7ff fcd6 	bl	8001588 <LL_ADC_SetOffset>
 8001bdc:	e179      	b.n	8001ed2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fcf3 	bl	80015d0 <LL_ADC_GetOffsetChannel>
 8001bea:	4603      	mov	r3, r0
 8001bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10a      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x14e>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fce8 	bl	80015d0 <LL_ADC_GetOffsetChannel>
 8001c00:	4603      	mov	r3, r0
 8001c02:	0e9b      	lsrs	r3, r3, #26
 8001c04:	f003 021f 	and.w	r2, r3, #31
 8001c08:	e01e      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x18c>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fcdd 	bl	80015d0 <LL_ADC_GetOffsetChannel>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c20:	fa93 f3a3 	rbit	r3, r3
 8001c24:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001c38:	2320      	movs	r3, #32
 8001c3a:	e004      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001c3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c40:	fab3 f383 	clz	r3, r3
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d105      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x1a4>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	0e9b      	lsrs	r3, r3, #26
 8001c5a:	f003 031f 	and.w	r3, r3, #31
 8001c5e:	e018      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x1d6>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c6c:	fa93 f3a3 	rbit	r3, r3
 8001c70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001c74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001c7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001c84:	2320      	movs	r3, #32
 8001c86:	e004      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001c88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c8c:	fab3 f383 	clz	r3, r3
 8001c90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d106      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fcac 	bl	80015fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2101      	movs	r1, #1
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fc90 	bl	80015d0 <LL_ADC_GetOffsetChannel>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10a      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x214>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fc85 	bl	80015d0 <LL_ADC_GetOffsetChannel>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	0e9b      	lsrs	r3, r3, #26
 8001cca:	f003 021f 	and.w	r2, r3, #31
 8001cce:	e01e      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x252>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fc7a 	bl	80015d0 <LL_ADC_GetOffsetChannel>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001cee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001cf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001cfe:	2320      	movs	r3, #32
 8001d00:	e004      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001d02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d105      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x26a>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	0e9b      	lsrs	r3, r3, #26
 8001d20:	f003 031f 	and.w	r3, r3, #31
 8001d24:	e018      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x29c>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d32:	fa93 f3a3 	rbit	r3, r3
 8001d36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001d3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d3e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001d42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001d4a:	2320      	movs	r3, #32
 8001d4c:	e004      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001d4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d52:	fab3 f383 	clz	r3, r3
 8001d56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d106      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2200      	movs	r2, #0
 8001d62:	2101      	movs	r1, #1
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fc49 	bl	80015fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2102      	movs	r1, #2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fc2d 	bl	80015d0 <LL_ADC_GetOffsetChannel>
 8001d76:	4603      	mov	r3, r0
 8001d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10a      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x2da>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2102      	movs	r1, #2
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fc22 	bl	80015d0 <LL_ADC_GetOffsetChannel>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	0e9b      	lsrs	r3, r3, #26
 8001d90:	f003 021f 	and.w	r2, r3, #31
 8001d94:	e01e      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x318>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2102      	movs	r1, #2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fc17 	bl	80015d0 <LL_ADC_GetOffsetChannel>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001db4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001db8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001dbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001dc4:	2320      	movs	r3, #32
 8001dc6:	e004      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001dc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d105      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x330>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	0e9b      	lsrs	r3, r3, #26
 8001de6:	f003 031f 	and.w	r3, r3, #31
 8001dea:	e014      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x35a>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001df4:	fa93 f3a3 	rbit	r3, r3
 8001df8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001dfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001dfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001e00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001e08:	2320      	movs	r3, #32
 8001e0a:	e004      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001e0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e10:	fab3 f383 	clz	r3, r3
 8001e14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d106      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2102      	movs	r1, #2
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fbea 	bl	80015fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2103      	movs	r1, #3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fbce 	bl	80015d0 <LL_ADC_GetOffsetChannel>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10a      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x398>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2103      	movs	r1, #3
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fbc3 	bl	80015d0 <LL_ADC_GetOffsetChannel>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	0e9b      	lsrs	r3, r3, #26
 8001e4e:	f003 021f 	and.w	r2, r3, #31
 8001e52:	e017      	b.n	8001e84 <HAL_ADC_ConfigChannel+0x3c8>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2103      	movs	r1, #3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fbb8 	bl	80015d0 <LL_ADC_GetOffsetChannel>
 8001e60:	4603      	mov	r3, r0
 8001e62:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001e6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e6e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001e70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001e76:	2320      	movs	r3, #32
 8001e78:	e003      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001e7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e7c:	fab3 f383 	clz	r3, r3
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d105      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x3e0>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	0e9b      	lsrs	r3, r3, #26
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	e011      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x404>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ea4:	fa93 f3a3 	rbit	r3, r3
 8001ea8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001eaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001eac:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001eae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001eb4:	2320      	movs	r3, #32
 8001eb6:	e003      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001eb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001eba:	fab3 f383 	clz	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d106      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2103      	movs	r1, #3
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fb95 	bl	80015fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fc74 	bl	80017c4 <LL_ADC_IsEnabled>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f040 8140 	bne.w	8002164 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	6819      	ldr	r1, [r3, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	f7ff fbf5 	bl	80016e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	4a8f      	ldr	r2, [pc, #572]	@ (8002138 <HAL_ADC_ConfigChannel+0x67c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	f040 8131 	bne.w	8002164 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10b      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x46e>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	0e9b      	lsrs	r3, r3, #26
 8001f18:	3301      	adds	r3, #1
 8001f1a:	f003 031f 	and.w	r3, r3, #31
 8001f1e:	2b09      	cmp	r3, #9
 8001f20:	bf94      	ite	ls
 8001f22:	2301      	movls	r3, #1
 8001f24:	2300      	movhi	r3, #0
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	e019      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x4a2>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f32:	fa93 f3a3 	rbit	r3, r3
 8001f36:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001f38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001f3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001f42:	2320      	movs	r3, #32
 8001f44:	e003      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001f46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f48:	fab3 f383 	clz	r3, r3
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	3301      	adds	r3, #1
 8001f50:	f003 031f 	and.w	r3, r3, #31
 8001f54:	2b09      	cmp	r3, #9
 8001f56:	bf94      	ite	ls
 8001f58:	2301      	movls	r3, #1
 8001f5a:	2300      	movhi	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d079      	beq.n	8002056 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d107      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x4c2>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	0e9b      	lsrs	r3, r3, #26
 8001f74:	3301      	adds	r3, #1
 8001f76:	069b      	lsls	r3, r3, #26
 8001f78:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f7c:	e015      	b.n	8001faa <HAL_ADC_ConfigChannel+0x4ee>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001f8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f8e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001f90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001f96:	2320      	movs	r3, #32
 8001f98:	e003      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001f9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f9c:	fab3 f383 	clz	r3, r3
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	069b      	lsls	r3, r3, #26
 8001fa6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d109      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x50e>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	0e9b      	lsrs	r3, r3, #26
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	f003 031f 	and.w	r3, r3, #31
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	e017      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x53e>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fd2:	fa93 f3a3 	rbit	r3, r3
 8001fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fda:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001fdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001fe2:	2320      	movs	r3, #32
 8001fe4:	e003      	b.n	8001fee <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001fe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fe8:	fab3 f383 	clz	r3, r3
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffa:	ea42 0103 	orr.w	r1, r2, r3
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10a      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x564>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	0e9b      	lsrs	r3, r3, #26
 8002010:	3301      	adds	r3, #1
 8002012:	f003 021f 	and.w	r2, r3, #31
 8002016:	4613      	mov	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	4413      	add	r3, r2
 800201c:	051b      	lsls	r3, r3, #20
 800201e:	e018      	b.n	8002052 <HAL_ADC_ConfigChannel+0x596>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002028:	fa93 f3a3 	rbit	r3, r3
 800202c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800202e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002030:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002038:	2320      	movs	r3, #32
 800203a:	e003      	b.n	8002044 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800203c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	3301      	adds	r3, #1
 8002046:	f003 021f 	and.w	r2, r3, #31
 800204a:	4613      	mov	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4413      	add	r3, r2
 8002050:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002052:	430b      	orrs	r3, r1
 8002054:	e081      	b.n	800215a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205e:	2b00      	cmp	r3, #0
 8002060:	d107      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x5b6>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	0e9b      	lsrs	r3, r3, #26
 8002068:	3301      	adds	r3, #1
 800206a:	069b      	lsls	r3, r3, #26
 800206c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002070:	e015      	b.n	800209e <HAL_ADC_ConfigChannel+0x5e2>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800207a:	fa93 f3a3 	rbit	r3, r3
 800207e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800208a:	2320      	movs	r3, #32
 800208c:	e003      	b.n	8002096 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800208e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002090:	fab3 f383 	clz	r3, r3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	3301      	adds	r3, #1
 8002098:	069b      	lsls	r3, r3, #26
 800209a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d109      	bne.n	80020be <HAL_ADC_ConfigChannel+0x602>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	0e9b      	lsrs	r3, r3, #26
 80020b0:	3301      	adds	r3, #1
 80020b2:	f003 031f 	and.w	r3, r3, #31
 80020b6:	2101      	movs	r1, #1
 80020b8:	fa01 f303 	lsl.w	r3, r1, r3
 80020bc:	e017      	b.n	80020ee <HAL_ADC_ConfigChannel+0x632>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	61bb      	str	r3, [r7, #24]
  return result;
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80020d6:	2320      	movs	r3, #32
 80020d8:	e003      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	fab3 f383 	clz	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	3301      	adds	r3, #1
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	2101      	movs	r1, #1
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	ea42 0103 	orr.w	r1, r2, r3
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10d      	bne.n	800211a <HAL_ADC_ConfigChannel+0x65e>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	0e9b      	lsrs	r3, r3, #26
 8002104:	3301      	adds	r3, #1
 8002106:	f003 021f 	and.w	r2, r3, #31
 800210a:	4613      	mov	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4413      	add	r3, r2
 8002110:	3b1e      	subs	r3, #30
 8002112:	051b      	lsls	r3, r3, #20
 8002114:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002118:	e01e      	b.n	8002158 <HAL_ADC_ConfigChannel+0x69c>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	60fb      	str	r3, [r7, #12]
  return result;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d104      	bne.n	800213c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002132:	2320      	movs	r3, #32
 8002134:	e006      	b.n	8002144 <HAL_ADC_ConfigChannel+0x688>
 8002136:	bf00      	nop
 8002138:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	3301      	adds	r3, #1
 8002146:	f003 021f 	and.w	r2, r3, #31
 800214a:	4613      	mov	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	3b1e      	subs	r3, #30
 8002152:	051b      	lsls	r3, r3, #20
 8002154:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002158:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800215e:	4619      	mov	r1, r3
 8002160:	f7ff fa93 	bl	800168a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b3d      	ldr	r3, [pc, #244]	@ (8002260 <HAL_ADC_ConfigChannel+0x7a4>)
 800216a:	4013      	ands	r3, r2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d06c      	beq.n	800224a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002170:	483c      	ldr	r0, [pc, #240]	@ (8002264 <HAL_ADC_ConfigChannel+0x7a8>)
 8002172:	f7ff f9fb 	bl	800156c <LL_ADC_GetCommonPathInternalCh>
 8002176:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a3a      	ldr	r2, [pc, #232]	@ (8002268 <HAL_ADC_ConfigChannel+0x7ac>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d127      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002184:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002188:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d121      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a35      	ldr	r2, [pc, #212]	@ (800226c <HAL_ADC_ConfigChannel+0x7b0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d157      	bne.n	800224a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800219a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800219e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021a2:	4619      	mov	r1, r3
 80021a4:	482f      	ldr	r0, [pc, #188]	@ (8002264 <HAL_ADC_ConfigChannel+0x7a8>)
 80021a6:	f7ff f9ce 	bl	8001546 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021aa:	4b31      	ldr	r3, [pc, #196]	@ (8002270 <HAL_ADC_ConfigChannel+0x7b4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	099b      	lsrs	r3, r3, #6
 80021b0:	4a30      	ldr	r2, [pc, #192]	@ (8002274 <HAL_ADC_ConfigChannel+0x7b8>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	099b      	lsrs	r3, r3, #6
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	4613      	mov	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80021c4:	e002      	b.n	80021cc <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	3b01      	subs	r3, #1
 80021ca:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f9      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021d2:	e03a      	b.n	800224a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a27      	ldr	r2, [pc, #156]	@ (8002278 <HAL_ADC_ConfigChannel+0x7bc>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d113      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10d      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a1f      	ldr	r2, [pc, #124]	@ (800226c <HAL_ADC_ConfigChannel+0x7b0>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d12a      	bne.n	800224a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021fc:	4619      	mov	r1, r3
 80021fe:	4819      	ldr	r0, [pc, #100]	@ (8002264 <HAL_ADC_ConfigChannel+0x7a8>)
 8002200:	f7ff f9a1 	bl	8001546 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002204:	e021      	b.n	800224a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a1c      	ldr	r2, [pc, #112]	@ (800227c <HAL_ADC_ConfigChannel+0x7c0>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d11c      	bne.n	800224a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002210:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002214:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d116      	bne.n	800224a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a12      	ldr	r2, [pc, #72]	@ (800226c <HAL_ADC_ConfigChannel+0x7b0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d111      	bne.n	800224a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002226:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800222a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800222e:	4619      	mov	r1, r3
 8002230:	480c      	ldr	r0, [pc, #48]	@ (8002264 <HAL_ADC_ConfigChannel+0x7a8>)
 8002232:	f7ff f988 	bl	8001546 <LL_ADC_SetCommonPathInternalCh>
 8002236:	e008      	b.n	800224a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800223c:	f043 0220 	orr.w	r2, r3, #32
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002252:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002256:	4618      	mov	r0, r3
 8002258:	37d8      	adds	r7, #216	@ 0xd8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	80080000 	.word	0x80080000
 8002264:	50040300 	.word	0x50040300
 8002268:	c7520000 	.word	0xc7520000
 800226c:	50040000 	.word	0x50040000
 8002270:	20000000 	.word	0x20000000
 8002274:	053e2d63 	.word	0x053e2d63
 8002278:	cb840000 	.word	0xcb840000
 800227c:	80000001 	.word	0x80000001

08002280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002290:	4b0c      	ldr	r3, [pc, #48]	@ (80022c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800229c:	4013      	ands	r3, r2
 800229e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b2:	4a04      	ldr	r2, [pc, #16]	@ (80022c4 <__NVIC_SetPriorityGrouping+0x44>)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	60d3      	str	r3, [r2, #12]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022cc:	4b04      	ldr	r3, [pc, #16]	@ (80022e0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	0a1b      	lsrs	r3, r3, #8
 80022d2:	f003 0307 	and.w	r3, r3, #7
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	db0b      	blt.n	800230e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	f003 021f 	and.w	r2, r3, #31
 80022fc:	4907      	ldr	r1, [pc, #28]	@ (800231c <__NVIC_EnableIRQ+0x38>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	2001      	movs	r0, #1
 8002306:	fa00 f202 	lsl.w	r2, r0, r2
 800230a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	e000e100 	.word	0xe000e100

08002320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	6039      	str	r1, [r7, #0]
 800232a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002330:	2b00      	cmp	r3, #0
 8002332:	db0a      	blt.n	800234a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	b2da      	uxtb	r2, r3
 8002338:	490c      	ldr	r1, [pc, #48]	@ (800236c <__NVIC_SetPriority+0x4c>)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	0112      	lsls	r2, r2, #4
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	440b      	add	r3, r1
 8002344:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002348:	e00a      	b.n	8002360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	b2da      	uxtb	r2, r3
 800234e:	4908      	ldr	r1, [pc, #32]	@ (8002370 <__NVIC_SetPriority+0x50>)
 8002350:	79fb      	ldrb	r3, [r7, #7]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	3b04      	subs	r3, #4
 8002358:	0112      	lsls	r2, r2, #4
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	440b      	add	r3, r1
 800235e:	761a      	strb	r2, [r3, #24]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	e000e100 	.word	0xe000e100
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002374:	b480      	push	{r7}
 8002376:	b089      	sub	sp, #36	@ 0x24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f1c3 0307 	rsb	r3, r3, #7
 800238e:	2b04      	cmp	r3, #4
 8002390:	bf28      	it	cs
 8002392:	2304      	movcs	r3, #4
 8002394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3304      	adds	r3, #4
 800239a:	2b06      	cmp	r3, #6
 800239c:	d902      	bls.n	80023a4 <NVIC_EncodePriority+0x30>
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3b03      	subs	r3, #3
 80023a2:	e000      	b.n	80023a6 <NVIC_EncodePriority+0x32>
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43da      	mvns	r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	401a      	ands	r2, r3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023bc:	f04f 31ff 	mov.w	r1, #4294967295
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	fa01 f303 	lsl.w	r3, r1, r3
 80023c6:	43d9      	mvns	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023cc:	4313      	orrs	r3, r2
         );
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3724      	adds	r7, #36	@ 0x24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023ec:	d301      	bcc.n	80023f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ee:	2301      	movs	r3, #1
 80023f0:	e00f      	b.n	8002412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f2:	4a0a      	ldr	r2, [pc, #40]	@ (800241c <SysTick_Config+0x40>)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fa:	210f      	movs	r1, #15
 80023fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002400:	f7ff ff8e 	bl	8002320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002404:	4b05      	ldr	r3, [pc, #20]	@ (800241c <SysTick_Config+0x40>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240a:	4b04      	ldr	r3, [pc, #16]	@ (800241c <SysTick_Config+0x40>)
 800240c:	2207      	movs	r2, #7
 800240e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	e000e010 	.word	0xe000e010

08002420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff ff29 	bl	8002280 <__NVIC_SetPriorityGrouping>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b086      	sub	sp, #24
 800243a:	af00      	add	r7, sp, #0
 800243c:	4603      	mov	r3, r0
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
 8002442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002448:	f7ff ff3e 	bl	80022c8 <__NVIC_GetPriorityGrouping>
 800244c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	6978      	ldr	r0, [r7, #20]
 8002454:	f7ff ff8e 	bl	8002374 <NVIC_EncodePriority>
 8002458:	4602      	mov	r2, r0
 800245a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff5d 	bl	8002320 <__NVIC_SetPriority>
}
 8002466:	bf00      	nop
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	4603      	mov	r3, r0
 8002476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ff31 	bl	80022e4 <__NVIC_EnableIRQ>
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff ffa2 	bl	80023dc <SysTick_Config>
 8002498:	4603      	mov	r3, r0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b2:	e148      	b.n	8002746 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	2101      	movs	r1, #1
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	fa01 f303 	lsl.w	r3, r1, r3
 80024c0:	4013      	ands	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 813a 	beq.w	8002740 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d005      	beq.n	80024e4 <HAL_GPIO_Init+0x40>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d130      	bne.n	8002546 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	2203      	movs	r2, #3
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800251a:	2201      	movs	r2, #1
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	091b      	lsrs	r3, r3, #4
 8002530:	f003 0201 	and.w	r2, r3, #1
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b03      	cmp	r3, #3
 8002550:	d017      	beq.n	8002582 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	2203      	movs	r2, #3
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d123      	bne.n	80025d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	08da      	lsrs	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3208      	adds	r2, #8
 8002596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800259a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	220f      	movs	r2, #15
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	08da      	lsrs	r2, r3, #3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3208      	adds	r2, #8
 80025d0:	6939      	ldr	r1, [r7, #16]
 80025d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	2203      	movs	r2, #3
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4013      	ands	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 0203 	and.w	r2, r3, #3
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 8094 	beq.w	8002740 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002618:	4b52      	ldr	r3, [pc, #328]	@ (8002764 <HAL_GPIO_Init+0x2c0>)
 800261a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800261c:	4a51      	ldr	r2, [pc, #324]	@ (8002764 <HAL_GPIO_Init+0x2c0>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6613      	str	r3, [r2, #96]	@ 0x60
 8002624:	4b4f      	ldr	r3, [pc, #316]	@ (8002764 <HAL_GPIO_Init+0x2c0>)
 8002626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002630:	4a4d      	ldr	r2, [pc, #308]	@ (8002768 <HAL_GPIO_Init+0x2c4>)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	3302      	adds	r3, #2
 8002638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	220f      	movs	r2, #15
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800265a:	d00d      	beq.n	8002678 <HAL_GPIO_Init+0x1d4>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a43      	ldr	r2, [pc, #268]	@ (800276c <HAL_GPIO_Init+0x2c8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d007      	beq.n	8002674 <HAL_GPIO_Init+0x1d0>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a42      	ldr	r2, [pc, #264]	@ (8002770 <HAL_GPIO_Init+0x2cc>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d101      	bne.n	8002670 <HAL_GPIO_Init+0x1cc>
 800266c:	2302      	movs	r3, #2
 800266e:	e004      	b.n	800267a <HAL_GPIO_Init+0x1d6>
 8002670:	2307      	movs	r3, #7
 8002672:	e002      	b.n	800267a <HAL_GPIO_Init+0x1d6>
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <HAL_GPIO_Init+0x1d6>
 8002678:	2300      	movs	r3, #0
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	f002 0203 	and.w	r2, r2, #3
 8002680:	0092      	lsls	r2, r2, #2
 8002682:	4093      	lsls	r3, r2
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800268a:	4937      	ldr	r1, [pc, #220]	@ (8002768 <HAL_GPIO_Init+0x2c4>)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	3302      	adds	r3, #2
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002698:	4b36      	ldr	r3, [pc, #216]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4013      	ands	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026e6:	4a23      	ldr	r2, [pc, #140]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026ec:	4b21      	ldr	r3, [pc, #132]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002710:	4a18      	ldr	r2, [pc, #96]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002716:	4b17      	ldr	r3, [pc, #92]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	43db      	mvns	r3, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800273a:	4a0e      	ldr	r2, [pc, #56]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	3301      	adds	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	fa22 f303 	lsr.w	r3, r2, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	f47f aeaf 	bne.w	80024b4 <HAL_GPIO_Init+0x10>
  }
}
 8002756:	bf00      	nop
 8002758:	bf00      	nop
 800275a:	371c      	adds	r7, #28
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	40021000 	.word	0x40021000
 8002768:	40010000 	.word	0x40010000
 800276c:	48000400 	.word	0x48000400
 8002770:	48000800 	.word	0x48000800
 8002774:	40010400 	.word	0x40010400

08002778 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	887b      	ldrh	r3, [r7, #2]
 800278a:	4013      	ands	r3, r2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
 8002794:	e001      	b.n	800279a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800279a:	7bfb      	ldrb	r3, [r7, #15]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	807b      	strh	r3, [r7, #2]
 80027b4:	4613      	mov	r3, r2
 80027b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027b8:	787b      	ldrb	r3, [r7, #1]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027be:	887a      	ldrh	r2, [r7, #2]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027c4:	e002      	b.n	80027cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027c6:	887a      	ldrh	r2, [r7, #2]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027dc:	4b04      	ldr	r3, [pc, #16]	@ (80027f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40007000 	.word	0x40007000

080027f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002802:	d130      	bne.n	8002866 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002804:	4b23      	ldr	r3, [pc, #140]	@ (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800280c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002810:	d038      	beq.n	8002884 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002812:	4b20      	ldr	r3, [pc, #128]	@ (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800281a:	4a1e      	ldr	r2, [pc, #120]	@ (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800281c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002820:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002822:	4b1d      	ldr	r3, [pc, #116]	@ (8002898 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2232      	movs	r2, #50	@ 0x32
 8002828:	fb02 f303 	mul.w	r3, r2, r3
 800282c:	4a1b      	ldr	r2, [pc, #108]	@ (800289c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	0c9b      	lsrs	r3, r3, #18
 8002834:	3301      	adds	r3, #1
 8002836:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002838:	e002      	b.n	8002840 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	3b01      	subs	r3, #1
 800283e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002840:	4b14      	ldr	r3, [pc, #80]	@ (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002848:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800284c:	d102      	bne.n	8002854 <HAL_PWREx_ControlVoltageScaling+0x60>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f2      	bne.n	800283a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002854:	4b0f      	ldr	r3, [pc, #60]	@ (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800285c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002860:	d110      	bne.n	8002884 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e00f      	b.n	8002886 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002866:	4b0b      	ldr	r3, [pc, #44]	@ (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800286e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002872:	d007      	beq.n	8002884 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002874:	4b07      	ldr	r3, [pc, #28]	@ (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800287c:	4a05      	ldr	r2, [pc, #20]	@ (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800287e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002882:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40007000 	.word	0x40007000
 8002898:	20000000 	.word	0x20000000
 800289c:	431bde83 	.word	0x431bde83

080028a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d102      	bne.n	80028b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	f000 bc02 	b.w	80030b8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028b4:	4b96      	ldr	r3, [pc, #600]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 030c 	and.w	r3, r3, #12
 80028bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028be:	4b94      	ldr	r3, [pc, #592]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 80e4 	beq.w	8002a9e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d007      	beq.n	80028ec <HAL_RCC_OscConfig+0x4c>
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	2b0c      	cmp	r3, #12
 80028e0:	f040 808b 	bne.w	80029fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	f040 8087 	bne.w	80029fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028ec:	4b88      	ldr	r3, [pc, #544]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_RCC_OscConfig+0x64>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e3d9      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1a      	ldr	r2, [r3, #32]
 8002908:	4b81      	ldr	r3, [pc, #516]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b00      	cmp	r3, #0
 8002912:	d004      	beq.n	800291e <HAL_RCC_OscConfig+0x7e>
 8002914:	4b7e      	ldr	r3, [pc, #504]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800291c:	e005      	b.n	800292a <HAL_RCC_OscConfig+0x8a>
 800291e:	4b7c      	ldr	r3, [pc, #496]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002920:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800292a:	4293      	cmp	r3, r2
 800292c:	d223      	bcs.n	8002976 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fd54 	bl	80033e0 <RCC_SetFlashLatencyFromMSIRange>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e3ba      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002942:	4b73      	ldr	r3, [pc, #460]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a72      	ldr	r2, [pc, #456]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002948:	f043 0308 	orr.w	r3, r3, #8
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	4b70      	ldr	r3, [pc, #448]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	496d      	ldr	r1, [pc, #436]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 800295c:	4313      	orrs	r3, r2
 800295e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002960:	4b6b      	ldr	r3, [pc, #428]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	021b      	lsls	r3, r3, #8
 800296e:	4968      	ldr	r1, [pc, #416]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]
 8002974:	e025      	b.n	80029c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002976:	4b66      	ldr	r3, [pc, #408]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a65      	ldr	r2, [pc, #404]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 800297c:	f043 0308 	orr.w	r3, r3, #8
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	4b63      	ldr	r3, [pc, #396]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	4960      	ldr	r1, [pc, #384]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002990:	4313      	orrs	r3, r2
 8002992:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002994:	4b5e      	ldr	r3, [pc, #376]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	495b      	ldr	r1, [pc, #364]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 fd14 	bl	80033e0 <RCC_SetFlashLatencyFromMSIRange>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e37a      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029c2:	f000 fc81 	bl	80032c8 <HAL_RCC_GetSysClockFreq>
 80029c6:	4602      	mov	r2, r0
 80029c8:	4b51      	ldr	r3, [pc, #324]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	091b      	lsrs	r3, r3, #4
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	4950      	ldr	r1, [pc, #320]	@ (8002b14 <HAL_RCC_OscConfig+0x274>)
 80029d4:	5ccb      	ldrb	r3, [r1, r3]
 80029d6:	f003 031f 	and.w	r3, r3, #31
 80029da:	fa22 f303 	lsr.w	r3, r2, r3
 80029de:	4a4e      	ldr	r2, [pc, #312]	@ (8002b18 <HAL_RCC_OscConfig+0x278>)
 80029e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029e2:	4b4e      	ldr	r3, [pc, #312]	@ (8002b1c <HAL_RCC_OscConfig+0x27c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe fd1a 	bl	8001420 <HAL_InitTick>
 80029ec:	4603      	mov	r3, r0
 80029ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d052      	beq.n	8002a9c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
 80029f8:	e35e      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d032      	beq.n	8002a68 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a02:	4b43      	ldr	r3, [pc, #268]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a42      	ldr	r2, [pc, #264]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a0e:	f7fe fd57 	bl	80014c0 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a16:	f7fe fd53 	bl	80014c0 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e347      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a28:	4b39      	ldr	r3, [pc, #228]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a34:	4b36      	ldr	r3, [pc, #216]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a35      	ldr	r2, [pc, #212]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a3a:	f043 0308 	orr.w	r3, r3, #8
 8002a3e:	6013      	str	r3, [r2, #0]
 8002a40:	4b33      	ldr	r3, [pc, #204]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	4930      	ldr	r1, [pc, #192]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a52:	4b2f      	ldr	r3, [pc, #188]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	492b      	ldr	r1, [pc, #172]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
 8002a66:	e01a      	b.n	8002a9e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a68:	4b29      	ldr	r3, [pc, #164]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a28      	ldr	r2, [pc, #160]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a6e:	f023 0301 	bic.w	r3, r3, #1
 8002a72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a74:	f7fe fd24 	bl	80014c0 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a7c:	f7fe fd20 	bl	80014c0 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e314      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a8e:	4b20      	ldr	r3, [pc, #128]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x1dc>
 8002a9a:	e000      	b.n	8002a9e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d073      	beq.n	8002b92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d005      	beq.n	8002abc <HAL_RCC_OscConfig+0x21c>
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	2b0c      	cmp	r3, #12
 8002ab4:	d10e      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d10b      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002abc:	4b14      	ldr	r3, [pc, #80]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d063      	beq.n	8002b90 <HAL_RCC_OscConfig+0x2f0>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d15f      	bne.n	8002b90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e2f1      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002adc:	d106      	bne.n	8002aec <HAL_RCC_OscConfig+0x24c>
 8002ade:	4b0c      	ldr	r3, [pc, #48]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a0b      	ldr	r2, [pc, #44]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	e025      	b.n	8002b38 <HAL_RCC_OscConfig+0x298>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002af4:	d114      	bne.n	8002b20 <HAL_RCC_OscConfig+0x280>
 8002af6:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a05      	ldr	r2, [pc, #20]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002afc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	4b03      	ldr	r3, [pc, #12]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a02      	ldr	r2, [pc, #8]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	e013      	b.n	8002b38 <HAL_RCC_OscConfig+0x298>
 8002b10:	40021000 	.word	0x40021000
 8002b14:	080048ac 	.word	0x080048ac
 8002b18:	20000000 	.word	0x20000000
 8002b1c:	20000004 	.word	0x20000004
 8002b20:	4ba0      	ldr	r3, [pc, #640]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a9f      	ldr	r2, [pc, #636]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	4b9d      	ldr	r3, [pc, #628]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a9c      	ldr	r2, [pc, #624]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002b32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d013      	beq.n	8002b68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe fcbe 	bl	80014c0 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b48:	f7fe fcba 	bl	80014c0 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	@ 0x64
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e2ae      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b5a:	4b92      	ldr	r3, [pc, #584]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x2a8>
 8002b66:	e014      	b.n	8002b92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fe fcaa 	bl	80014c0 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b70:	f7fe fca6 	bl	80014c0 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	@ 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e29a      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b82:	4b88      	ldr	r3, [pc, #544]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f0      	bne.n	8002b70 <HAL_RCC_OscConfig+0x2d0>
 8002b8e:	e000      	b.n	8002b92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d060      	beq.n	8002c60 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x310>
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	2b0c      	cmp	r3, #12
 8002ba8:	d119      	bne.n	8002bde <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d116      	bne.n	8002bde <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bb0:	4b7c      	ldr	r3, [pc, #496]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x328>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e277      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc8:	4b76      	ldr	r3, [pc, #472]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	061b      	lsls	r3, r3, #24
 8002bd6:	4973      	ldr	r1, [pc, #460]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bdc:	e040      	b.n	8002c60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d023      	beq.n	8002c2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002be6:	4b6f      	ldr	r3, [pc, #444]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a6e      	ldr	r2, [pc, #440]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf2:	f7fe fc65 	bl	80014c0 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bfa:	f7fe fc61 	bl	80014c0 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e255      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c0c:	4b65      	ldr	r3, [pc, #404]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c18:	4b62      	ldr	r3, [pc, #392]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	061b      	lsls	r3, r3, #24
 8002c26:	495f      	ldr	r1, [pc, #380]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	604b      	str	r3, [r1, #4]
 8002c2c:	e018      	b.n	8002c60 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c2e:	4b5d      	ldr	r3, [pc, #372]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a5c      	ldr	r2, [pc, #368]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002c34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3a:	f7fe fc41 	bl	80014c0 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c42:	f7fe fc3d 	bl	80014c0 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e231      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c54:	4b53      	ldr	r3, [pc, #332]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f0      	bne.n	8002c42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d03c      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d01c      	beq.n	8002cae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c74:	4b4b      	ldr	r3, [pc, #300]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c7a:	4a4a      	ldr	r2, [pc, #296]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c84:	f7fe fc1c 	bl	80014c0 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c8c:	f7fe fc18 	bl	80014c0 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e20c      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c9e:	4b41      	ldr	r3, [pc, #260]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0ef      	beq.n	8002c8c <HAL_RCC_OscConfig+0x3ec>
 8002cac:	e01b      	b.n	8002ce6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cae:	4b3d      	ldr	r3, [pc, #244]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cb4:	4a3b      	ldr	r2, [pc, #236]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002cb6:	f023 0301 	bic.w	r3, r3, #1
 8002cba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbe:	f7fe fbff 	bl	80014c0 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc6:	f7fe fbfb 	bl	80014c0 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e1ef      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cd8:	4b32      	ldr	r3, [pc, #200]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1ef      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 80a6 	beq.w	8002e40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10d      	bne.n	8002d20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d04:	4b27      	ldr	r3, [pc, #156]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d08:	4a26      	ldr	r2, [pc, #152]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d10:	4b24      	ldr	r3, [pc, #144]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d20:	4b21      	ldr	r3, [pc, #132]	@ (8002da8 <HAL_RCC_OscConfig+0x508>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d118      	bne.n	8002d5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002da8 <HAL_RCC_OscConfig+0x508>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a1d      	ldr	r2, [pc, #116]	@ (8002da8 <HAL_RCC_OscConfig+0x508>)
 8002d32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d38:	f7fe fbc2 	bl	80014c0 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d40:	f7fe fbbe 	bl	80014c0 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e1b2      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d52:	4b15      	ldr	r3, [pc, #84]	@ (8002da8 <HAL_RCC_OscConfig+0x508>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d108      	bne.n	8002d78 <HAL_RCC_OscConfig+0x4d8>
 8002d66:	4b0f      	ldr	r3, [pc, #60]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d76:	e029      	b.n	8002dcc <HAL_RCC_OscConfig+0x52c>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2b05      	cmp	r3, #5
 8002d7e:	d115      	bne.n	8002dac <HAL_RCC_OscConfig+0x50c>
 8002d80:	4b08      	ldr	r3, [pc, #32]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d86:	4a07      	ldr	r2, [pc, #28]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002d88:	f043 0304 	orr.w	r3, r3, #4
 8002d8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d90:	4b04      	ldr	r3, [pc, #16]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d96:	4a03      	ldr	r2, [pc, #12]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002da0:	e014      	b.n	8002dcc <HAL_RCC_OscConfig+0x52c>
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40007000 	.word	0x40007000
 8002dac:	4b9a      	ldr	r3, [pc, #616]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db2:	4a99      	ldr	r2, [pc, #612]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002db4:	f023 0301 	bic.w	r3, r3, #1
 8002db8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dbc:	4b96      	ldr	r3, [pc, #600]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc2:	4a95      	ldr	r2, [pc, #596]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002dc4:	f023 0304 	bic.w	r3, r3, #4
 8002dc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d016      	beq.n	8002e02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd4:	f7fe fb74 	bl	80014c0 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dda:	e00a      	b.n	8002df2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ddc:	f7fe fb70 	bl	80014c0 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e162      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002df2:	4b89      	ldr	r3, [pc, #548]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0ed      	beq.n	8002ddc <HAL_RCC_OscConfig+0x53c>
 8002e00:	e015      	b.n	8002e2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e02:	f7fe fb5d 	bl	80014c0 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e08:	e00a      	b.n	8002e20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0a:	f7fe fb59 	bl	80014c0 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e14b      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e20:	4b7d      	ldr	r3, [pc, #500]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1ed      	bne.n	8002e0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e2e:	7ffb      	ldrb	r3, [r7, #31]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d105      	bne.n	8002e40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e34:	4b78      	ldr	r3, [pc, #480]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e38:	4a77      	ldr	r2, [pc, #476]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002e3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e3e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d03c      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d01c      	beq.n	8002e8e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e54:	4b70      	ldr	r3, [pc, #448]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002e56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e5a:	4a6f      	ldr	r2, [pc, #444]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e64:	f7fe fb2c 	bl	80014c0 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e6c:	f7fe fb28 	bl	80014c0 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e11c      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e7e:	4b66      	ldr	r3, [pc, #408]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002e80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0ef      	beq.n	8002e6c <HAL_RCC_OscConfig+0x5cc>
 8002e8c:	e01b      	b.n	8002ec6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e8e:	4b62      	ldr	r3, [pc, #392]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002e90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e94:	4a60      	ldr	r2, [pc, #384]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002e96:	f023 0301 	bic.w	r3, r3, #1
 8002e9a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9e:	f7fe fb0f 	bl	80014c0 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ea6:	f7fe fb0b 	bl	80014c0 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e0ff      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002eb8:	4b57      	ldr	r3, [pc, #348]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002eba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1ef      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 80f3 	beq.w	80030b6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	f040 80c9 	bne.w	800306c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002eda:	4b4f      	ldr	r3, [pc, #316]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f003 0203 	and.w	r2, r3, #3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d12c      	bne.n	8002f48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d123      	bne.n	8002f48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f0a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d11b      	bne.n	8002f48 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d113      	bne.n	8002f48 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f2a:	085b      	lsrs	r3, r3, #1
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d109      	bne.n	8002f48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	085b      	lsrs	r3, r3, #1
 8002f40:	3b01      	subs	r3, #1
 8002f42:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d06b      	beq.n	8003020 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	2b0c      	cmp	r3, #12
 8002f4c:	d062      	beq.n	8003014 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f4e:	4b32      	ldr	r3, [pc, #200]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e0ac      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f5e:	4b2e      	ldr	r3, [pc, #184]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a2d      	ldr	r2, [pc, #180]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002f64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f68:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f6a:	f7fe faa9 	bl	80014c0 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f72:	f7fe faa5 	bl	80014c0 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e099      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f84:	4b24      	ldr	r3, [pc, #144]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f0      	bne.n	8002f72 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f90:	4b21      	ldr	r3, [pc, #132]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	4b21      	ldr	r3, [pc, #132]	@ (800301c <HAL_RCC_OscConfig+0x77c>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002fa0:	3a01      	subs	r2, #1
 8002fa2:	0112      	lsls	r2, r2, #4
 8002fa4:	4311      	orrs	r1, r2
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002faa:	0212      	lsls	r2, r2, #8
 8002fac:	4311      	orrs	r1, r2
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fb2:	0852      	lsrs	r2, r2, #1
 8002fb4:	3a01      	subs	r2, #1
 8002fb6:	0552      	lsls	r2, r2, #21
 8002fb8:	4311      	orrs	r1, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002fbe:	0852      	lsrs	r2, r2, #1
 8002fc0:	3a01      	subs	r2, #1
 8002fc2:	0652      	lsls	r2, r2, #25
 8002fc4:	4311      	orrs	r1, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002fca:	06d2      	lsls	r2, r2, #27
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	4912      	ldr	r1, [pc, #72]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fd4:	4b10      	ldr	r3, [pc, #64]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a0f      	ldr	r2, [pc, #60]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002fda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fde:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002fe6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fec:	f7fe fa68 	bl	80014c0 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff4:	f7fe fa64 	bl	80014c0 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e058      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003006:	4b04      	ldr	r3, [pc, #16]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003012:	e050      	b.n	80030b6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e04f      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
 8003018:	40021000 	.word	0x40021000
 800301c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003020:	4b27      	ldr	r3, [pc, #156]	@ (80030c0 <HAL_RCC_OscConfig+0x820>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d144      	bne.n	80030b6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800302c:	4b24      	ldr	r3, [pc, #144]	@ (80030c0 <HAL_RCC_OscConfig+0x820>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a23      	ldr	r2, [pc, #140]	@ (80030c0 <HAL_RCC_OscConfig+0x820>)
 8003032:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003036:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003038:	4b21      	ldr	r3, [pc, #132]	@ (80030c0 <HAL_RCC_OscConfig+0x820>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4a20      	ldr	r2, [pc, #128]	@ (80030c0 <HAL_RCC_OscConfig+0x820>)
 800303e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003042:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003044:	f7fe fa3c 	bl	80014c0 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304c:	f7fe fa38 	bl	80014c0 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e02c      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800305e:	4b18      	ldr	r3, [pc, #96]	@ (80030c0 <HAL_RCC_OscConfig+0x820>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x7ac>
 800306a:	e024      	b.n	80030b6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2b0c      	cmp	r3, #12
 8003070:	d01f      	beq.n	80030b2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003072:	4b13      	ldr	r3, [pc, #76]	@ (80030c0 <HAL_RCC_OscConfig+0x820>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a12      	ldr	r2, [pc, #72]	@ (80030c0 <HAL_RCC_OscConfig+0x820>)
 8003078:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800307c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307e:	f7fe fa1f 	bl	80014c0 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003086:	f7fe fa1b 	bl	80014c0 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e00f      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003098:	4b09      	ldr	r3, [pc, #36]	@ (80030c0 <HAL_RCC_OscConfig+0x820>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1f0      	bne.n	8003086 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80030a4:	4b06      	ldr	r3, [pc, #24]	@ (80030c0 <HAL_RCC_OscConfig+0x820>)
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	4905      	ldr	r1, [pc, #20]	@ (80030c0 <HAL_RCC_OscConfig+0x820>)
 80030aa:	4b06      	ldr	r3, [pc, #24]	@ (80030c4 <HAL_RCC_OscConfig+0x824>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	60cb      	str	r3, [r1, #12]
 80030b0:	e001      	b.n	80030b6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3720      	adds	r7, #32
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40021000 	.word	0x40021000
 80030c4:	feeefffc 	.word	0xfeeefffc

080030c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0e7      	b.n	80032ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030dc:	4b75      	ldr	r3, [pc, #468]	@ (80032b4 <HAL_RCC_ClockConfig+0x1ec>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d910      	bls.n	800310c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4b72      	ldr	r3, [pc, #456]	@ (80032b4 <HAL_RCC_ClockConfig+0x1ec>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 0207 	bic.w	r2, r3, #7
 80030f2:	4970      	ldr	r1, [pc, #448]	@ (80032b4 <HAL_RCC_ClockConfig+0x1ec>)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b6e      	ldr	r3, [pc, #440]	@ (80032b4 <HAL_RCC_ClockConfig+0x1ec>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0cf      	b.n	80032ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d010      	beq.n	800313a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	4b66      	ldr	r3, [pc, #408]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003124:	429a      	cmp	r2, r3
 8003126:	d908      	bls.n	800313a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003128:	4b63      	ldr	r3, [pc, #396]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4960      	ldr	r1, [pc, #384]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003136:	4313      	orrs	r3, r2
 8003138:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d04c      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b03      	cmp	r3, #3
 800314c:	d107      	bne.n	800315e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314e:	4b5a      	ldr	r3, [pc, #360]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d121      	bne.n	800319e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e0a6      	b.n	80032ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d107      	bne.n	8003176 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003166:	4b54      	ldr	r3, [pc, #336]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d115      	bne.n	800319e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e09a      	b.n	80032ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d107      	bne.n	800318e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800317e:	4b4e      	ldr	r3, [pc, #312]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d109      	bne.n	800319e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e08e      	b.n	80032ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800318e:	4b4a      	ldr	r3, [pc, #296]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e086      	b.n	80032ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800319e:	4b46      	ldr	r3, [pc, #280]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f023 0203 	bic.w	r2, r3, #3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4943      	ldr	r1, [pc, #268]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031b0:	f7fe f986 	bl	80014c0 <HAL_GetTick>
 80031b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b8:	f7fe f982 	bl	80014c0 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e06e      	b.n	80032ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ce:	4b3a      	ldr	r3, [pc, #232]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 020c 	and.w	r2, r3, #12
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	429a      	cmp	r2, r3
 80031de:	d1eb      	bne.n	80031b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d010      	beq.n	800320e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	4b31      	ldr	r3, [pc, #196]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d208      	bcs.n	800320e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031fc:	4b2e      	ldr	r3, [pc, #184]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	492b      	ldr	r1, [pc, #172]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 800320a:	4313      	orrs	r3, r2
 800320c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800320e:	4b29      	ldr	r3, [pc, #164]	@ (80032b4 <HAL_RCC_ClockConfig+0x1ec>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d210      	bcs.n	800323e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321c:	4b25      	ldr	r3, [pc, #148]	@ (80032b4 <HAL_RCC_ClockConfig+0x1ec>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f023 0207 	bic.w	r2, r3, #7
 8003224:	4923      	ldr	r1, [pc, #140]	@ (80032b4 <HAL_RCC_ClockConfig+0x1ec>)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	4313      	orrs	r3, r2
 800322a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322c:	4b21      	ldr	r3, [pc, #132]	@ (80032b4 <HAL_RCC_ClockConfig+0x1ec>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d001      	beq.n	800323e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e036      	b.n	80032ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b00      	cmp	r3, #0
 8003248:	d008      	beq.n	800325c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800324a:	4b1b      	ldr	r3, [pc, #108]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	4918      	ldr	r1, [pc, #96]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003258:	4313      	orrs	r3, r2
 800325a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0308 	and.w	r3, r3, #8
 8003264:	2b00      	cmp	r3, #0
 8003266:	d009      	beq.n	800327c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003268:	4b13      	ldr	r3, [pc, #76]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4910      	ldr	r1, [pc, #64]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003278:	4313      	orrs	r3, r2
 800327a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800327c:	f000 f824 	bl	80032c8 <HAL_RCC_GetSysClockFreq>
 8003280:	4602      	mov	r2, r0
 8003282:	4b0d      	ldr	r3, [pc, #52]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	091b      	lsrs	r3, r3, #4
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	490b      	ldr	r1, [pc, #44]	@ (80032bc <HAL_RCC_ClockConfig+0x1f4>)
 800328e:	5ccb      	ldrb	r3, [r1, r3]
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	fa22 f303 	lsr.w	r3, r2, r3
 8003298:	4a09      	ldr	r2, [pc, #36]	@ (80032c0 <HAL_RCC_ClockConfig+0x1f8>)
 800329a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800329c:	4b09      	ldr	r3, [pc, #36]	@ (80032c4 <HAL_RCC_ClockConfig+0x1fc>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fe f8bd 	bl	8001420 <HAL_InitTick>
 80032a6:	4603      	mov	r3, r0
 80032a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80032aa:	7afb      	ldrb	r3, [r7, #11]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40022000 	.word	0x40022000
 80032b8:	40021000 	.word	0x40021000
 80032bc:	080048ac 	.word	0x080048ac
 80032c0:	20000000 	.word	0x20000000
 80032c4:	20000004 	.word	0x20000004

080032c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b089      	sub	sp, #36	@ 0x24
 80032cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]
 80032d2:	2300      	movs	r3, #0
 80032d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032d6:	4b3e      	ldr	r3, [pc, #248]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032e0:	4b3b      	ldr	r3, [pc, #236]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0x34>
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	2b0c      	cmp	r3, #12
 80032f4:	d121      	bne.n	800333a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d11e      	bne.n	800333a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032fc:	4b34      	ldr	r3, [pc, #208]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	d107      	bne.n	8003318 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003308:	4b31      	ldr	r3, [pc, #196]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800330a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800330e:	0a1b      	lsrs	r3, r3, #8
 8003310:	f003 030f 	and.w	r3, r3, #15
 8003314:	61fb      	str	r3, [r7, #28]
 8003316:	e005      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003318:	4b2d      	ldr	r3, [pc, #180]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	091b      	lsrs	r3, r3, #4
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003324:	4a2b      	ldr	r2, [pc, #172]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800332c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10d      	bne.n	8003350 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003338:	e00a      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	2b04      	cmp	r3, #4
 800333e:	d102      	bne.n	8003346 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003340:	4b25      	ldr	r3, [pc, #148]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003342:	61bb      	str	r3, [r7, #24]
 8003344:	e004      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	2b08      	cmp	r3, #8
 800334a:	d101      	bne.n	8003350 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800334c:	4b23      	ldr	r3, [pc, #140]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x114>)
 800334e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	2b0c      	cmp	r3, #12
 8003354:	d134      	bne.n	80033c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003356:	4b1e      	ldr	r3, [pc, #120]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d003      	beq.n	800336e <HAL_RCC_GetSysClockFreq+0xa6>
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b03      	cmp	r3, #3
 800336a:	d003      	beq.n	8003374 <HAL_RCC_GetSysClockFreq+0xac>
 800336c:	e005      	b.n	800337a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800336e:	4b1a      	ldr	r3, [pc, #104]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003370:	617b      	str	r3, [r7, #20]
      break;
 8003372:	e005      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003374:	4b19      	ldr	r3, [pc, #100]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x114>)
 8003376:	617b      	str	r3, [r7, #20]
      break;
 8003378:	e002      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	617b      	str	r3, [r7, #20]
      break;
 800337e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003380:	4b13      	ldr	r3, [pc, #76]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	3301      	adds	r3, #1
 800338c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800338e:	4b10      	ldr	r3, [pc, #64]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	0a1b      	lsrs	r3, r3, #8
 8003394:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	fb03 f202 	mul.w	r2, r3, r2
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033a6:	4b0a      	ldr	r3, [pc, #40]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	0e5b      	lsrs	r3, r3, #25
 80033ac:	f003 0303 	and.w	r3, r3, #3
 80033b0:	3301      	adds	r3, #1
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80033be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033c0:	69bb      	ldr	r3, [r7, #24]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3724      	adds	r7, #36	@ 0x24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40021000 	.word	0x40021000
 80033d4:	080048bc 	.word	0x080048bc
 80033d8:	00f42400 	.word	0x00f42400
 80033dc:	007a1200 	.word	0x007a1200

080033e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033e8:	2300      	movs	r3, #0
 80033ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033ec:	4b2a      	ldr	r3, [pc, #168]	@ (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033f8:	f7ff f9ee 	bl	80027d8 <HAL_PWREx_GetVoltageRange>
 80033fc:	6178      	str	r0, [r7, #20]
 80033fe:	e014      	b.n	800342a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003400:	4b25      	ldr	r3, [pc, #148]	@ (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003404:	4a24      	ldr	r2, [pc, #144]	@ (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800340a:	6593      	str	r3, [r2, #88]	@ 0x58
 800340c:	4b22      	ldr	r3, [pc, #136]	@ (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800340e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003418:	f7ff f9de 	bl	80027d8 <HAL_PWREx_GetVoltageRange>
 800341c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800341e:	4b1e      	ldr	r3, [pc, #120]	@ (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003422:	4a1d      	ldr	r2, [pc, #116]	@ (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003424:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003428:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003430:	d10b      	bne.n	800344a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b80      	cmp	r3, #128	@ 0x80
 8003436:	d919      	bls.n	800346c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2ba0      	cmp	r3, #160	@ 0xa0
 800343c:	d902      	bls.n	8003444 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800343e:	2302      	movs	r3, #2
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	e013      	b.n	800346c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003444:	2301      	movs	r3, #1
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	e010      	b.n	800346c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b80      	cmp	r3, #128	@ 0x80
 800344e:	d902      	bls.n	8003456 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003450:	2303      	movs	r3, #3
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	e00a      	b.n	800346c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b80      	cmp	r3, #128	@ 0x80
 800345a:	d102      	bne.n	8003462 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800345c:	2302      	movs	r3, #2
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	e004      	b.n	800346c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b70      	cmp	r3, #112	@ 0x70
 8003466:	d101      	bne.n	800346c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003468:	2301      	movs	r3, #1
 800346a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800346c:	4b0b      	ldr	r3, [pc, #44]	@ (800349c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f023 0207 	bic.w	r2, r3, #7
 8003474:	4909      	ldr	r1, [pc, #36]	@ (800349c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800347c:	4b07      	ldr	r3, [pc, #28]	@ (800349c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	429a      	cmp	r2, r3
 8003488:	d001      	beq.n	800348e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40021000 	.word	0x40021000
 800349c:	40022000 	.word	0x40022000

080034a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034a8:	2300      	movs	r3, #0
 80034aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034ac:	2300      	movs	r3, #0
 80034ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d031      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80034c4:	d01a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80034c6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80034ca:	d814      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d009      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034d4:	d10f      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80034d6:	4b5d      	ldr	r3, [pc, #372]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	4a5c      	ldr	r2, [pc, #368]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034e0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034e2:	e00c      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3304      	adds	r3, #4
 80034e8:	2100      	movs	r1, #0
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 f9ce 	bl	800388c <RCCEx_PLLSAI1_Config>
 80034f0:	4603      	mov	r3, r0
 80034f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034f4:	e003      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	74fb      	strb	r3, [r7, #19]
      break;
 80034fa:	e000      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80034fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034fe:	7cfb      	ldrb	r3, [r7, #19]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10b      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003504:	4b51      	ldr	r3, [pc, #324]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800350a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003512:	494e      	ldr	r1, [pc, #312]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800351a:	e001      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351c:	7cfb      	ldrb	r3, [r7, #19]
 800351e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 809e 	beq.w	800366a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800352e:	2300      	movs	r3, #0
 8003530:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003532:	4b46      	ldr	r3, [pc, #280]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003542:	2300      	movs	r3, #0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00d      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003548:	4b40      	ldr	r3, [pc, #256]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800354a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354c:	4a3f      	ldr	r2, [pc, #252]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800354e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003552:	6593      	str	r3, [r2, #88]	@ 0x58
 8003554:	4b3d      	ldr	r3, [pc, #244]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003560:	2301      	movs	r3, #1
 8003562:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003564:	4b3a      	ldr	r3, [pc, #232]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a39      	ldr	r2, [pc, #228]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800356a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800356e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003570:	f7fd ffa6 	bl	80014c0 <HAL_GetTick>
 8003574:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003576:	e009      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003578:	f7fd ffa2 	bl	80014c0 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d902      	bls.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	74fb      	strb	r3, [r7, #19]
        break;
 800358a:	e005      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800358c:	4b30      	ldr	r3, [pc, #192]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0ef      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003598:	7cfb      	ldrb	r3, [r7, #19]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d15a      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800359e:	4b2b      	ldr	r3, [pc, #172]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01e      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d019      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035ba:	4b24      	ldr	r3, [pc, #144]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035c6:	4b21      	ldr	r3, [pc, #132]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035cc:	4a1f      	ldr	r2, [pc, #124]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035d6:	4b1d      	ldr	r3, [pc, #116]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035dc:	4a1b      	ldr	r2, [pc, #108]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035e6:	4a19      	ldr	r2, [pc, #100]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d016      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7fd ff62 	bl	80014c0 <HAL_GetTick>
 80035fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035fe:	e00b      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003600:	f7fd ff5e 	bl	80014c0 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d902      	bls.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	74fb      	strb	r3, [r7, #19]
            break;
 8003616:	e006      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003618:	4b0c      	ldr	r3, [pc, #48]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0ec      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003626:	7cfb      	ldrb	r3, [r7, #19]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10b      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800362c:	4b07      	ldr	r3, [pc, #28]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800362e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003632:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800363a:	4904      	ldr	r1, [pc, #16]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003642:	e009      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003644:	7cfb      	ldrb	r3, [r7, #19]
 8003646:	74bb      	strb	r3, [r7, #18]
 8003648:	e006      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800364a:	bf00      	nop
 800364c:	40021000 	.word	0x40021000
 8003650:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003658:	7c7b      	ldrb	r3, [r7, #17]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d105      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800365e:	4b8a      	ldr	r3, [pc, #552]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003662:	4a89      	ldr	r2, [pc, #548]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003664:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003668:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003676:	4b84      	ldr	r3, [pc, #528]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367c:	f023 0203 	bic.w	r2, r3, #3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	4980      	ldr	r1, [pc, #512]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003686:	4313      	orrs	r3, r2
 8003688:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003698:	4b7b      	ldr	r3, [pc, #492]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800369e:	f023 020c 	bic.w	r2, r3, #12
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a6:	4978      	ldr	r1, [pc, #480]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036ba:	4b73      	ldr	r3, [pc, #460]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c8:	496f      	ldr	r1, [pc, #444]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ea:	4967      	ldr	r1, [pc, #412]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036fe:	4b62      	ldr	r3, [pc, #392]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003704:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370c:	495e      	ldr	r1, [pc, #376]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003720:	4b59      	ldr	r3, [pc, #356]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003726:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372e:	4956      	ldr	r1, [pc, #344]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003742:	4b51      	ldr	r3, [pc, #324]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003748:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003750:	494d      	ldr	r1, [pc, #308]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d028      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003764:	4b48      	ldr	r3, [pc, #288]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800376a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003772:	4945      	ldr	r1, [pc, #276]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003782:	d106      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003784:	4b40      	ldr	r3, [pc, #256]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4a3f      	ldr	r2, [pc, #252]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800378a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800378e:	60d3      	str	r3, [r2, #12]
 8003790:	e011      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003796:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800379a:	d10c      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3304      	adds	r3, #4
 80037a0:	2101      	movs	r1, #1
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 f872 	bl	800388c <RCCEx_PLLSAI1_Config>
 80037a8:	4603      	mov	r3, r0
 80037aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037ac:	7cfb      	ldrb	r3, [r7, #19]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80037b2:	7cfb      	ldrb	r3, [r7, #19]
 80037b4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d028      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037c2:	4b31      	ldr	r3, [pc, #196]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d0:	492d      	ldr	r1, [pc, #180]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037e0:	d106      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037e2:	4b29      	ldr	r3, [pc, #164]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	4a28      	ldr	r2, [pc, #160]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037ec:	60d3      	str	r3, [r2, #12]
 80037ee:	e011      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037f8:	d10c      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3304      	adds	r3, #4
 80037fe:	2101      	movs	r1, #1
 8003800:	4618      	mov	r0, r3
 8003802:	f000 f843 	bl	800388c <RCCEx_PLLSAI1_Config>
 8003806:	4603      	mov	r3, r0
 8003808:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800380a:	7cfb      	ldrb	r3, [r7, #19]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003810:	7cfb      	ldrb	r3, [r7, #19]
 8003812:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01c      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003820:	4b19      	ldr	r3, [pc, #100]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003826:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800382e:	4916      	ldr	r1, [pc, #88]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800383a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800383e:	d10c      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3304      	adds	r3, #4
 8003844:	2102      	movs	r1, #2
 8003846:	4618      	mov	r0, r3
 8003848:	f000 f820 	bl	800388c <RCCEx_PLLSAI1_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003850:	7cfb      	ldrb	r3, [r7, #19]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003856:	7cfb      	ldrb	r3, [r7, #19]
 8003858:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003866:	4b08      	ldr	r3, [pc, #32]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003874:	4904      	ldr	r1, [pc, #16]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800387c:	7cbb      	ldrb	r3, [r7, #18]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40021000 	.word	0x40021000

0800388c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800389a:	4b74      	ldr	r3, [pc, #464]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d018      	beq.n	80038d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038a6:	4b71      	ldr	r3, [pc, #452]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f003 0203 	and.w	r2, r3, #3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d10d      	bne.n	80038d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
       ||
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d009      	beq.n	80038d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038be:	4b6b      	ldr	r3, [pc, #428]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	091b      	lsrs	r3, r3, #4
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
       ||
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d047      	beq.n	8003962 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	73fb      	strb	r3, [r7, #15]
 80038d6:	e044      	b.n	8003962 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d018      	beq.n	8003912 <RCCEx_PLLSAI1_Config+0x86>
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d825      	bhi.n	8003930 <RCCEx_PLLSAI1_Config+0xa4>
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d002      	beq.n	80038ee <RCCEx_PLLSAI1_Config+0x62>
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d009      	beq.n	8003900 <RCCEx_PLLSAI1_Config+0x74>
 80038ec:	e020      	b.n	8003930 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038ee:	4b5f      	ldr	r3, [pc, #380]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d11d      	bne.n	8003936 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038fe:	e01a      	b.n	8003936 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003900:	4b5a      	ldr	r3, [pc, #360]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003908:	2b00      	cmp	r3, #0
 800390a:	d116      	bne.n	800393a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003910:	e013      	b.n	800393a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003912:	4b56      	ldr	r3, [pc, #344]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10f      	bne.n	800393e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800391e:	4b53      	ldr	r3, [pc, #332]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800392e:	e006      	b.n	800393e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
      break;
 8003934:	e004      	b.n	8003940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003936:	bf00      	nop
 8003938:	e002      	b.n	8003940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800393a:	bf00      	nop
 800393c:	e000      	b.n	8003940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800393e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10d      	bne.n	8003962 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003946:	4b49      	ldr	r3, [pc, #292]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6819      	ldr	r1, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	3b01      	subs	r3, #1
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	430b      	orrs	r3, r1
 800395c:	4943      	ldr	r1, [pc, #268]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800395e:	4313      	orrs	r3, r2
 8003960:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d17c      	bne.n	8003a62 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003968:	4b40      	ldr	r3, [pc, #256]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a3f      	ldr	r2, [pc, #252]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800396e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003972:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003974:	f7fd fda4 	bl	80014c0 <HAL_GetTick>
 8003978:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800397a:	e009      	b.n	8003990 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800397c:	f7fd fda0 	bl	80014c0 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d902      	bls.n	8003990 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	73fb      	strb	r3, [r7, #15]
        break;
 800398e:	e005      	b.n	800399c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003990:	4b36      	ldr	r3, [pc, #216]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1ef      	bne.n	800397c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800399c:	7bfb      	ldrb	r3, [r7, #15]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d15f      	bne.n	8003a62 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d110      	bne.n	80039ca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039a8:	4b30      	ldr	r3, [pc, #192]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80039b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6892      	ldr	r2, [r2, #8]
 80039b8:	0211      	lsls	r1, r2, #8
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	68d2      	ldr	r2, [r2, #12]
 80039be:	06d2      	lsls	r2, r2, #27
 80039c0:	430a      	orrs	r2, r1
 80039c2:	492a      	ldr	r1, [pc, #168]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	610b      	str	r3, [r1, #16]
 80039c8:	e027      	b.n	8003a1a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d112      	bne.n	80039f6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039d0:	4b26      	ldr	r3, [pc, #152]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80039d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6892      	ldr	r2, [r2, #8]
 80039e0:	0211      	lsls	r1, r2, #8
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6912      	ldr	r2, [r2, #16]
 80039e6:	0852      	lsrs	r2, r2, #1
 80039e8:	3a01      	subs	r2, #1
 80039ea:	0552      	lsls	r2, r2, #21
 80039ec:	430a      	orrs	r2, r1
 80039ee:	491f      	ldr	r1, [pc, #124]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	610b      	str	r3, [r1, #16]
 80039f4:	e011      	b.n	8003a1a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039f6:	4b1d      	ldr	r3, [pc, #116]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80039fe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6892      	ldr	r2, [r2, #8]
 8003a06:	0211      	lsls	r1, r2, #8
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6952      	ldr	r2, [r2, #20]
 8003a0c:	0852      	lsrs	r2, r2, #1
 8003a0e:	3a01      	subs	r2, #1
 8003a10:	0652      	lsls	r2, r2, #25
 8003a12:	430a      	orrs	r2, r1
 8003a14:	4915      	ldr	r1, [pc, #84]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a1a:	4b14      	ldr	r3, [pc, #80]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a13      	ldr	r2, [pc, #76]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a26:	f7fd fd4b 	bl	80014c0 <HAL_GetTick>
 8003a2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a2c:	e009      	b.n	8003a42 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a2e:	f7fd fd47 	bl	80014c0 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d902      	bls.n	8003a42 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	73fb      	strb	r3, [r7, #15]
          break;
 8003a40:	e005      	b.n	8003a4e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a42:	4b0a      	ldr	r3, [pc, #40]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0ef      	beq.n	8003a2e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d106      	bne.n	8003a62 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a54:	4b05      	ldr	r3, [pc, #20]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	4903      	ldr	r1, [pc, #12]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40021000 	.word	0x40021000

08003a70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e049      	b.n	8003b16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7fd fbbe 	bl	8001218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	4619      	mov	r1, r3
 8003aae:	4610      	mov	r0, r2
 8003ab0:	f000 fada 	bl	8004068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b082      	sub	sp, #8
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e049      	b.n	8003bc4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d106      	bne.n	8003b4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7fd fb35 	bl	80011b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3304      	adds	r3, #4
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	f000 fa83 	bl	8004068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d020      	beq.n	8003c30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01b      	beq.n	8003c30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0202 	mvn.w	r2, #2
 8003c00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fa08 	bl	800402c <HAL_TIM_IC_CaptureCallback>
 8003c1c:	e005      	b.n	8003c2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f9fa 	bl	8004018 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fa0b 	bl	8004040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d020      	beq.n	8003c7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d01b      	beq.n	8003c7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f06f 0204 	mvn.w	r2, #4
 8003c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2202      	movs	r2, #2
 8003c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f9e2 	bl	800402c <HAL_TIM_IC_CaptureCallback>
 8003c68:	e005      	b.n	8003c76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f9d4 	bl	8004018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f9e5 	bl	8004040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d020      	beq.n	8003cc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d01b      	beq.n	8003cc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f06f 0208 	mvn.w	r2, #8
 8003c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2204      	movs	r2, #4
 8003c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f9bc 	bl	800402c <HAL_TIM_IC_CaptureCallback>
 8003cb4:	e005      	b.n	8003cc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f9ae 	bl	8004018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f9bf 	bl	8004040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f003 0310 	and.w	r3, r3, #16
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d020      	beq.n	8003d14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f003 0310 	and.w	r3, r3, #16
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d01b      	beq.n	8003d14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0210 	mvn.w	r2, #16
 8003ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2208      	movs	r2, #8
 8003cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f996 	bl	800402c <HAL_TIM_IC_CaptureCallback>
 8003d00:	e005      	b.n	8003d0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f988 	bl	8004018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f999 	bl	8004040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00c      	beq.n	8003d38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d007      	beq.n	8003d38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f06f 0201 	mvn.w	r2, #1
 8003d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f966 	bl	8004004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d104      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00c      	beq.n	8003d66 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d007      	beq.n	8003d66 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 fd57 	bl	8004814 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00c      	beq.n	8003d8a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d007      	beq.n	8003d8a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 fd4f 	bl	8004828 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00c      	beq.n	8003dae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d007      	beq.n	8003dae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f953 	bl	8004054 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00c      	beq.n	8003dd2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d007      	beq.n	8003dd2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f06f 0220 	mvn.w	r2, #32
 8003dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fd17 	bl	8004800 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dd2:	bf00      	nop
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003df6:	2302      	movs	r3, #2
 8003df8:	e0ff      	b.n	8003ffa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b14      	cmp	r3, #20
 8003e06:	f200 80f0 	bhi.w	8003fea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e10:	08003e65 	.word	0x08003e65
 8003e14:	08003feb 	.word	0x08003feb
 8003e18:	08003feb 	.word	0x08003feb
 8003e1c:	08003feb 	.word	0x08003feb
 8003e20:	08003ea5 	.word	0x08003ea5
 8003e24:	08003feb 	.word	0x08003feb
 8003e28:	08003feb 	.word	0x08003feb
 8003e2c:	08003feb 	.word	0x08003feb
 8003e30:	08003ee7 	.word	0x08003ee7
 8003e34:	08003feb 	.word	0x08003feb
 8003e38:	08003feb 	.word	0x08003feb
 8003e3c:	08003feb 	.word	0x08003feb
 8003e40:	08003f27 	.word	0x08003f27
 8003e44:	08003feb 	.word	0x08003feb
 8003e48:	08003feb 	.word	0x08003feb
 8003e4c:	08003feb 	.word	0x08003feb
 8003e50:	08003f69 	.word	0x08003f69
 8003e54:	08003feb 	.word	0x08003feb
 8003e58:	08003feb 	.word	0x08003feb
 8003e5c:	08003feb 	.word	0x08003feb
 8003e60:	08003fa9 	.word	0x08003fa9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68b9      	ldr	r1, [r7, #8]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 f96c 	bl	8004148 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699a      	ldr	r2, [r3, #24]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0208 	orr.w	r2, r2, #8
 8003e7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699a      	ldr	r2, [r3, #24]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0204 	bic.w	r2, r2, #4
 8003e8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6999      	ldr	r1, [r3, #24]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	691a      	ldr	r2, [r3, #16]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	619a      	str	r2, [r3, #24]
      break;
 8003ea2:	e0a5      	b.n	8003ff0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68b9      	ldr	r1, [r7, #8]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 f9c8 	bl	8004240 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699a      	ldr	r2, [r3, #24]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6999      	ldr	r1, [r3, #24]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	021a      	lsls	r2, r3, #8
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	619a      	str	r2, [r3, #24]
      break;
 8003ee4:	e084      	b.n	8003ff0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68b9      	ldr	r1, [r7, #8]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fa21 	bl	8004334 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69da      	ldr	r2, [r3, #28]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0208 	orr.w	r2, r2, #8
 8003f00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69da      	ldr	r2, [r3, #28]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0204 	bic.w	r2, r2, #4
 8003f10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69d9      	ldr	r1, [r3, #28]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	61da      	str	r2, [r3, #28]
      break;
 8003f24:	e064      	b.n	8003ff0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68b9      	ldr	r1, [r7, #8]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fa79 	bl	8004424 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	69da      	ldr	r2, [r3, #28]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69d9      	ldr	r1, [r3, #28]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	021a      	lsls	r2, r3, #8
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	61da      	str	r2, [r3, #28]
      break;
 8003f66:	e043      	b.n	8003ff0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68b9      	ldr	r1, [r7, #8]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fab6 	bl	80044e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0208 	orr.w	r2, r2, #8
 8003f82:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0204 	bic.w	r2, r2, #4
 8003f92:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003fa6:	e023      	b.n	8003ff0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68b9      	ldr	r1, [r7, #8]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 faee 	bl	8004590 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fc2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fd2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	021a      	lsls	r2, r3, #8
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003fe8:	e002      	b.n	8003ff0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	75fb      	strb	r3, [r7, #23]
      break;
 8003fee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop

08004004 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a30      	ldr	r2, [pc, #192]	@ (800413c <TIM_Base_SetConfig+0xd4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d003      	beq.n	8004088 <TIM_Base_SetConfig+0x20>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004086:	d108      	bne.n	800409a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800408e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a27      	ldr	r2, [pc, #156]	@ (800413c <TIM_Base_SetConfig+0xd4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d00b      	beq.n	80040ba <TIM_Base_SetConfig+0x52>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a8:	d007      	beq.n	80040ba <TIM_Base_SetConfig+0x52>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a24      	ldr	r2, [pc, #144]	@ (8004140 <TIM_Base_SetConfig+0xd8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d003      	beq.n	80040ba <TIM_Base_SetConfig+0x52>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a23      	ldr	r2, [pc, #140]	@ (8004144 <TIM_Base_SetConfig+0xdc>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d108      	bne.n	80040cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a12      	ldr	r2, [pc, #72]	@ (800413c <TIM_Base_SetConfig+0xd4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d007      	beq.n	8004108 <TIM_Base_SetConfig+0xa0>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a11      	ldr	r2, [pc, #68]	@ (8004140 <TIM_Base_SetConfig+0xd8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d003      	beq.n	8004108 <TIM_Base_SetConfig+0xa0>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a10      	ldr	r2, [pc, #64]	@ (8004144 <TIM_Base_SetConfig+0xdc>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d103      	bne.n	8004110 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b01      	cmp	r3, #1
 8004120:	d105      	bne.n	800412e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f023 0201 	bic.w	r2, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	611a      	str	r2, [r3, #16]
  }
}
 800412e:	bf00      	nop
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	40012c00 	.word	0x40012c00
 8004140:	40014000 	.word	0x40014000
 8004144:	40014400 	.word	0x40014400

08004148 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	f023 0201 	bic.w	r2, r3, #1
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800417a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 0303 	bic.w	r3, r3, #3
 8004182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f023 0302 	bic.w	r3, r3, #2
 8004194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a24      	ldr	r2, [pc, #144]	@ (8004234 <TIM_OC1_SetConfig+0xec>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d007      	beq.n	80041b8 <TIM_OC1_SetConfig+0x70>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a23      	ldr	r2, [pc, #140]	@ (8004238 <TIM_OC1_SetConfig+0xf0>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d003      	beq.n	80041b8 <TIM_OC1_SetConfig+0x70>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a22      	ldr	r2, [pc, #136]	@ (800423c <TIM_OC1_SetConfig+0xf4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d10c      	bne.n	80041d2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f023 0308 	bic.w	r3, r3, #8
 80041be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f023 0304 	bic.w	r3, r3, #4
 80041d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a17      	ldr	r2, [pc, #92]	@ (8004234 <TIM_OC1_SetConfig+0xec>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d007      	beq.n	80041ea <TIM_OC1_SetConfig+0xa2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a16      	ldr	r2, [pc, #88]	@ (8004238 <TIM_OC1_SetConfig+0xf0>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d003      	beq.n	80041ea <TIM_OC1_SetConfig+0xa2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a15      	ldr	r2, [pc, #84]	@ (800423c <TIM_OC1_SetConfig+0xf4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d111      	bne.n	800420e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	621a      	str	r2, [r3, #32]
}
 8004228:	bf00      	nop
 800422a:	371c      	adds	r7, #28
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	40012c00 	.word	0x40012c00
 8004238:	40014000 	.word	0x40014000
 800423c:	40014400 	.word	0x40014400

08004240 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	f023 0210 	bic.w	r2, r3, #16
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800426e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800427a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	021b      	lsls	r3, r3, #8
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4313      	orrs	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f023 0320 	bic.w	r3, r3, #32
 800428e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	4313      	orrs	r3, r2
 800429a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a22      	ldr	r2, [pc, #136]	@ (8004328 <TIM_OC2_SetConfig+0xe8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d10d      	bne.n	80042c0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a19      	ldr	r2, [pc, #100]	@ (8004328 <TIM_OC2_SetConfig+0xe8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d007      	beq.n	80042d8 <TIM_OC2_SetConfig+0x98>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a18      	ldr	r2, [pc, #96]	@ (800432c <TIM_OC2_SetConfig+0xec>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d003      	beq.n	80042d8 <TIM_OC2_SetConfig+0x98>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a17      	ldr	r2, [pc, #92]	@ (8004330 <TIM_OC2_SetConfig+0xf0>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d113      	bne.n	8004300 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	621a      	str	r2, [r3, #32]
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40012c00 	.word	0x40012c00
 800432c:	40014000 	.word	0x40014000
 8004330:	40014400 	.word	0x40014400

08004334 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0303 	bic.w	r3, r3, #3
 800436e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	021b      	lsls	r3, r3, #8
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	4313      	orrs	r3, r2
 800438c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a21      	ldr	r2, [pc, #132]	@ (8004418 <TIM_OC3_SetConfig+0xe4>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d10d      	bne.n	80043b2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800439c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	021b      	lsls	r3, r3, #8
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a18      	ldr	r2, [pc, #96]	@ (8004418 <TIM_OC3_SetConfig+0xe4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d007      	beq.n	80043ca <TIM_OC3_SetConfig+0x96>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a17      	ldr	r2, [pc, #92]	@ (800441c <TIM_OC3_SetConfig+0xe8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d003      	beq.n	80043ca <TIM_OC3_SetConfig+0x96>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a16      	ldr	r2, [pc, #88]	@ (8004420 <TIM_OC3_SetConfig+0xec>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d113      	bne.n	80043f2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	621a      	str	r2, [r3, #32]
}
 800440c:	bf00      	nop
 800440e:	371c      	adds	r7, #28
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	40012c00 	.word	0x40012c00
 800441c:	40014000 	.word	0x40014000
 8004420:	40014400 	.word	0x40014400

08004424 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004452:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800445e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	021b      	lsls	r3, r3, #8
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4313      	orrs	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004472:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	031b      	lsls	r3, r3, #12
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4313      	orrs	r3, r2
 800447e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a14      	ldr	r2, [pc, #80]	@ (80044d4 <TIM_OC4_SetConfig+0xb0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d007      	beq.n	8004498 <TIM_OC4_SetConfig+0x74>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a13      	ldr	r2, [pc, #76]	@ (80044d8 <TIM_OC4_SetConfig+0xb4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d003      	beq.n	8004498 <TIM_OC4_SetConfig+0x74>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a12      	ldr	r2, [pc, #72]	@ (80044dc <TIM_OC4_SetConfig+0xb8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d109      	bne.n	80044ac <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800449e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	019b      	lsls	r3, r3, #6
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	621a      	str	r2, [r3, #32]
}
 80044c6:	bf00      	nop
 80044c8:	371c      	adds	r7, #28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	40012c00 	.word	0x40012c00
 80044d8:	40014000 	.word	0x40014000
 80044dc:	40014400 	.word	0x40014400

080044e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800450e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004524:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	041b      	lsls	r3, r3, #16
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a13      	ldr	r2, [pc, #76]	@ (8004584 <TIM_OC5_SetConfig+0xa4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d007      	beq.n	800454a <TIM_OC5_SetConfig+0x6a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a12      	ldr	r2, [pc, #72]	@ (8004588 <TIM_OC5_SetConfig+0xa8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d003      	beq.n	800454a <TIM_OC5_SetConfig+0x6a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a11      	ldr	r2, [pc, #68]	@ (800458c <TIM_OC5_SetConfig+0xac>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d109      	bne.n	800455e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004550:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	021b      	lsls	r3, r3, #8
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	4313      	orrs	r3, r2
 800455c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	621a      	str	r2, [r3, #32]
}
 8004578:	bf00      	nop
 800457a:	371c      	adds	r7, #28
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	40012c00 	.word	0x40012c00
 8004588:	40014000 	.word	0x40014000
 800458c:	40014400 	.word	0x40014400

08004590 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80045d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	051b      	lsls	r3, r3, #20
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a14      	ldr	r2, [pc, #80]	@ (8004638 <TIM_OC6_SetConfig+0xa8>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d007      	beq.n	80045fc <TIM_OC6_SetConfig+0x6c>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a13      	ldr	r2, [pc, #76]	@ (800463c <TIM_OC6_SetConfig+0xac>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d003      	beq.n	80045fc <TIM_OC6_SetConfig+0x6c>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a12      	ldr	r2, [pc, #72]	@ (8004640 <TIM_OC6_SetConfig+0xb0>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d109      	bne.n	8004610 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004602:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	029b      	lsls	r3, r3, #10
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	621a      	str	r2, [r3, #32]
}
 800462a:	bf00      	nop
 800462c:	371c      	adds	r7, #28
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	40012c00 	.word	0x40012c00
 800463c:	40014000 	.word	0x40014000
 8004640:	40014400 	.word	0x40014400

08004644 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004654:	2b01      	cmp	r3, #1
 8004656:	d101      	bne.n	800465c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004658:	2302      	movs	r3, #2
 800465a:	e04f      	b.n	80046fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a21      	ldr	r2, [pc, #132]	@ (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d108      	bne.n	8004698 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800468c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4313      	orrs	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800469e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a14      	ldr	r2, [pc, #80]	@ (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d009      	beq.n	80046d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c4:	d004      	beq.n	80046d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a10      	ldr	r2, [pc, #64]	@ (800470c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d10c      	bne.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	40012c00 	.word	0x40012c00
 800470c:	40014000 	.word	0x40014000

08004710 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004728:	2302      	movs	r3, #2
 800472a:	e060      	b.n	80047ee <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	4313      	orrs	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	041b      	lsls	r3, r3, #16
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a14      	ldr	r2, [pc, #80]	@ (80047fc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d115      	bne.n	80047dc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ba:	051b      	lsls	r3, r3, #20
 80047bc:	4313      	orrs	r3, r2
 80047be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40012c00 	.word	0x40012c00

08004800 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <memset>:
 800483c:	4402      	add	r2, r0
 800483e:	4603      	mov	r3, r0
 8004840:	4293      	cmp	r3, r2
 8004842:	d100      	bne.n	8004846 <memset+0xa>
 8004844:	4770      	bx	lr
 8004846:	f803 1b01 	strb.w	r1, [r3], #1
 800484a:	e7f9      	b.n	8004840 <memset+0x4>

0800484c <__libc_init_array>:
 800484c:	b570      	push	{r4, r5, r6, lr}
 800484e:	4d0d      	ldr	r5, [pc, #52]	@ (8004884 <__libc_init_array+0x38>)
 8004850:	4c0d      	ldr	r4, [pc, #52]	@ (8004888 <__libc_init_array+0x3c>)
 8004852:	1b64      	subs	r4, r4, r5
 8004854:	10a4      	asrs	r4, r4, #2
 8004856:	2600      	movs	r6, #0
 8004858:	42a6      	cmp	r6, r4
 800485a:	d109      	bne.n	8004870 <__libc_init_array+0x24>
 800485c:	4d0b      	ldr	r5, [pc, #44]	@ (800488c <__libc_init_array+0x40>)
 800485e:	4c0c      	ldr	r4, [pc, #48]	@ (8004890 <__libc_init_array+0x44>)
 8004860:	f000 f818 	bl	8004894 <_init>
 8004864:	1b64      	subs	r4, r4, r5
 8004866:	10a4      	asrs	r4, r4, #2
 8004868:	2600      	movs	r6, #0
 800486a:	42a6      	cmp	r6, r4
 800486c:	d105      	bne.n	800487a <__libc_init_array+0x2e>
 800486e:	bd70      	pop	{r4, r5, r6, pc}
 8004870:	f855 3b04 	ldr.w	r3, [r5], #4
 8004874:	4798      	blx	r3
 8004876:	3601      	adds	r6, #1
 8004878:	e7ee      	b.n	8004858 <__libc_init_array+0xc>
 800487a:	f855 3b04 	ldr.w	r3, [r5], #4
 800487e:	4798      	blx	r3
 8004880:	3601      	adds	r6, #1
 8004882:	e7f2      	b.n	800486a <__libc_init_array+0x1e>
 8004884:	080048ec 	.word	0x080048ec
 8004888:	080048ec 	.word	0x080048ec
 800488c:	080048ec 	.word	0x080048ec
 8004890:	080048f0 	.word	0x080048f0

08004894 <_init>:
 8004894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004896:	bf00      	nop
 8004898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800489a:	bc08      	pop	{r3}
 800489c:	469e      	mov	lr, r3
 800489e:	4770      	bx	lr

080048a0 <_fini>:
 80048a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a2:	bf00      	nop
 80048a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a6:	bc08      	pop	{r3}
 80048a8:	469e      	mov	lr, r3
 80048aa:	4770      	bx	lr
